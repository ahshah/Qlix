!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.5.4	//
AR	Makefile	/^AR            = ar cqs$/;"	m
AddChild	mtp/DirNode.h	/^    void AddChild ( DirNode* in ) { _children.push_back(in);  }$/;"	f	class:DirNode	access:public	signature:( DirNode* in )
AddFile	mtp/DirNode.h	/^    void AddFile(const FileNode& temp)$/;"	f	class:DirNode	access:public	signature:(const FileNode& temp)
AddFile	mtp/MtpFS.h	/^    void AddFile (FileNode& in_file)$/;"	f	class:MtpFS	access:public	signature:(FileNode& in_file)
AddFile	widgets/DeviceFileModel.h	/^    void AddFile (FileNode& File)$/;"	f	class:DeviceFileModel	access:public	signature:(FileNode& File)
Alpha	mtp/BmpStructs.h	/^    byte Alpha;$/;"	m	struct:Pixel	access:public
BitCount	mtp/BmpStructs.h	/^    ushort BitCount;$/;"	m	struct:DibHeader	access:public
BitCount	mtp/BmpStructs.h	/^    ushort BitCount;$/;"	m	struct:IconDirEntry	access:public
Blue	mtp/BmpStructs.h	/^    byte Blue;$/;"	m	struct:PaletteEntry	access:public
Blue	mtp/BmpStructs.h	/^    byte Blue;$/;"	m	struct:Pixel	access:public
BmpFileHeader	mtp/BmpStructs.h	/^struct BmpFileHeader$/;"	s
BmpFileHeader::offset	mtp/BmpStructs.h	/^    unsigned int offset;      \/\/4$/;"	m	struct:BmpFileHeader	access:public
BmpFileHeader::reserved1	mtp/BmpStructs.h	/^    ushort reserved1; \/\/2$/;"	m	struct:BmpFileHeader	access:public
BmpFileHeader::reserved2	mtp/BmpStructs.h	/^    ushort reserved2; \/\/2$/;"	m	struct:BmpFileHeader	access:public
BmpFileHeader::size	mtp/BmpStructs.h	/^    unsigned int size;   \/\/4$/;"	m	struct:BmpFileHeader	access:public
BmpFileHeader::type	mtp/BmpStructs.h	/^    unsigned short type; \/\/2$/;"	m	struct:BmpFileHeader	access:public
CC	Makefile	/^CC            = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS        = -pipe -O0 -Wall -W -D_REENTRANT  $(DEFINES)$/;"	m
CHK_DIR_EXISTS	Makefile	/^CHK_DIR_EXISTS= test -d$/;"	m
COMPRESS	Makefile	/^COMPRESS      = gzip -9f$/;"	m
COPY	Makefile	/^COPY          = cp -f$/;"	m
COPY_DIR	Makefile	/^COPY_DIR      = $(COPY) -r$/;"	m
COPY_FILE	Makefile	/^COPY_FILE     = $(COPY)$/;"	m
CXX	Makefile	/^CXX           = g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS      = -ggdb -pipe -O0 -Wall -W -D_REENTRANT  $(DEFINES)$/;"	m
ChildCount	mtp/DirNode.h	/^    count_t ChildCount() { return _children.size(); }$/;"	f	class:DirNode	access:public	signature:()
ColorCount	mtp/BmpStructs.h	/^    ubyte ColorCount;$/;"	m	struct:IconDirEntry	access:public
Colors	mtp/BmpStructs.h	/^    int Colors;$/;"	m	struct:DibHeader	access:public
ComCode	mtp/CommandCodes.h	/^    MtpCommandCode ComCode;$/;"	m	struct:MtpCommand	access:public
ComCode	mtp/CommandCodes.h	/^    MtpCommandCode ComCode;$/;"	m	struct:MtpUpdate	access:public
Compression	mtp/BmpStructs.h	/^    int Compression;$/;"	m	struct:DibHeader	access:public
Connect	mtp/CommandCodes.h	/^    Connect,$/;"	e	enum:MtpCommandCode
Connect	mtp/MtpPortal.h	/^    void Connect()$/;"	f	class:MtpPortal	access:public	signature:()
ConnectComplete	widgets/DeviceExplorer.h	/^    void ConnectComplete ( MtpFS* in_fs) \/\/ fix this$/;"	f	class:DeviceExplorer	access:public	signature:( MtpFS* in_fs)
ConnectDevice	widgets/DeviceExplorer.h	/^    void ConnectDevice ( void )$/;"	f	class:DeviceExplorer	access:public	signature:( void )
ConnectDone	mtp/MtpThread.h	/^    void ConnectDone(MtpFS* FS);$/;"	p	class:MtpThread	access:public	signature:(MtpFS* FS)
ConsoleWidget	widgets/ConsoleWidget.h	/^    ConsoleWidget (QWidget* parent = NULL) : QWidget (parent)$/;"	f	class:ConsoleWidget	access:public	signature:(QWidget* parent = NULL)
ConsoleWidget	widgets/ConsoleWidget.h	/^class ConsoleWidget : public QWidget$/;"	c	inherits:QWidget
ConsoleWidget::ConsoleWidget	widgets/ConsoleWidget.h	/^    ConsoleWidget (QWidget* parent = NULL) : QWidget (parent)$/;"	f	class:ConsoleWidget	access:public	signature:(QWidget* parent = NULL)
ConsoleWidget::GetLayout	widgets/ConsoleWidget.h	/^    QVBoxLayout* GetLayout ( void )$/;"	f	class:ConsoleWidget	access:public	signature:( void )
ConsoleWidget::InsertText	widgets/ConsoleWidget.h	/^    virtual void InsertText(const QString& in_text)$/;"	f	class:ConsoleWidget	access:public	signature:(const QString& in_text)
ConsoleWidget::NewText	widgets/ConsoleWidget.h	/^    void NewText(const QString& txt);$/;"	p	class:ConsoleWidget	access:public	signature:(const QString& txt)
ConsoleWidget::OnReturn	widgets/ConsoleWidget.h	/^    virtual void OnReturn( void )$/;"	f	class:ConsoleWidget	access:public	signature:( void )
ConsoleWidget::_commandLine	widgets/ConsoleWidget.h	/^    QLineEdit* _commandLine;$/;"	m	class:ConsoleWidget	access:private
ConsoleWidget::_commandLineLabel	widgets/ConsoleWidget.h	/^    QLabel*    _commandLineLabel;$/;"	m	class:ConsoleWidget	access:private
ConsoleWidget::_cursor	widgets/ConsoleWidget.h	/^    QTextCursor* _cursor;$/;"	m	class:ConsoleWidget	access:private
ConsoleWidget::_doc	widgets/ConsoleWidget.h	/^    QTextDocument* _doc;$/;"	m	class:ConsoleWidget	access:private
ConsoleWidget::_editor	widgets/ConsoleWidget.h	/^    QTextEdit* _editor;$/;"	m	class:ConsoleWidget	access:private
ConsoleWidget::_editorScroller	widgets/ConsoleWidget.h	/^    QScrollBar* _editorScroller;$/;"	m	class:ConsoleWidget	access:private
ConsoleWidget::_layout	widgets/ConsoleWidget.h	/^    QVBoxLayout* _layout;$/;"	m	class:ConsoleWidget	access:private
ConsoleWidget::_needCmdLine	widgets/ConsoleWidget.h	/^    bool       _needCmdLine; $/;"	m	class:ConsoleWidget	access:private
ConsoleWidget::addCommandLine	widgets/ConsoleWidget.h	/^    virtual void addCommandLine ( void )$/;"	f	class:ConsoleWidget	access:public	signature:( void )
ConsoleWidget::processCommand	widgets/ConsoleWidget.h	/^    virtual void processCommand(const QString& in_cmd)$/;"	f	class:ConsoleWidget	access:public	signature:(const QString& in_cmd)
ConsoleWidget::setupCommandLine	widgets/ConsoleWidget.h	/^    void setupCommandLine()$/;"	f	class:ConsoleWidget	access:private	signature:()
ConsoleWidget::setupConnections	widgets/ConsoleWidget.h	/^    void setupConnections()$/;"	f	class:ConsoleWidget	access:private	signature:()
ConsoleWidget::setupEditor	widgets/ConsoleWidget.h	/^    void setupEditor()$/;"	f	class:ConsoleWidget	access:private	signature:()
Count	mtp/BmpStructs.h	/^    ushort Count;$/;"	m	struct:IconHeader	access:public
CreateFolder	mtp/CommandCodes.h	/^    CreateFolder$/;"	e	enum:MtpCommandCode
CreateMapping	mtp/DirNode.h	/^    void CreateMapping (map <uint32_t, DirNode*>& in_map )$/;"	f	class:DirNode	access:public	signature:(map <uint32_t, DirNode*>& in_map )
CurrentDirectory	widgets/DeviceFileView.cpp	/^void DeviceFileView::CurrentDirectory(DirNode** out_node)$/;"	f	class:DeviceFileView	signature:(DirNode** out_node)
CurrentDirectory	widgets/DeviceFileView.h	/^    void CurrentDirectory(DirNode** out_node);$/;"	p	class:DeviceFileView	access:public	signature:(DirNode** out_node)
CurrentDirectory	widgets/FileView.cpp	/^void FileView::CurrentDirectory(QString* in_filename)$/;"	f	class:FileView	signature:(QString* in_filename)
CurrentDirectory	widgets/FileView.h	/^    void CurrentDirectory(QString* in_filename);$/;"	p	class:FileView	access:public	signature:(QString* in_filename)
CurrentFolder	widgets/DeviceFileModel.h	/^    uint32_t CurrentFolder ()$/;"	f	class:DeviceFileModel	access:public	signature:()
CurrentLocation	widgets/DirView.h	/^    void CurrentLocation(QString* in_filename)$/;"	f	class:DirView	access:public	signature:(QString* in_filename)
CurrentSelection	widgets/FileView.cpp	/^void FileView::CurrentSelection (QList<QString>* listout)$/;"	f	class:FileView	signature:(QList<QString>* listout)
CurrentSelection	widgets/FileView.h	/^    void CurrentSelection (QList<QString>* listout); $/;"	p	class:FileView	access:public	signature:(QList<QString>* listout)
DEFINES	Makefile	/^DEFINES       = -DQT_NO_DEBUG -DQT_GUI_LIB -DQT_CORE_LIB$/;"	m
DEL_DIR	Makefile	/^DEL_DIR       = rmdir$/;"	m
DEL_FILE	Makefile	/^DEL_FILE      = rm -f$/;"	m
DESTDIR	Makefile	/^DESTDIR       = $/;"	m
DIST	Makefile	/^DIST          = \/usr\/share\/qt4\/mkspecs\/common\/unix.conf \\$/;"	m
DataOffset	mtp/BmpStructs.h	/^    int DataOffset;$/;"	m	struct:IconDirEntry	access:public
DataSize	mtp/BmpStructs.h	/^    count_t DataSize;$/;"	m	struct:IconDirEntry	access:public
Delete	mtp/CommandCodes.h	/^    Delete,$/;"	e	enum:MtpCommandCode
DeleteComplete	mtp/MtpThread.h	/^    void DeleteComplete(MtpUpdateDelete* );$/;"	p	class:MtpThread	access:public	signature:(MtpUpdateDelete* )
DeleteFile	mtp/DirNode.h	/^    void DeleteFile (const FileNode& in_file)$/;"	f	class:DirNode	access:public	signature:(const FileNode& in_file)
DeleteFile	mtp/MtpFS.h	/^    void DeleteFile (const FileNode& in_file)$/;"	f	class:MtpFS	access:public	signature:(const FileNode& in_file)
DeleteFile	widgets/DeviceDirModel.h	/^    void DeleteFile (const FileNode& in_file)$/;"	f	class:DeviceDirModel	access:public	signature:(const FileNode& in_file)
Depth	mtp/MtpDir.h	/^    count_t Depth;$/;"	m	class:MtpDir	access:public
DeviceConsole	widgets/DeviceConsole.h	/^    DeviceConsole (QWidget* parent = NULL) : QWidget(parent)$/;"	f	class:DeviceConsole	access:public	signature:(QWidget* parent = NULL)
DeviceConsole	widgets/DeviceConsole.h	/^class DeviceConsole : public QWidget$/;"	c	inherits:QWidget
DeviceConsole::DeviceConsole	widgets/DeviceConsole.h	/^    DeviceConsole (QWidget* parent = NULL) : QWidget(parent)$/;"	f	class:DeviceConsole	access:public	signature:(QWidget* parent = NULL)
DeviceConsole::_deviceFreeSpace	widgets/DeviceConsole.h	/^        QLabel* _deviceFreeSpace;$/;"	m	class:DeviceConsole	access:private
DeviceConsole::_deviceImage	widgets/DeviceConsole.h	/^        QPixmap _deviceImage;$/;"	m	class:DeviceConsole	access:private
DeviceConsole::_deviceLabel	widgets/DeviceConsole.h	/^        QLabel* _deviceLabel;$/;"	m	class:DeviceConsole	access:private
DeviceConsole::_deviceTotalSpace	widgets/DeviceConsole.h	/^        QLabel* _deviceTotalSpace;$/;"	m	class:DeviceConsole	access:private
DeviceConsole::_layout	widgets/DeviceConsole.h	/^        QGridLayout* _layout;$/;"	m	class:DeviceConsole	access:private
DeviceConsole::changeWidgetBackground	widgets/DeviceConsole.h	/^        void changeWidgetBackground()$/;"	f	class:DeviceConsole	access:private	signature:()
DeviceConsole::getRawImage	widgets/DeviceConsole.h	/^        bool getRawImage(const QString& in_path, QPixmap& in_pixmap)$/;"	f	class:DeviceConsole	access:private	signature:(const QString& in_path, QPixmap& in_pixmap)
DeviceConsole::resetRootImage	widgets/DeviceConsole.h	/^    void resetRootImage()$/;"	f	class:DeviceConsole	access:public	signature:()
DeviceConsole::setupLabels	widgets/DeviceConsole.h	/^        void setupLabels()$/;"	f	class:DeviceConsole	access:private	signature:()
DeviceConsole::setupWidget	widgets/DeviceConsole.h	/^        void setupWidget()$/;"	f	class:DeviceConsole	access:private	signature:()
DeviceDirModel	widgets/DeviceDirModel.h	/^    DeviceDirModel (QObject* parent = NULL) : QAbstractItemModel(parent)$/;"	f	class:DeviceDirModel	access:public	signature:(QObject* parent = NULL)
DeviceDirModel	widgets/DeviceDirModel.h	/^class DeviceDirModel : public QAbstractItemModel$/;"	c	inherits:QAbstractItemModel
DeviceDirModel::DeleteFile	widgets/DeviceDirModel.h	/^    void DeleteFile (const FileNode& in_file)$/;"	f	class:DeviceDirModel	access:public	signature:(const FileNode& in_file)
DeviceDirModel::DeviceDirModel	widgets/DeviceDirModel.h	/^    DeviceDirModel (QObject* parent = NULL) : QAbstractItemModel(parent)$/;"	f	class:DeviceDirModel	access:public	signature:(QObject* parent = NULL)
DeviceDirModel::GetDir	widgets/DeviceDirModel.h	/^    DirNode* GetDir(uint32_t id)$/;"	f	class:DeviceDirModel	access:public	signature:(uint32_t id)
DeviceDirModel::Set	widgets/DeviceDirModel.h	/^    void Set (MtpFS* in_fs)$/;"	f	class:DeviceDirModel	access:public	signature:(MtpFS* in_fs)
DeviceDirModel::Unset	widgets/DeviceDirModel.h	/^    void Unset ()$/;"	f	class:DeviceDirModel	access:public	signature:()
DeviceDirModel::_mtpFileSystem	widgets/DeviceDirModel.h	/^    MtpFS*     _mtpFileSystem;$/;"	m	class:DeviceDirModel	access:private
DeviceDirModel::columnCount	widgets/DeviceDirModel.h	/^    int columnCount(const QModelIndex& ) const$/;"	f	class:DeviceDirModel	access:public	signature:(const QModelIndex& ) const
DeviceDirModel::data	widgets/DeviceDirModel.h	/^    QVariant data(const QModelIndex &index, int role) const$/;"	f	class:DeviceDirModel	access:public	signature:(const QModelIndex &index, int role) const
DeviceDirModel::dirFromIndex	widgets/DeviceDirModel.h	/^    DirNode* dirFromIndex(const QModelIndex& index) const$/;"	f	class:DeviceDirModel	access:private	signature:(const QModelIndex& index) const
DeviceDirModel::headerData	widgets/DeviceDirModel.h	/^    QVariant headerData(int section, Qt::Orientation orientation, int role) const$/;"	f	class:DeviceDirModel	access:public	signature:(int section, Qt::Orientation orientation, int role) const
DeviceDirModel::index	widgets/DeviceDirModel.h	/^    QModelIndex index (int row, int column, const QModelIndex& parent) const$/;"	f	class:DeviceDirModel	access:public	signature:(int row, int column, const QModelIndex& parent) const
DeviceDirModel::parent	widgets/DeviceDirModel.h	/^    QModelIndex parent (const QModelIndex &child) const$/;"	f	class:DeviceDirModel	access:public	signature:(const QModelIndex &child) const
DeviceDirModel::rowCount	widgets/DeviceDirModel.h	/^    int rowCount(const QModelIndex &parent) const$/;"	f	class:DeviceDirModel	access:public	signature:(const QModelIndex &parent) const
DeviceDirModel::~DeviceDirModel	widgets/DeviceDirModel.h	/^    ~DeviceDirModel ( void )$/;"	f	class:DeviceDirModel	access:public	signature:( void )
DeviceDirView	widgets/DeviceDirView.h	/^    DeviceDirView (QWidget* parent = NULL) : QTreeView(parent)$/;"	f	class:DeviceDirView	access:public	signature:(QWidget* parent = NULL)
DeviceDirView	widgets/DeviceDirView.h	/^class DeviceDirView : public QTreeView$/;"	c	inherits:QTreeView
DeviceDirView::DeviceDirView	widgets/DeviceDirView.h	/^    DeviceDirView (QWidget* parent = NULL) : QTreeView(parent)$/;"	f	class:DeviceDirView	access:public	signature:(QWidget* parent = NULL)
DeviceDirView::_createFolderAct	widgets/DeviceDirView.h	/^    QAction* _createFolderAct;$/;"	m	class:DeviceDirView	access:private
DeviceDirView::_deleteFolderAct	widgets/DeviceDirView.h	/^    QAction* _deleteFolderAct;$/;"	m	class:DeviceDirView	access:private
DeviceDirView::_transferFolderAct	widgets/DeviceDirView.h	/^    QAction* _transferFolderAct;$/;"	m	class:DeviceDirView	access:private
DeviceDirView::createFolder	widgets/DeviceDirView.h	/^    void createFolder ( void )$/;"	f	class:DeviceDirView	access:private	signature:( void )
DeviceDirView::deleteFolder	widgets/DeviceDirView.h	/^    void deleteFolder ( void ) $/;"	f	class:DeviceDirView	access:private	signature:( void )
DeviceDirView::setupMenus	widgets/DeviceDirView.h	/^    void setupMenus (void)$/;"	f	class:DeviceDirView	access:public	signature:(void)
DeviceDirView::transferFolder	widgets/DeviceDirView.h	/^    void transferFolder ( void )$/;"	f	class:DeviceDirView	access:private	signature:( void )
DeviceExplorer	widgets/DeviceExplorer.h	/^    DeviceExplorer (QWidget* parent = NULL) : QWidget (parent), _mtpThread(parent)$/;"	f	class:DeviceExplorer	access:public	signature:(QWidget* parent = NULL)
DeviceExplorer	widgets/DeviceExplorer.h	/^class DeviceExplorer : public QWidget$/;"	c	inherits:QWidget
DeviceExplorer::ConnectComplete	widgets/DeviceExplorer.h	/^    void ConnectComplete ( MtpFS* in_fs) \/\/ fix this$/;"	f	class:DeviceExplorer	access:public	signature:( MtpFS* in_fs)
DeviceExplorer::ConnectDevice	widgets/DeviceExplorer.h	/^    void ConnectDevice ( void )$/;"	f	class:DeviceExplorer	access:public	signature:( void )
DeviceExplorer::DeviceExplorer	widgets/DeviceExplorer.h	/^    DeviceExplorer (QWidget* parent = NULL) : QWidget (parent), _mtpThread(parent)$/;"	f	class:DeviceExplorer	access:public	signature:(QWidget* parent = NULL)
DeviceExplorer::DisconnectDevice	widgets/DeviceExplorer.h	/^    void DisconnectDevice ( void )$/;"	f	class:DeviceExplorer	access:public	signature:( void )
DeviceExplorer::EXB	widgets/DeviceExplorer.h	/^    void EXB (const QModelIndex& temp)$/;"	f	class:DeviceExplorer	access:public	signature:(const QModelIndex& temp)
DeviceExplorer::GetDeviceDirView	widgets/DeviceExplorer.h	/^    DeviceDirView* GetDeviceDirView ( void )$/;"	f	class:DeviceExplorer	access:public	signature:( void )
DeviceExplorer::GetDeviceFileView	widgets/DeviceExplorer.h	/^    DeviceFileView* GetDeviceFileView ( void ) $/;"	f	class:DeviceExplorer	access:public	signature:( void )
DeviceExplorer::SetDeviceConsole	widgets/DeviceExplorer.h	/^    void SetDeviceConsole (DeviceConsole* in_console)$/;"	f	class:DeviceExplorer	access:public	signature:(DeviceConsole* in_console)
DeviceExplorer::SetFSFileView	widgets/DeviceExplorer.h	/^    void SetFSFileView(FileView* in_fsfileview)$/;"	f	class:DeviceExplorer	access:public	signature:(FileView* in_fsfileview)
DeviceExplorer::_console	widgets/DeviceExplorer.h	/^    DeviceConsole* _console;$/;"	m	class:DeviceExplorer	access:private
DeviceExplorer::_dirModel	widgets/DeviceExplorer.h	/^    DeviceDirModel* _dirModel;$/;"	m	class:DeviceExplorer	access:private
DeviceExplorer::_dirView	widgets/DeviceExplorer.h	/^    DeviceDirView* _dirView;$/;"	m	class:DeviceExplorer	access:private
DeviceExplorer::_fileModel	widgets/DeviceExplorer.h	/^    DeviceFileModel* _fileModel;$/;"	m	class:DeviceExplorer	access:private
DeviceExplorer::_fileView	widgets/DeviceExplorer.h	/^    DeviceFileView* _fileView;$/;"	m	class:DeviceExplorer	access:private
DeviceExplorer::_fsFileView	widgets/DeviceExplorer.h	/^    FileView* _fsFileView;$/;"	m	class:DeviceExplorer	access:private
DeviceExplorer::_layout	widgets/DeviceExplorer.h	/^    QHBoxLayout* _layout;$/;"	m	class:DeviceExplorer	access:private
DeviceExplorer::_mtpThread	widgets/DeviceExplorer.h	/^    MtpThread _mtpThread;$/;"	m	class:DeviceExplorer	access:private
DeviceExplorer::_splitter	widgets/DeviceExplorer.h	/^    QSplitter* _splitter;$/;"	m	class:DeviceExplorer	access:private
DeviceExplorer::init	widgets/DeviceExplorer.h	/^    void init()$/;"	f	class:DeviceExplorer	access:private	signature:()
DeviceExplorer::setupConnections	widgets/DeviceExplorer.h	/^    void setupConnections()$/;"	f	class:DeviceExplorer	access:private	signature:()
DeviceExplorer::setupDirView	widgets/DeviceExplorer.h	/^    void setupDirView ( void )$/;"	f	class:DeviceExplorer	access:private	signature:( void )
DeviceExplorer::setupFileView	widgets/DeviceExplorer.h	/^    void setupFileView ( void )$/;"	f	class:DeviceExplorer	access:private	signature:( void )
DeviceExplorer::sort	widgets/DeviceExplorer.h	/^    void sort (int idx)$/;"	f	class:DeviceExplorer	access:public	signature:(int idx)
DeviceExplorer::~DeviceExplorer	widgets/DeviceExplorer.h	/^    ~DeviceExplorer() { }$/;"	f	class:DeviceExplorer	access:public	signature:()
DeviceFileModel	widgets/DeviceFileModel.h	/^    DeviceFileModel (QObject* parent = 0) : QAbstractListModel(parent)$/;"	f	class:DeviceFileModel	access:public	signature:(QObject* parent = 0)
DeviceFileModel	widgets/DeviceFileModel.h	/^class DeviceFileModel : public QAbstractListModel$/;"	c	inherits:QAbstractListModel
DeviceFileModel::AddFile	widgets/DeviceFileModel.h	/^    void AddFile (FileNode& File)$/;"	f	class:DeviceFileModel	access:public	signature:(FileNode& File)
DeviceFileModel::CurrentFolder	widgets/DeviceFileModel.h	/^    uint32_t CurrentFolder ()$/;"	f	class:DeviceFileModel	access:public	signature:()
DeviceFileModel::DeviceFileModel	widgets/DeviceFileModel.h	/^    DeviceFileModel (QObject* parent = 0) : QAbstractListModel(parent)$/;"	f	class:DeviceFileModel	access:public	signature:(QObject* parent = 0)
DeviceFileModel::FileFromIndex	widgets/DeviceFileModel.h	/^    FileNode FileFromIndex(QModelIndex* in_index)$/;"	f	class:DeviceFileModel	access:public	signature:(QModelIndex* in_index)
DeviceFileModel::GetCurrentDirectory	widgets/DeviceFileModel.h	/^    DirNode* GetCurrentDirectory ( void )$/;"	f	class:DeviceFileModel	access:public	signature:( void )
DeviceFileModel::Set	widgets/DeviceFileModel.h	/^    void Set (MtpFS* in_fs)$/;"	f	class:DeviceFileModel	access:public	signature:(MtpFS* in_fs)
DeviceFileModel::SetFolder	widgets/DeviceFileModel.h	/^    void SetFolder ( uint32_t folder_id)$/;"	f	class:DeviceFileModel	access:public	signature:( uint32_t folder_id)
DeviceFileModel::Unset	widgets/DeviceFileModel.h	/^    void Unset()$/;"	f	class:DeviceFileModel	access:public	signature:()
DeviceFileModel::_dir	widgets/DeviceFileModel.h	/^    DirNode* _dir;$/;"	m	class:DeviceFileModel	access:private
DeviceFileModel::_listSize	widgets/DeviceFileModel.h	/^    count_t _listSize;$/;"	m	class:DeviceFileModel	access:private
DeviceFileModel::_mtpFileSystem	widgets/DeviceFileModel.h	/^    MtpFS*  _mtpFileSystem;$/;"	m	class:DeviceFileModel	access:private
DeviceFileModel::_sortedType	widgets/DeviceFileModel.h	/^    FileSortType _sortedType;$/;"	m	class:DeviceFileModel	access:private
DeviceFileModel::columnCount	widgets/DeviceFileModel.h	/^    int columnCount (const QModelIndex& ) const$/;"	f	class:DeviceFileModel	access:public	signature:(const QModelIndex& ) const
DeviceFileModel::data	widgets/DeviceFileModel.h	/^    QVariant data(const QModelIndex &index, int role) const$/;"	f	class:DeviceFileModel	access:public	signature:(const QModelIndex &index, int role) const
DeviceFileModel::headerData	widgets/DeviceFileModel.h	/^    QVariant headerData(int section, Qt::Orientation orientation, int role) const$/;"	f	class:DeviceFileModel	access:public	signature:(int section, Qt::Orientation orientation, int role) const
DeviceFileModel::rowCount	widgets/DeviceFileModel.h	/^    int rowCount (const QModelIndex& ) const$/;"	f	class:DeviceFileModel	access:public	signature:(const QModelIndex& ) const
DeviceFileModel::sort	widgets/DeviceFileModel.h	/^    void sort ( int column = -1)$/;"	f	class:DeviceFileModel	access:public	signature:( int column = -1)
DeviceFileView	widgets/DeviceFileView.cpp	/^DeviceFileView::DeviceFileView (QWidget* parent = NULL, $/;"	f	class:DeviceFileView	signature:(QWidget* parent = NULL, MtpThread* in_thread = NULL )
DeviceFileView	widgets/DeviceFileView.h	/^    DeviceFileView (QWidget* parent,  MtpThread* in_thread);$/;"	p	class:DeviceFileView	access:public	signature:(QWidget* parent, MtpThread* in_thread)
DeviceFileView	widgets/DeviceFileView.h	/^class DeviceFileView : public QTreeView$/;"	c	inherits:QTreeView
DeviceFileView::CurrentDirectory	widgets/DeviceFileView.cpp	/^void DeviceFileView::CurrentDirectory(DirNode** out_node)$/;"	f	class:DeviceFileView	signature:(DirNode** out_node)
DeviceFileView::CurrentDirectory	widgets/DeviceFileView.h	/^    void CurrentDirectory(DirNode** out_node);$/;"	p	class:DeviceFileView	access:public	signature:(DirNode** out_node)
DeviceFileView::DeviceFileView	widgets/DeviceFileView.cpp	/^DeviceFileView::DeviceFileView (QWidget* parent = NULL, $/;"	f	class:DeviceFileView	signature:(QWidget* parent = NULL, MtpThread* in_thread = NULL )
DeviceFileView::DeviceFileView	widgets/DeviceFileView.h	/^    DeviceFileView (QWidget* parent,  MtpThread* in_thread);$/;"	p	class:DeviceFileView	access:public	signature:(QWidget* parent, MtpThread* in_thread)
DeviceFileView::GetCurrentFSPath	widgets/DeviceFileView.h	/^    void GetCurrentFSPath(QString* path);$/;"	p	class:DeviceFileView	access:public	signature:(QString* path)
DeviceFileView::TransferToDevice	widgets/DeviceFileView.cpp	/^void DeviceFileView::TransferToDevice(const QString& in_file, DirNode* directory)$/;"	f	class:DeviceFileView	signature:(const QString& in_file, DirNode* directory)
DeviceFileView::TransferToDevice	widgets/DeviceFileView.h	/^    void TransferToDevice(const QString& in_file, DirNode* directory);$/;"	p	class:DeviceFileView	access:public	signature:(const QString& in_file, DirNode* directory)
DeviceFileView::_FSfileView	widgets/DeviceFileView.h	/^    FileView* _FSfileView;$/;"	m	class:DeviceFileView	access:private
DeviceFileView::_deleteFileAct	widgets/DeviceFileView.h	/^    QAction* _deleteFileAct;$/;"	m	class:DeviceFileView	access:private
DeviceFileView::_thread	widgets/DeviceFileView.h	/^    MtpThread* _thread;$/;"	m	class:DeviceFileView	access:private
DeviceFileView::_transferFileAct	widgets/DeviceFileView.h	/^    QAction* _transferFileAct;$/;"	m	class:DeviceFileView	access:private
DeviceFileView::deleteFile	widgets/DeviceFileView.cpp	/^void DeviceFileView::deleteFile ( void ) $/;"	f	class:DeviceFileView	signature:( void )
DeviceFileView::deleteFile	widgets/DeviceFileView.h	/^    void deleteFile ( void ) ;$/;"	p	class:DeviceFileView	access:private	signature:( void )
DeviceFileView::setFileView	widgets/DeviceFileView.cpp	/^void DeviceFileView::setFileView (FileView* in_fileView)$/;"	f	class:DeviceFileView	signature:(FileView* in_fileView)
DeviceFileView::setFileView	widgets/DeviceFileView.h	/^    void setFileView (FileView* in_fileView);$/;"	p	class:DeviceFileView	access:public	signature:(FileView* in_fileView)
DeviceFileView::setupMenus	widgets/DeviceFileView.cpp	/^void DeviceFileView::setupMenus (void)$/;"	f	class:DeviceFileView	signature:(void)
DeviceFileView::setupMenus	widgets/DeviceFileView.h	/^    void setupMenus (void);$/;"	p	class:DeviceFileView	access:public	signature:(void)
DeviceFileView::transferFile	widgets/DeviceFileView.cpp	/^void DeviceFileView::transferFile ( void )$/;"	f	class:DeviceFileView	signature:( void )
DeviceFileView::transferFile	widgets/DeviceFileView.h	/^    void transferFile ( void );$/;"	p	class:DeviceFileView	access:private	signature:( void )
DibHeader	mtp/BmpStructs.h	/^struct DibHeader$/;"	s
DibHeader::BitCount	mtp/BmpStructs.h	/^    ushort BitCount;$/;"	m	struct:DibHeader	access:public
DibHeader::Colors	mtp/BmpStructs.h	/^    int Colors;$/;"	m	struct:DibHeader	access:public
DibHeader::Compression	mtp/BmpStructs.h	/^    int Compression;$/;"	m	struct:DibHeader	access:public
DibHeader::HRes	mtp/BmpStructs.h	/^    int HRes;$/;"	m	struct:DibHeader	access:public
DibHeader::HeaderSize	mtp/BmpStructs.h	/^    int HeaderSize; \/\/size of header$/;"	m	struct:DibHeader	access:public
DibHeader::Height	mtp/BmpStructs.h	/^    int Height;$/;"	m	struct:DibHeader	access:public
DibHeader::ImportantColors	mtp/BmpStructs.h	/^    int ImportantColors;$/;"	m	struct:DibHeader	access:public
DibHeader::Planes	mtp/BmpStructs.h	/^    short Planes;$/;"	m	struct:DibHeader	access:public
DibHeader::RawImageSize	mtp/BmpStructs.h	/^    int RawImageSize;$/;"	m	struct:DibHeader	access:public
DibHeader::VRes	mtp/BmpStructs.h	/^    int VRes;$/;"	m	struct:DibHeader	access:public
DibHeader::Width	mtp/BmpStructs.h	/^    int Width;$/;"	m	struct:DibHeader	access:public
Dimensions	mtp/BmpStructs.h	/^struct Dimensions$/;"	s
Dimensions::Height	mtp/BmpStructs.h	/^    count_t Height;$/;"	m	struct:Dimensions	access:public
Dimensions::Width	mtp/BmpStructs.h	/^    count_t Width;$/;"	m	struct:Dimensions	access:public
DirFilter	widgets/DirFilter.h	/^    DirFilter(QObject* parent = NULL) : QSortFilterProxyModel (parent)$/;"	f	class:DirFilter	access:public	signature:(QObject* parent = NULL)
DirFilter	widgets/DirFilter.h	/^class DirFilter : public QSortFilterProxyModel$/;"	c	inherits:QSortFilterProxyModel
DirFilter::DirFilter	widgets/DirFilter.h	/^    DirFilter(QObject* parent = NULL) : QSortFilterProxyModel (parent)$/;"	f	class:DirFilter	access:public	signature:(QObject* parent = NULL)
DirFilter::_dirFilter	widgets/DirFilter.h	/^    bool _dirFilter;$/;"	m	class:DirFilter	access:private
DirFilter::fileFilter	widgets/DirFilter.h	/^    bool fileFilter ( int sourceRow, const QModelIndex& sourceParent) const$/;"	f	class:DirFilter	access:private	signature:( int sourceRow, const QModelIndex& sourceParent) const
DirFilter::filterAcceptsRow	widgets/DirFilter.h	/^    bool filterAcceptsRow (int sourceRow, const QModelIndex& sourceParent) const$/;"	f	class:DirFilter	access:protected	signature:(int sourceRow, const QModelIndex& sourceParent) const
DirFilter::setDirectoryFilter	widgets/DirFilter.h	/^    void setDirectoryFilter ( void )$/;"	f	class:DirFilter	access:public	signature:( void )
DirFilter::setFileFilter	widgets/DirFilter.h	/^    void setFileFilter ( void )$/;"	f	class:DirFilter	access:public	signature:( void )
DirNode	mtp/DirNode.h	/^    DirNode () $/;"	f	class:DirNode	access:public	signature:()
DirNode	mtp/DirNode.h	/^    DirNode (LIBMTP_folder_t* in_folder, count_t in_depth, count_t in_height)$/;"	f	class:DirNode	access:public	signature:(LIBMTP_folder_t* in_folder, count_t in_depth, count_t in_height)
DirNode	mtp/DirNode.h	/^    DirNode(LIBMTP_folder_t* begin)$/;"	f	class:DirNode	access:public	signature:(LIBMTP_folder_t* begin)
DirNode	mtp/DirNode.h	/^class DirNode$/;"	c
DirNode::AddChild	mtp/DirNode.h	/^    void AddChild ( DirNode* in ) { _children.push_back(in);  }$/;"	f	class:DirNode	access:public	signature:( DirNode* in )
DirNode::AddFile	mtp/DirNode.h	/^    void AddFile(const FileNode& temp)$/;"	f	class:DirNode	access:public	signature:(const FileNode& temp)
DirNode::ChildCount	mtp/DirNode.h	/^    count_t ChildCount() { return _children.size(); }$/;"	f	class:DirNode	access:public	signature:()
DirNode::CreateMapping	mtp/DirNode.h	/^    void CreateMapping (map <uint32_t, DirNode*>& in_map )$/;"	f	class:DirNode	access:public	signature:(map <uint32_t, DirNode*>& in_map )
DirNode::DeleteFile	mtp/DirNode.h	/^    void DeleteFile (const FileNode& in_file)$/;"	f	class:DirNode	access:public	signature:(const FileNode& in_file)
DirNode::DirNode	mtp/DirNode.h	/^    DirNode () $/;"	f	class:DirNode	access:public	signature:()
DirNode::DirNode	mtp/DirNode.h	/^    DirNode (LIBMTP_folder_t* in_folder, count_t in_depth, count_t in_height)$/;"	f	class:DirNode	access:public	signature:(LIBMTP_folder_t* in_folder, count_t in_depth, count_t in_height)
DirNode::DirNode	mtp/DirNode.h	/^    DirNode(LIBMTP_folder_t* begin)$/;"	f	class:DirNode	access:public	signature:(LIBMTP_folder_t* begin)
DirNode::FindFile	mtp/DirNode.h	/^    bool FindFile(const string& in_name, uint32_t* id)$/;"	f	class:DirNode	access:public	signature:(const string& in_name, uint32_t* id)
DirNode::GetChild	mtp/DirNode.h	/^    FileNode GetChild(count_t idx)$/;"	f	class:DirNode	access:public	signature:(count_t idx)
DirNode::GetChildCount	mtp/DirNode.h	/^    count_t GetChildCount() { return _children.size(); }$/;"	f	class:DirNode	access:public	signature:()
DirNode::GetChildDirectory	mtp/DirNode.h	/^DirNode* GetChildDirectory (count_t in_index)$/;"	f	class:DirNode	access:public	signature:(count_t in_index)
DirNode::GetDepth	mtp/DirNode.h	/^    count_t GetDepth() { return _currentDir.Depth; }$/;"	f	class:DirNode	access:public	signature:()
DirNode::GetFileCount	mtp/DirNode.h	/^    count_t GetFileCount()  { return _files.size(); }$/;"	f	class:DirNode	access:public	signature:()
DirNode::GetHeight	mtp/DirNode.h	/^    count_t GetHeight() { return _currentDir.Height; }$/;"	f	class:DirNode	access:public	signature:()
DirNode::GetID	mtp/DirNode.h	/^    count_t GetID () {  return _currentDir.FolderId; }$/;"	f	class:DirNode	access:public	signature:()
DirNode::GetName	mtp/DirNode.h	/^    string GetName() const { return _currentDir.Name; }$/;"	f	class:DirNode	access:public	signature:() const
DirNode::GetParent	mtp/DirNode.h	/^    DirNode* GetParent () { return _parent; }$/;"	f	class:DirNode	access:public	signature:()
DirNode::Print	mtp/DirNode.h	/^    void Print ()$/;"	f	class:DirNode	access:public	signature:()
DirNode::SetHeight	mtp/DirNode.h	/^    void SetHeight(count_t in) { _currentDir.Height = in; }$/;"	f	class:DirNode	access:public	signature:(count_t in)
DirNode::SetName	mtp/DirNode.h	/^    void SetName(const string& in_str) { _currentDir.Name = in_str; }$/;"	f	class:DirNode	access:public	signature:(const string& in_str)
DirNode::SetParent	mtp/DirNode.h	/^    void SetParent (DirNode* in_parent)$/;"	f	class:DirNode	access:public	signature:(DirNode* in_parent)
DirNode::SortDirectories	mtp/DirNode.h	/^    void SortDirectories()$/;"	f	class:DirNode	access:public	signature:()
DirNode::SortFileNamesDown	mtp/DirNode.h	/^    void SortFileNamesDown()$/;"	f	class:DirNode	access:public	signature:()
DirNode::SortFileNamesUp	mtp/DirNode.h	/^    void SortFileNamesUp()$/;"	f	class:DirNode	access:public	signature:()
DirNode::SortSizeDown	mtp/DirNode.h	/^    void SortSizeDown()$/;"	f	class:DirNode	access:public	signature:()
DirNode::SortSizeUp	mtp/DirNode.h	/^    void SortSizeUp()$/;"	f	class:DirNode	access:public	signature:()
DirNode::_children	mtp/DirNode.h	/^    vector <DirNode*> _children;$/;"	m	class:DirNode	access:protected
DirNode::_currentDir	mtp/DirNode.h	/^    MtpDir _currentDir;$/;"	m	class:DirNode	access:protected
DirNode::_files	mtp/DirNode.h	/^    vector <FileNode> _files; $/;"	m	class:DirNode	access:protected
DirNode::_parent	mtp/DirNode.h	/^    DirNode* _parent;$/;"	m	class:DirNode	access:protected
DirNode::compareDirNames	mtp/DirNode.h	/^    static bool compareDirNames(DirNode* one, DirNode* two)$/;"	f	class:DirNode	access:protected	signature:(DirNode* one, DirNode* two)
DirNode::compareFileNames	mtp/DirNode.h	/^    static bool compareFileNames(FileNode one, FileNode two)$/;"	f	class:DirNode	access:protected	signature:(FileNode one, FileNode two)
DirNode::compareFileSizes	mtp/DirNode.h	/^    static bool compareFileSizes(FileNode one, FileNode two)$/;"	f	class:DirNode	access:protected	signature:(FileNode one, FileNode two)
DirNode::discoverChildren	mtp/DirNode.h	/^    void discoverChildren(LIBMTP_folder_t* in_folder)$/;"	f	class:DirNode	access:protected	signature:(LIBMTP_folder_t* in_folder)
DirNode::~DirNode	mtp/DirNode.h	/^    virtual ~DirNode ( void )$/;"	f	class:DirNode	access:public	signature:( void )
DirView	widgets/DirView.h	/^    DirView (QWidget* parent = NULL, MtpThread* in_thread = NULL) : QTreeView(parent)$/;"	f	class:DirView	access:public	signature:(QWidget* parent = NULL, MtpThread* in_thread = NULL)
DirView	widgets/DirView.h	/^class DirView : public QTreeView$/;"	c	inherits:QTreeView
DirView::CurrentLocation	widgets/DirView.h	/^    void CurrentLocation(QString* in_filename)$/;"	f	class:DirView	access:public	signature:(QString* in_filename)
DirView::DirView	widgets/DirView.h	/^    DirView (QWidget* parent = NULL, MtpThread* in_thread = NULL) : QTreeView(parent)$/;"	f	class:DirView	access:public	signature:(QWidget* parent = NULL, MtpThread* in_thread = NULL)
DirView::_thread	widgets/DirView.h	/^    MtpThread* _thread;$/;"	m	class:DirView	access:private
DirView::_transferDirAct	widgets/DirView.h	/^    QAction* _transferDirAct;$/;"	m	class:DirView	access:private
DirView::setupMenus	widgets/DirView.h	/^    void setupMenus (void)$/;"	f	class:DirView	access:public	signature:(void)
DirView::transferDir	widgets/DirView.h	/^    void transferDir ( void )$/;"	f	class:DirView	access:private	signature:( void )
Disconnect	mtp/CommandCodes.h	/^    Disconnect,$/;"	e	enum:MtpCommandCode
Disconnect	mtp/MtpPortal.h	/^    void Disconnect()$/;"	f	class:MtpPortal	access:public	signature:()
DisconnectDevice	widgets/DeviceExplorer.h	/^    void DisconnectDevice ( void )$/;"	f	class:DeviceExplorer	access:public	signature:( void )
DumpInformation	mtp/MtpDevice.h	/^    void DumpInformation ( void )$/;"	f	class:MtpDevice	access:public	signature:( void )
EX	widgets/FileExplorer.h	/^    void EX (const QModelIndex& temp)$/;"	f	class:FileExplorer	access:public	signature:(const QModelIndex& temp)
EXB	widgets/DeviceExplorer.h	/^    void EXB (const QModelIndex& temp)$/;"	f	class:DeviceExplorer	access:public	signature:(const QModelIndex& temp)
Extract	mtp/Icon.h	/^    void Extract(void* temp)$/;"	f	class:Icon	access:public	signature:(void* temp)
File	mtp/CommandCodes.h	/^    FileNode File;$/;"	m	struct:MtpCommandDeleteFile	access:public
File	mtp/CommandCodes.h	/^    FileNode File;$/;"	m	struct:MtpCommandSendFile	access:public
File	mtp/CommandCodes.h	/^    FileNode File;$/;"	m	struct:MtpUpdateDelete	access:public
File	mtp/CommandCodes.h	/^    FileNode File;$/;"	m	struct:MtpUpdateTransfer	access:public
FileExplorer	widgets/FileExplorer.h	/^    FileExplorer (QWidget* parent = NULL, MtpThread* in_thread = NULL) : QWidget (parent), _fsWatch(this)$/;"	f	class:FileExplorer	access:public	signature:(QWidget* parent = NULL, MtpThread* in_thread = NULL)
FileExplorer	widgets/FileExplorer.h	/^class FileExplorer : public QWidget$/;"	c	inherits:QWidget
FileExplorer::EX	widgets/FileExplorer.h	/^    void EX (const QModelIndex& temp)$/;"	f	class:FileExplorer	access:public	signature:(const QModelIndex& temp)
FileExplorer::FileExplorer	widgets/FileExplorer.h	/^    FileExplorer (QWidget* parent = NULL, MtpThread* in_thread = NULL) : QWidget (parent), _fsWatch(this)$/;"	f	class:FileExplorer	access:public	signature:(QWidget* parent = NULL, MtpThread* in_thread = NULL)
FileExplorer::GetFSDirView	widgets/FileExplorer.h	/^    void* GetFSDirView ( void )$/;"	f	class:FileExplorer	access:public	signature:( void )
FileExplorer::GetFSFileView	widgets/FileExplorer.h	/^    FileView* GetFSFileView ( void )$/;"	f	class:FileExplorer	access:public	signature:( void )
FileExplorer::RequestFile	widgets/FileExplorer.h	/^    void RequestFile(const FileNode& temp, const string& path);$/;"	p	class:FileExplorer	access:public	signature:(const FileNode& temp, const string& path)
FileExplorer::SetDeviceDirView	widgets/FileExplorer.h	/^    void SetDeviceDirView (DeviceDirView* in_view)$/;"	f	class:FileExplorer	access:public	signature:(DeviceDirView* in_view)
FileExplorer::SetDeviceFileView	widgets/FileExplorer.h	/^    void SetDeviceFileView (DeviceFileView* in_view)$/;"	f	class:FileExplorer	access:public	signature:(DeviceFileView* in_view)
FileExplorer::TransferFileToDevice	widgets/FileExplorer.h	/^    void TransferFileToDevice(const QFileInfo& temp);$/;"	p	class:FileExplorer	access:public	signature:(const QFileInfo& temp)
FileExplorer::_currentDir	widgets/FileExplorer.h	/^    QString _currentDir;$/;"	m	class:FileExplorer	access:private
FileExplorer::_deviceDirView	widgets/FileExplorer.h	/^    DeviceDirView*  _deviceDirView;$/;"	m	class:FileExplorer	access:private
FileExplorer::_deviceFileView	widgets/FileExplorer.h	/^    DeviceFileView* _deviceFileView;$/;"	m	class:FileExplorer	access:private
FileExplorer::_dirModel	widgets/FileExplorer.h	/^    QDirModel* _dirModel;$/;"	m	class:FileExplorer	access:private
FileExplorer::_dirSelection	widgets/FileExplorer.h	/^    QItemSelectionModel* _dirSelection;$/;"	m	class:FileExplorer	access:private
FileExplorer::_dirView	widgets/FileExplorer.h	/^    DirView* _dirView;$/;"	m	class:FileExplorer	access:private
FileExplorer::_fileModel	widgets/FileExplorer.h	/^    QDirModel* _fileModel;$/;"	m	class:FileExplorer	access:private
FileExplorer::_fileSelection	widgets/FileExplorer.h	/^    QItemSelectionModel* _fileSelection;$/;"	m	class:FileExplorer	access:private
FileExplorer::_fileView	widgets/FileExplorer.h	/^    FileView* _fileView;$/;"	m	class:FileExplorer	access:private
FileExplorer::_fsWatch	widgets/FileExplorer.h	/^    QFileSystemWatcher _fsWatch;$/;"	m	class:FileExplorer	access:private
FileExplorer::_layout	widgets/FileExplorer.h	/^    QHBoxLayout* _layout;$/;"	m	class:FileExplorer	access:private
FileExplorer::_mtpThread	widgets/FileExplorer.h	/^    MtpThread* _mtpThread;$/;"	m	class:FileExplorer	access:private
FileExplorer::_splitter	widgets/FileExplorer.h	/^    QSplitter* _splitter;$/;"	m	class:FileExplorer	access:private
FileExplorer::refreshDirView	widgets/FileExplorer.h	/^    void refreshDirView ( void )$/;"	f	class:FileExplorer	access:public	signature:( void )
FileExplorer::refreshFileView	widgets/FileExplorer.h	/^    void refreshFileView ( void )$/;"	f	class:FileExplorer	access:public	signature:( void )
FileExplorer::setupConnections	widgets/FileExplorer.h	/^    void setupConnections ( void )$/;"	f	class:FileExplorer	access:private	signature:( void )
FileExplorer::setupDirModel	widgets/FileExplorer.h	/^    void setupDirModel ( void )$/;"	f	class:FileExplorer	access:private	signature:( void )
FileExplorer::setupDirView	widgets/FileExplorer.h	/^    void setupDirView ( void )$/;"	f	class:FileExplorer	access:private	signature:( void )
FileExplorer::setupFileModel	widgets/FileExplorer.h	/^    void setupFileModel()$/;"	f	class:FileExplorer	access:private	signature:()
FileExplorer::setupFileView	widgets/FileExplorer.h	/^    void setupFileView ( void )$/;"	f	class:FileExplorer	access:private	signature:( void )
FileExplorer::setupFsWatch	widgets/FileExplorer.h	/^    void setupFsWatch()$/;"	f	class:FileExplorer	access:private	signature:()
FileExplorer::~FileExplorer	widgets/FileExplorer.h	/^    ~FileExplorer()$/;"	f	class:FileExplorer	access:public	signature:()
FileFromIndex	widgets/DeviceFileModel.h	/^    FileNode FileFromIndex(QModelIndex* in_index)$/;"	f	class:DeviceFileModel	access:public	signature:(QModelIndex* in_index)
FileName	mtp/CommandCodes.h	/^    string FileName;$/;"	m	struct:MtpCommandGetFile	access:public
FileNode	mtp/FileNode.h	/^    FileNode (const QFileInfo& in_file, uint32_t in_parentID)$/;"	f	class:FileNode	access:public	signature:(const QFileInfo& in_file, uint32_t in_parentID)
FileNode	mtp/FileNode.h	/^    FileNode(LIBMTP_file_t* in_head, count_t in_height)$/;"	f	class:FileNode	access:public	signature:(LIBMTP_file_t* in_head, count_t in_height)
FileNode	mtp/FileNode.h	/^class FileNode$/;"	c
FileNode::FileNode	mtp/FileNode.h	/^    FileNode (const QFileInfo& in_file, uint32_t in_parentID)$/;"	f	class:FileNode	access:public	signature:(const QFileInfo& in_file, uint32_t in_parentID)
FileNode::FileNode	mtp/FileNode.h	/^    FileNode(LIBMTP_file_t* in_head, count_t in_height)$/;"	f	class:FileNode	access:public	signature:(LIBMTP_file_t* in_head, count_t in_height)
FileNode::GetFileType	mtp/FileNode.h	/^    QString GetFileType (const QString& in_str)$/;"	f	class:FileNode	access:private	signature:(const QString& in_str)
FileNode::GetID	mtp/FileNode.h	/^    uint32_t GetID() const$/;"	f	class:FileNode	access:public	signature:() const
FileNode::GetMtpType	mtp/FileNode.h	/^    LIBMTP_filetype_t GetMtpType()$/;"	f	class:FileNode	access:public	signature:()
FileNode::GetName	mtp/FileNode.h	/^    string GetName() const$/;"	f	class:FileNode	access:public	signature:() const
FileNode::GetParent	mtp/FileNode.h	/^    uint32_t GetParent() const$/;"	f	class:FileNode	access:public	signature:() const
FileNode::GetPath	mtp/FileNode.h	/^    string GetPath() const$/;"	f	class:FileNode	access:public	signature:() const
FileNode::GetSize	mtp/FileNode.h	/^    const uint64_t GetSize()$/;"	f	class:FileNode	access:public	signature:()
FileNode::GetType	mtp/FileNode.h	/^    string GetType (LIBMTP_filetype_t in_type)$/;"	f	class:FileNode	access:private	signature:(LIBMTP_filetype_t in_type)
FileNode::GetType	mtp/FileNode.h	/^    string GetType() const$/;"	f	class:FileNode	access:public	signature:() const
FileNode::Sanity	mtp/FileNode.h	/^    void Sanity (LIBMTP_filetype_t in_type)$/;"	f	class:FileNode	access:public	signature:(LIBMTP_filetype_t in_type)
FileNode::_fileSize	mtp/FileNode.h	/^    uint64_t _fileSize;$/;"	m	class:FileNode	access:private
FileNode::_height	mtp/FileNode.h	/^    count_t _height;$/;"	m	class:FileNode	access:private
FileNode::_itemId	mtp/FileNode.h	/^    uint32_t _itemId;$/;"	m	class:FileNode	access:private
FileNode::_name	mtp/FileNode.h	/^    string   _name;$/;"	m	class:FileNode	access:private
FileNode::_parentId	mtp/FileNode.h	/^    uint32_t _parentId;$/;"	m	class:FileNode	access:private
FileNode::_path	mtp/FileNode.h	/^    string _path; \/\/only used to transfer..$/;"	m	class:FileNode	access:private
FileNode::_type	mtp/FileNode.h	/^    string _type;$/;"	m	class:FileNode	access:private
FileNode::resolveMtpType	mtp/FileNode.h	/^    LIBMTP_filetype_t resolveMtpType()$/;"	f	class:FileNode	access:private	signature:()
FileSortType	mtp/types.h	/^enum FileSortType$/;"	g
FileView	widgets/FileView.cpp	/^FileView::FileView (QWidget* parent = NULL,$/;"	f	class:FileView	signature:(QWidget* parent = NULL, MtpThread* in_thread = NULL)
FileView	widgets/FileView.h	/^    FileView (QWidget*, MtpThread* );$/;"	p	class:FileView	access:public	signature:(QWidget*, MtpThread* )
FileView	widgets/FileView.h	/^class FileView : public QTreeView$/;"	c	inherits:QTreeView
FileView::CurrentDirectory	widgets/FileView.cpp	/^void FileView::CurrentDirectory(QString* in_filename)$/;"	f	class:FileView	signature:(QString* in_filename)
FileView::CurrentDirectory	widgets/FileView.h	/^    void CurrentDirectory(QString* in_filename);$/;"	p	class:FileView	access:public	signature:(QString* in_filename)
FileView::CurrentSelection	widgets/FileView.cpp	/^void FileView::CurrentSelection (QList<QString>* listout)$/;"	f	class:FileView	signature:(QList<QString>* listout)
FileView::CurrentSelection	widgets/FileView.h	/^    void CurrentSelection (QList<QString>* listout); $/;"	p	class:FileView	access:public	signature:(QList<QString>* listout)
FileView::FileView	widgets/FileView.cpp	/^FileView::FileView (QWidget* parent = NULL,$/;"	f	class:FileView	signature:(QWidget* parent = NULL, MtpThread* in_thread = NULL)
FileView::FileView	widgets/FileView.h	/^    FileView (QWidget*, MtpThread* );$/;"	p	class:FileView	access:public	signature:(QWidget*, MtpThread* )
FileView::GetCurrentDeviceDirectory	widgets/FileView.h	/^   void GetCurrentDeviceDirectory (DirNode** in_node);$/;"	p	class:FileView	access:public	signature:(DirNode** in_node)
FileView::TransferToDevice	widgets/FileView.h	/^   void TransferToDevice (const QString&, DirNode*);$/;"	p	class:FileView	access:public	signature:(const QString&, DirNode*)
FileView::_deviceFileView	widgets/FileView.h	/^    DeviceFileView* _deviceFileView;$/;"	m	class:FileView	access:private
FileView::_thread	widgets/FileView.h	/^    MtpThread* _thread;$/;"	m	class:FileView	access:private
FileView::_transferFileAct	widgets/FileView.h	/^    QAction* _transferFileAct;$/;"	m	class:FileView	access:private
FileView::setDeviceFileView	widgets/FileView.cpp	/^void FileView::setDeviceFileView(DeviceFileView* in_devfileview)$/;"	f	class:FileView	signature:(DeviceFileView* in_devfileview)
FileView::setDeviceFileView	widgets/FileView.h	/^    void setDeviceFileView(DeviceFileView* in_devfileview);$/;"	p	class:FileView	access:public	signature:(DeviceFileView* in_devfileview)
FileView::setupMenus	widgets/FileView.cpp	/^void FileView::setupMenus (void)$/;"	f	class:FileView	signature:(void)
FileView::setupMenus	widgets/FileView.h	/^    void setupMenus (void);$/;"	p	class:FileView	access:public	signature:(void)
FileView::transferFile	widgets/FileView.cpp	/^void FileView::transferFile ( void )$/;"	f	class:FileView	signature:( void )
FileView::transferFile	widgets/FileView.h	/^    void transferFile (void);$/;"	p	class:FileView	access:private	signature:(void)
FindBestImage	mtp/Icon.h	/^    void FindBestImage() $/;"	f	class:Icon	access:private	signature:()
FindFile	mtp/DirNode.h	/^    bool FindFile(const string& in_name, uint32_t* id)$/;"	f	class:DirNode	access:public	signature:(const string& in_name, uint32_t* id)
FindRootImage	mtp/MtpFS.h	/^    bool FindRootImage( uint32_t* idOut)$/;"	f	class:MtpFS	access:public	signature:( uint32_t* idOut)
FolderId	mtp/MtpDir.h	/^    uint32_t FolderId;$/;"	m	class:MtpDir	access:public
GetBestImageSize	mtp/Icon.h	/^    count_t GetBestImageSize()$/;"	f	class:Icon	access:public	signature:()
GetChild	mtp/DirNode.h	/^    FileNode GetChild(count_t idx)$/;"	f	class:DirNode	access:public	signature:(count_t idx)
GetChildCount	mtp/DirNode.h	/^    count_t GetChildCount() { return _children.size(); }$/;"	f	class:DirNode	access:public	signature:()
GetChildDirectory	mtp/DirNode.h	/^DirNode* GetChildDirectory (count_t in_index)$/;"	f	class:DirNode	access:public	signature:(count_t in_index)
GetCommand	mtp/CommandCodes.h	/^    MtpCommandCode GetCommand()$/;"	f	struct:MtpCommand	access:public	signature:()
GetCommand	mtp/CommandCodes.h	/^    MtpCommandCode GetCommand()$/;"	f	struct:MtpUpdate	access:public	signature:()
GetCurrentDeviceDirectory	widgets/FileView.h	/^   void GetCurrentDeviceDirectory (DirNode** in_node);$/;"	p	class:FileView	access:public	signature:(DirNode** in_node)
GetCurrentDirectory	widgets/DeviceFileModel.h	/^    DirNode* GetCurrentDirectory ( void )$/;"	f	class:DeviceFileModel	access:public	signature:( void )
GetCurrentFSPath	widgets/DeviceFileView.h	/^    void GetCurrentFSPath(QString* path);$/;"	p	class:DeviceFileView	access:public	signature:(QString* path)
GetDepth	mtp/DirNode.h	/^    count_t GetDepth() { return _currentDir.Depth; }$/;"	f	class:DirNode	access:public	signature:()
GetDevice	mtp/MtpPortal.h	/^    MtpDevice* GetDevice ( void )$/;"	f	class:MtpPortal	access:public	signature:( void )
GetDeviceDirView	widgets/DeviceExplorer.h	/^    DeviceDirView* GetDeviceDirView ( void )$/;"	f	class:DeviceExplorer	access:public	signature:( void )
GetDeviceFileView	widgets/DeviceExplorer.h	/^    DeviceFileView* GetDeviceFileView ( void ) $/;"	f	class:DeviceExplorer	access:public	signature:( void )
GetDeviceInfo	mtp/CommandCodes.h	/^    GetDeviceInfo,$/;"	e	enum:MtpCommandCode
GetDimensions	mtp/Icon.h	/^    Dimensions GetDimensions()$/;"	f	class:Icon	access:public	signature:()
GetDir	widgets/DeviceDirModel.h	/^    DirNode* GetDir(uint32_t id)$/;"	f	class:DeviceDirModel	access:public	signature:(uint32_t id)
GetDirMetaData	mtp/CommandCodes.h	/^    GetDirMetaData,$/;"	e	enum:MtpCommandCode
GetDirectory	mtp/MtpFS.h	/^    DirNode* GetDirectory (DirNode* in_parent, uint32_t in_index)$/;"	f	class:MtpFS	access:public	signature:(DirNode* in_parent, uint32_t in_index)
GetDirectory	mtp/MtpFS.h	/^    DirNode* GetDirectory (uint32_t in_id)$/;"	f	class:MtpFS	access:public	signature:(uint32_t in_id)
GetErrors	mtp/MtpParent.h	/^    void GetErrors (LIBMTP_mtpdevice_t* in_device)$/;"	f	class:MtpParent	access:public	signature:(LIBMTP_mtpdevice_t* in_device)
GetFSDirView	widgets/FileExplorer.h	/^    void* GetFSDirView ( void )$/;"	f	class:FileExplorer	access:public	signature:( void )
GetFSFileView	widgets/FileExplorer.h	/^    FileView* GetFSFileView ( void )$/;"	f	class:FileExplorer	access:public	signature:( void )
GetFile	mtp/CommandCodes.h	/^    GetFile,$/;"	e	enum:MtpCommandCode
GetFileCount	mtp/DirNode.h	/^    count_t GetFileCount()  { return _files.size(); }$/;"	f	class:DirNode	access:public	signature:()
GetFileMetaData	mtp/CommandCodes.h	/^    GetFileMetaData,$/;"	e	enum:MtpCommandCode
GetFileSystem	mtp/MtpDevice.h	/^    MtpFS* GetFileSystem ( void )$/;"	f	class:MtpDevice	access:public	signature:( void )
GetFileType	mtp/FileNode.h	/^    QString GetFileType (const QString& in_str)$/;"	f	class:FileNode	access:private	signature:(const QString& in_str)
GetFolders	mtp/MtpDevice.h	/^    void GetFolders ( void )$/;"	f	class:MtpDevice	access:public	signature:( void )
GetHeader	mtp/Icon.h	/^    IconHeader* GetHeader ( void )$/;"	f	class:Icon	access:public	signature:( void )
GetHeight	mtp/DirNode.h	/^    count_t GetHeight() { return _currentDir.Height; }$/;"	f	class:DirNode	access:public	signature:()
GetHeight	mtp/MtpFS.h	/^    count_t GetHeight(uint32_t in_id)$/;"	f	class:MtpFS	access:public	signature:(uint32_t in_id)
GetID	mtp/DirNode.h	/^    count_t GetID () {  return _currentDir.FolderId; }$/;"	f	class:DirNode	access:public	signature:()
GetID	mtp/FileNode.h	/^    uint32_t GetID() const$/;"	f	class:FileNode	access:public	signature:() const
GetLayout	widgets/ConsoleWidget.h	/^    QVBoxLayout* GetLayout ( void )$/;"	f	class:ConsoleWidget	access:public	signature:( void )
GetMtpType	mtp/FileNode.h	/^    LIBMTP_filetype_t GetMtpType()$/;"	f	class:FileNode	access:public	signature:()
GetName	mtp/DirNode.h	/^    string GetName() const { return _currentDir.Name; }$/;"	f	class:DirNode	access:public	signature:() const
GetName	mtp/FileNode.h	/^    string GetName() const$/;"	f	class:FileNode	access:public	signature:() const
GetParent	mtp/DirNode.h	/^    DirNode* GetParent () { return _parent; }$/;"	f	class:DirNode	access:public	signature:()
GetParent	mtp/FileNode.h	/^    uint32_t GetParent() const$/;"	f	class:FileNode	access:public	signature:() const
GetParent	mtp/MtpFS.h	/^    DirNode* GetParent (DirNode* in_dirnode)$/;"	f	class:MtpFS	access:public	signature:(DirNode* in_dirnode)
GetPath	mtp/FileNode.h	/^    string GetPath() const$/;"	f	class:FileNode	access:public	signature:() const
GetRoot	mtp/MtpFS.h	/^    DirNode* GetRoot()$/;"	f	class:MtpFS	access:public	signature:()
GetRootFileCount	mtp/MtpFS.h	/^    count_t GetRootFileCount()$/;"	f	class:MtpFS	access:public	signature:()
GetSampleData	mtp/CommandCodes.h	/^    GetSampleData,$/;"	e	enum:MtpCommandCode
GetSize	mtp/FileNode.h	/^    const uint64_t GetSize()$/;"	f	class:FileNode	access:public	signature:()
GetType	mtp/FileNode.h	/^    string GetType (LIBMTP_filetype_t in_type)$/;"	f	class:FileNode	access:private	signature:(LIBMTP_filetype_t in_type)
GetType	mtp/FileNode.h	/^    string GetType() const$/;"	f	class:FileNode	access:public	signature:() const
Green	mtp/BmpStructs.h	/^    byte Green;$/;"	m	struct:PaletteEntry	access:public
Green	mtp/BmpStructs.h	/^    byte Green;$/;"	m	struct:Pixel	access:public
HRes	mtp/BmpStructs.h	/^    int HRes;$/;"	m	struct:DibHeader	access:public
HeaderSize	mtp/BmpStructs.h	/^    int HeaderSize; \/\/size of header$/;"	m	struct:DibHeader	access:public
Height	mtp/BmpStructs.h	/^    count_t Height;$/;"	m	struct:Dimensions	access:public
Height	mtp/BmpStructs.h	/^    int Height;$/;"	m	struct:DibHeader	access:public
Height	mtp/BmpStructs.h	/^    ubyte Height;$/;"	m	struct:IconDirEntry	access:public
Height	mtp/MtpDir.h	/^    count_t Height;$/;"	m	class:MtpDir	access:public
ID	mtp/CommandCodes.h	/^    uint32_t ID;$/;"	m	struct:MtpCommandGetFile	access:public
INCPATH	Makefile	/^INCPATH       = -I\/usr\/share\/qt4\/mkspecs\/linux-g++ -I. -I\/usr\/include\/qt4\/QtCore -I\/usr\/include\/qt4\/QtCore -I\/usr\/include\/qt4\/QtGui -I\/usr\/include\/qt4\/QtGui -I\/usr\/include\/qt4 -I. -Iwidgets -Imtp -I\/usr\/local\/include -I. -I.$/;"	m
INSTALL_DIR	Makefile	/^INSTALL_DIR   = $(COPY_DIR)$/;"	m
INSTALL_FILE	Makefile	/^INSTALL_FILE  = install -m 644 -p$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM = install -m 755 -p$/;"	m
Icon	mtp/Icon.h	/^    Icon (const void* in_b)$/;"	f	class:Icon	access:public	signature:(const void* in_b)
Icon	mtp/Icon.h	/^class Icon$/;"	c
Icon::Extract	mtp/Icon.h	/^    void Extract(void* temp)$/;"	f	class:Icon	access:public	signature:(void* temp)
Icon::FindBestImage	mtp/Icon.h	/^    void FindBestImage() $/;"	f	class:Icon	access:private	signature:()
Icon::GetBestImageSize	mtp/Icon.h	/^    count_t GetBestImageSize()$/;"	f	class:Icon	access:public	signature:()
Icon::GetDimensions	mtp/Icon.h	/^    Dimensions GetDimensions()$/;"	f	class:Icon	access:public	signature:()
Icon::GetHeader	mtp/Icon.h	/^    IconHeader* GetHeader ( void )$/;"	f	class:Icon	access:public	signature:( void )
Icon::Icon	mtp/Icon.h	/^    Icon (const void* in_b)$/;"	f	class:Icon	access:public	signature:(const void* in_b)
Icon::IsValid	mtp/Icon.h	/^    bool IsValid()$/;"	f	class:Icon	access:public	signature:()
Icon::LowLevelExtract	mtp/Icon.h	/^    void LowLevelExtract()$/;"	f	class:Icon	access:private	signature:()
Icon::PopulateImages	mtp/Icon.h	/^    void PopulateImages ( void )$/;"	f	class:Icon	access:public	signature:( void )
Icon::ReadImages	mtp/Icon.h	/^    void ReadImages()$/;"	f	class:Icon	access:public	signature:()
Icon::_bestImage	mtp/Icon.h	/^    index_t _bestImage;$/;"	m	class:Icon	access:private
Icon::_bestImageDepth	mtp/Icon.h	/^    count_t _bestImageDepth;$/;"	m	class:Icon	access:private
Icon::_bestImageDimensions	mtp/Icon.h	/^    Dimensions _bestImageDimensions;$/;"	m	class:Icon	access:private
Icon::_bestImagePtr	mtp/Icon.h	/^    byte* _bestImagePtr;$/;"	m	class:Icon	access:private
Icon::_bestImageSize	mtp/Icon.h	/^    count_t _bestImageSize;$/;"	m	class:Icon	access:private
Icon::_file	mtp/Icon.h	/^    byte* _file;$/;"	m	class:Icon	access:private
Icon::_header	mtp/Icon.h	/^    IconHeader* _header;$/;"	m	class:Icon	access:private
Icon::_iconList	mtp/Icon.h	/^    vector <IconDirEntry*> _iconList;$/;"	m	class:Icon	access:private
Icon::_isValid	mtp/Icon.h	/^    bool _isValid;$/;"	m	class:Icon	access:private
Icon::~Icon	mtp/Icon.h	/^    ~Icon ()$/;"	f	class:Icon	access:public	signature:()
IconDirEntry	mtp/BmpStructs.h	/^struct IconDirEntry$/;"	s
IconDirEntry::BitCount	mtp/BmpStructs.h	/^    ushort BitCount;$/;"	m	struct:IconDirEntry	access:public
IconDirEntry::ColorCount	mtp/BmpStructs.h	/^    ubyte ColorCount;$/;"	m	struct:IconDirEntry	access:public
IconDirEntry::DataOffset	mtp/BmpStructs.h	/^    int DataOffset;$/;"	m	struct:IconDirEntry	access:public
IconDirEntry::DataSize	mtp/BmpStructs.h	/^    count_t DataSize;$/;"	m	struct:IconDirEntry	access:public
IconDirEntry::Height	mtp/BmpStructs.h	/^    ubyte Height;$/;"	m	struct:IconDirEntry	access:public
IconDirEntry::Planes	mtp/BmpStructs.h	/^    short Planes;$/;"	m	struct:IconDirEntry	access:public
IconDirEntry::Reserved	mtp/BmpStructs.h	/^    byte Reserved;$/;"	m	struct:IconDirEntry	access:public
IconDirEntry::Width	mtp/BmpStructs.h	/^    ubyte Width;$/;"	m	struct:IconDirEntry	access:public
IconHeader	mtp/BmpStructs.h	/^struct IconHeader$/;"	s
IconHeader::Count	mtp/BmpStructs.h	/^    ushort Count;$/;"	m	struct:IconHeader	access:public
IconHeader::Reserved	mtp/BmpStructs.h	/^    short Reserved;$/;"	m	struct:IconHeader	access:public
IconHeader::Type	mtp/BmpStructs.h	/^    short Type;$/;"	m	struct:IconHeader	access:public
Image	mtp/BmpStructs.h	/^struct Image$/;"	s
Image::image	mtp/BmpStructs.h	/^    Pixel image[128*128];$/;"	m	struct:Image	access:public
ImportantColors	mtp/BmpStructs.h	/^    int ImportantColors;$/;"	m	struct:DibHeader	access:public
Info	mtp/CommandCodes.h	/^    MtpDeviceInfo Info;$/;"	m	struct:MtpUpdateDeviceInfo	access:public
InsertFileList	mtp/MtpFS.h	/^    void InsertFileList (LIBMTP_file_t* in_rootFile)$/;"	f	class:MtpFS	access:public	signature:(LIBMTP_file_t* in_rootFile)
InsertText	widgets/ConsoleWidget.h	/^    virtual void InsertText(const QString& in_text)$/;"	f	class:ConsoleWidget	access:public	signature:(const QString& in_text)
IsConnected	mtp/MtpPortal.h	/^    bool IsConnected()$/;"	f	class:MtpPortal	access:public	signature:()
IsRootImage	mtp/CommandCodes.h	/^    bool IsRootImage;$/;"	m	struct:MtpCommandGetFile	access:public
IsValid	mtp/Icon.h	/^    bool IsValid()$/;"	f	class:Icon	access:public	signature:()
IssueCommand	mtp/MtpThread.h	/^    void IssueCommand (MtpCommand* in_command)$/;"	f	class:MtpThread	access:public	signature:(MtpCommand* in_command)
LEX	Makefile	/^LEX           = flex$/;"	m
LEXFLAGS	Makefile	/^LEXFLAGS      = $/;"	m
LFLAGS	Makefile	/^LFLAGS        = $/;"	m
LIBS	Makefile	/^LIBS          = $(SUBLIBS)  -L\/usr\/lib -L\/usr\/local\/lib -L\/usr\/lib -L\/lib -lmtp -lQtGui -lQtCore -lpthread$/;"	m
LINK	Makefile	/^LINK          = g++$/;"	m
LowLevelExtract	mtp/Icon.h	/^    void LowLevelExtract()$/;"	f	class:Icon	access:private	signature:()
MKDIR	Makefile	/^MKDIR         = mkdir -p$/;"	m
MOVE	Makefile	/^MOVE          = mv -f$/;"	m
MonochromeImage	mtp/BmpStructs.h	/^struct MonochromeImage$/;"	s
MonochromeImage::image	mtp/BmpStructs.h	/^    byte image[128][128];$/;"	m	struct:MonochromeImage	access:public
MtpCommand	mtp/CommandCodes.h	/^struct MtpCommand$/;"	s
MtpCommand::ComCode	mtp/CommandCodes.h	/^    MtpCommandCode ComCode;$/;"	m	struct:MtpCommand	access:public
MtpCommand::GetCommand	mtp/CommandCodes.h	/^    MtpCommandCode GetCommand()$/;"	f	struct:MtpCommand	access:public	signature:()
MtpCommandCode	mtp/CommandCodes.h	/^enum MtpCommandCode$/;"	g
MtpCommandConnect	mtp/CommandCodes.h	/^    MtpCommandConnect (void )$/;"	f	struct:MtpCommandConnect	access:public	signature:(void )
MtpCommandConnect	mtp/CommandCodes.h	/^struct MtpCommandConnect : MtpCommand$/;"	s	inherits:MtpCommand
MtpCommandConnect::MtpCommandConnect	mtp/CommandCodes.h	/^    MtpCommandConnect (void )$/;"	f	struct:MtpCommandConnect	access:public	signature:(void )
MtpCommandDeleteFile	mtp/CommandCodes.h	/^    MtpCommandDeleteFile (FileNode in_file) : File(in_file)$/;"	f	struct:MtpCommandDeleteFile	access:public	signature:(FileNode in_file)
MtpCommandDeleteFile	mtp/CommandCodes.h	/^struct MtpCommandDeleteFile : MtpCommand$/;"	s	inherits:MtpCommand
MtpCommandDeleteFile::File	mtp/CommandCodes.h	/^    FileNode File;$/;"	m	struct:MtpCommandDeleteFile	access:public
MtpCommandDeleteFile::MtpCommandDeleteFile	mtp/CommandCodes.h	/^    MtpCommandDeleteFile (FileNode in_file) : File(in_file)$/;"	f	struct:MtpCommandDeleteFile	access:public	signature:(FileNode in_file)
MtpCommandDisconnect	mtp/CommandCodes.h	/^    MtpCommandDisconnect ( void )$/;"	f	struct:MtpCommandDisconnect	access:public	signature:( void )
MtpCommandDisconnect	mtp/CommandCodes.h	/^struct MtpCommandDisconnect : MtpCommand$/;"	s	inherits:MtpCommand
MtpCommandDisconnect::MtpCommandDisconnect	mtp/CommandCodes.h	/^    MtpCommandDisconnect ( void )$/;"	f	struct:MtpCommandDisconnect	access:public	signature:( void )
MtpCommandGetDeviceInfo	mtp/CommandCodes.h	/^    MtpCommandGetDeviceInfo ( void )$/;"	f	struct:MtpCommandGetDeviceInfo	access:public	signature:( void )
MtpCommandGetDeviceInfo	mtp/CommandCodes.h	/^struct MtpCommandGetDeviceInfo : MtpCommand$/;"	s	inherits:MtpCommand
MtpCommandGetDeviceInfo::MtpCommandGetDeviceInfo	mtp/CommandCodes.h	/^    MtpCommandGetDeviceInfo ( void )$/;"	f	struct:MtpCommandGetDeviceInfo	access:public	signature:( void )
MtpCommandGetFile	mtp/CommandCodes.h	/^    MtpCommandGetFile (uint32_t file_id, const string& in_FileName)$/;"	f	struct:MtpCommandGetFile	access:public	signature:(uint32_t file_id, const string& in_FileName)
MtpCommandGetFile	mtp/CommandCodes.h	/^struct MtpCommandGetFile : MtpCommand$/;"	s	inherits:MtpCommand
MtpCommandGetFile::FileName	mtp/CommandCodes.h	/^    string FileName;$/;"	m	struct:MtpCommandGetFile	access:public
MtpCommandGetFile::ID	mtp/CommandCodes.h	/^    uint32_t ID;$/;"	m	struct:MtpCommandGetFile	access:public
MtpCommandGetFile::IsRootImage	mtp/CommandCodes.h	/^    bool IsRootImage;$/;"	m	struct:MtpCommandGetFile	access:public
MtpCommandGetFile::MtpCommandGetFile	mtp/CommandCodes.h	/^    MtpCommandGetFile (uint32_t file_id, const string& in_FileName)$/;"	f	struct:MtpCommandGetFile	access:public	signature:(uint32_t file_id, const string& in_FileName)
MtpCommandList	mtp/MtpThread.h	/^typedef vector<MtpCommand*> MtpCommandList;$/;"	t
MtpCommandSendFile	mtp/CommandCodes.h	/^    MtpCommandSendFile (FileNode in_file) : File(in_file) $/;"	f	struct:MtpCommandSendFile	access:public	signature:(FileNode in_file)
MtpCommandSendFile	mtp/CommandCodes.h	/^struct MtpCommandSendFile : MtpCommand$/;"	s	inherits:MtpCommand
MtpCommandSendFile::File	mtp/CommandCodes.h	/^    FileNode File;$/;"	m	struct:MtpCommandSendFile	access:public
MtpCommandSendFile::MtpCommandSendFile	mtp/CommandCodes.h	/^    MtpCommandSendFile (FileNode in_file) : File(in_file) $/;"	f	struct:MtpCommandSendFile	access:public	signature:(FileNode in_file)
MtpDevice	mtp/MtpDevice.h	/^    MtpDevice( LIBMTP_mtpdevice_t* in_device )$/;"	f	class:MtpDevice	access:public	signature:( LIBMTP_mtpdevice_t* in_device )
MtpDevice	mtp/MtpDevice.h	/^class MtpDevice : protected MtpParent$/;"	c	inherits:MtpParent
MtpDevice::DumpInformation	mtp/MtpDevice.h	/^    void DumpInformation ( void )$/;"	f	class:MtpDevice	access:public	signature:( void )
MtpDevice::GetFileSystem	mtp/MtpDevice.h	/^    MtpFS* GetFileSystem ( void )$/;"	f	class:MtpDevice	access:public	signature:( void )
MtpDevice::GetFolders	mtp/MtpDevice.h	/^    void GetFolders ( void )$/;"	f	class:MtpDevice	access:public	signature:( void )
MtpDevice::MtpDevice	mtp/MtpDevice.h	/^    MtpDevice( LIBMTP_mtpdevice_t* in_device )$/;"	f	class:MtpDevice	access:public	signature:( LIBMTP_mtpdevice_t* in_device )
MtpDevice::_curBatteryLevel	mtp/MtpDevice.h	/^    ubyte _curBatteryLevel;$/;"	m	class:MtpDevice	access:private
MtpDevice::_device	mtp/MtpDevice.h	/^    LIBMTP_mtpdevice_t* _device;$/;"	m	class:MtpDevice	access:private
MtpDevice::_deviceVersion	mtp/MtpDevice.h	/^    string _deviceVersion;$/;"	m	class:MtpDevice	access:private
MtpDevice::_friendlyName	mtp/MtpDevice.h	/^    string _friendlyName;$/;"	m	class:MtpDevice	access:private
MtpDevice::_maxBatteryLevel	mtp/MtpDevice.h	/^    ubyte _maxBatteryLevel;$/;"	m	class:MtpDevice	access:private
MtpDevice::_modelName	mtp/MtpDevice.h	/^    string _modelName;$/;"	m	class:MtpDevice	access:private
MtpDevice::_mtpFS	mtp/MtpDevice.h	/^    MtpFS* _mtpFS;$/;"	m	class:MtpDevice	access:private
MtpDevice::_serial	mtp/MtpDevice.h	/^    string _serial;$/;"	m	class:MtpDevice	access:private
MtpDevice::_syncPartner	mtp/MtpDevice.h	/^    string _syncPartner;$/;"	m	class:MtpDevice	access:private
MtpDevice::getBatteryLevel	mtp/MtpDevice.h	/^    void getBatteryLevel()$/;"	f	class:MtpDevice	access:private	signature:()
MtpDevice::getDeviceVersion	mtp/MtpDevice.h	/^    void getDeviceVersion() $/;"	f	class:MtpDevice	access:private	signature:()
MtpDevice::getFriendlyName	mtp/MtpDevice.h	/^    void getFriendlyName()$/;"	f	class:MtpDevice	access:private	signature:()
MtpDevice::getModelName	mtp/MtpDevice.h	/^    void getModelName()$/;"	f	class:MtpDevice	access:private	signature:()
MtpDevice::getSerialNum	mtp/MtpDevice.h	/^    void getSerialNum()$/;"	f	class:MtpDevice	access:private	signature:()
MtpDevice::getSyncPartner	mtp/MtpDevice.h	/^    void getSyncPartner()$/;"	f	class:MtpDevice	access:private	signature:()
MtpDevice::rawDevice	mtp/MtpDevice.h	/^    LIBMTP_mtpdevice_t* rawDevice()$/;"	f	class:MtpDevice	access:public	signature:()
MtpDevice::~MtpDevice	mtp/MtpDevice.h	/^    ~MtpDevice()$/;"	f	class:MtpDevice	access:public	signature:()
MtpDeviceInfo	mtp/CommandCodes.h	/^struct MtpDeviceInfo$/;"	s
MtpDeviceInfo::_curBatteryLevel	mtp/CommandCodes.h	/^    ubyte _curBatteryLevel;$/;"	m	struct:MtpDeviceInfo	access:public
MtpDeviceInfo::_friendlyName	mtp/CommandCodes.h	/^    string _friendlyName;$/;"	m	struct:MtpDeviceInfo	access:public
MtpDeviceInfo::_maxBatteryLevel	mtp/CommandCodes.h	/^    ubyte _maxBatteryLevel;$/;"	m	struct:MtpDeviceInfo	access:public
MtpDeviceInfo::_modelName	mtp/CommandCodes.h	/^    string _modelName;$/;"	m	struct:MtpDeviceInfo	access:public
MtpDeviceInfo::_serial	mtp/CommandCodes.h	/^    string _serial;$/;"	m	struct:MtpDeviceInfo	access:public
MtpDeviceInfo::_syncPartner	mtp/CommandCodes.h	/^    string _syncPartner;$/;"	m	struct:MtpDeviceInfo	access:public
MtpDir	mtp/MtpDir.h	/^    MtpDir ()$/;"	f	class:MtpDir	access:public	signature:()
MtpDir	mtp/MtpDir.h	/^class MtpDir$/;"	c
MtpDir::Depth	mtp/MtpDir.h	/^    count_t Depth;$/;"	m	class:MtpDir	access:public
MtpDir::FolderId	mtp/MtpDir.h	/^    uint32_t FolderId;$/;"	m	class:MtpDir	access:public
MtpDir::Height	mtp/MtpDir.h	/^    count_t Height;$/;"	m	class:MtpDir	access:public
MtpDir::MtpDir	mtp/MtpDir.h	/^    MtpDir ()$/;"	f	class:MtpDir	access:public	signature:()
MtpDir::Name	mtp/MtpDir.h	/^    string Name;$/;"	m	class:MtpDir	access:public
MtpDir::ParentId	mtp/MtpDir.h	/^    uint32_t ParentId;$/;"	m	class:MtpDir	access:public
MtpDir::Set	mtp/MtpDir.h	/^    void Set(LIBMTP_folder_t* in_folder, count_t in_depth, count_t in_height)$/;"	f	class:MtpDir	access:public	signature:(LIBMTP_folder_t* in_folder, count_t in_depth, count_t in_height)
MtpFS	mtp/MtpFS.h	/^    MtpFS( LIBMTP_folder_t* in_root, LIBMTP_mtpdevice_t* in_dev)$/;"	f	class:MtpFS	access:public	signature:( LIBMTP_folder_t* in_root, LIBMTP_mtpdevice_t* in_dev)
MtpFS	mtp/MtpFS.h	/^class MtpFS$/;"	c
MtpFS::AddFile	mtp/MtpFS.h	/^    void AddFile (FileNode& in_file)$/;"	f	class:MtpFS	access:public	signature:(FileNode& in_file)
MtpFS::DeleteFile	mtp/MtpFS.h	/^    void DeleteFile (const FileNode& in_file)$/;"	f	class:MtpFS	access:public	signature:(const FileNode& in_file)
MtpFS::FindRootImage	mtp/MtpFS.h	/^    bool FindRootImage( uint32_t* idOut)$/;"	f	class:MtpFS	access:public	signature:( uint32_t* idOut)
MtpFS::GetDirectory	mtp/MtpFS.h	/^    DirNode* GetDirectory (DirNode* in_parent, uint32_t in_index)$/;"	f	class:MtpFS	access:public	signature:(DirNode* in_parent, uint32_t in_index)
MtpFS::GetDirectory	mtp/MtpFS.h	/^    DirNode* GetDirectory (uint32_t in_id)$/;"	f	class:MtpFS	access:public	signature:(uint32_t in_id)
MtpFS::GetHeight	mtp/MtpFS.h	/^    count_t GetHeight(uint32_t in_id)$/;"	f	class:MtpFS	access:public	signature:(uint32_t in_id)
MtpFS::GetParent	mtp/MtpFS.h	/^    DirNode* GetParent (DirNode* in_dirnode)$/;"	f	class:MtpFS	access:public	signature:(DirNode* in_dirnode)
MtpFS::GetRoot	mtp/MtpFS.h	/^    DirNode* GetRoot()$/;"	f	class:MtpFS	access:public	signature:()
MtpFS::GetRootFileCount	mtp/MtpFS.h	/^    count_t GetRootFileCount()$/;"	f	class:MtpFS	access:public	signature:()
MtpFS::InsertFileList	mtp/MtpFS.h	/^    void InsertFileList (LIBMTP_file_t* in_rootFile)$/;"	f	class:MtpFS	access:public	signature:(LIBMTP_file_t* in_rootFile)
MtpFS::MtpFS	mtp/MtpFS.h	/^    MtpFS( LIBMTP_folder_t* in_root, LIBMTP_mtpdevice_t* in_dev)$/;"	f	class:MtpFS	access:public	signature:( LIBMTP_folder_t* in_root, LIBMTP_mtpdevice_t* in_dev)
MtpFS::Print	mtp/MtpFS.h	/^    void Print()$/;"	f	class:MtpFS	access:public	signature:()
MtpFS::SetRootName	mtp/MtpFS.h	/^    void SetRootName (const string& in_rootname)$/;"	f	class:MtpFS	access:public	signature:(const string& in_rootname)
MtpFS::_device	mtp/MtpFS.h	/^    LIBMTP_mtpdevice_t* _device;$/;"	m	class:MtpFS	access:private
MtpFS::_dirMap	mtp/MtpFS.h	/^    map <uint32_t, DirNode*> _dirMap;$/;"	m	class:MtpFS	access:private
MtpFS::_root	mtp/MtpFS.h	/^    DirNode* _root;$/;"	m	class:MtpFS	access:private
MtpFS::_superRoot	mtp/MtpFS.h	/^    DirNode _superRoot;$/;"	m	class:MtpFS	access:private
MtpFileSystem	mtp/CommandCodes.h	/^    MtpFS* MtpFileSystem;$/;"	m	struct:MtpUpdateConnect	access:public
MtpParent	mtp/MtpParent.h	/^class MtpParent$/;"	c
MtpParent::GetErrors	mtp/MtpParent.h	/^    void GetErrors (LIBMTP_mtpdevice_t* in_device)$/;"	f	class:MtpParent	access:public	signature:(LIBMTP_mtpdevice_t* in_device)
MtpParent::isTerminal	mtp/MtpParent.h	/^    bool isTerminal (LIBMTP_error_number_t in_err)$/;"	f	class:MtpParent	access:protected	signature:(LIBMTP_error_number_t in_err)
MtpPortal	mtp/MtpPortal.h	/^    MtpPortal ()$/;"	f	class:MtpPortal	access:public	signature:()
MtpPortal	mtp/MtpPortal.h	/^class MtpPortal : protected MtpParent $/;"	c	inherits:MtpParent
MtpPortal::Connect	mtp/MtpPortal.h	/^    void Connect()$/;"	f	class:MtpPortal	access:public	signature:()
MtpPortal::Disconnect	mtp/MtpPortal.h	/^    void Disconnect()$/;"	f	class:MtpPortal	access:public	signature:()
MtpPortal::GetDevice	mtp/MtpPortal.h	/^    MtpDevice* GetDevice ( void )$/;"	f	class:MtpPortal	access:public	signature:( void )
MtpPortal::IsConnected	mtp/MtpPortal.h	/^    bool IsConnected()$/;"	f	class:MtpPortal	access:public	signature:()
MtpPortal::MtpPortal	mtp/MtpPortal.h	/^    MtpPortal ()$/;"	f	class:MtpPortal	access:public	signature:()
MtpPortal::_connected	mtp/MtpPortal.h	/^    bool _connected;$/;"	m	class:MtpPortal	access:private
MtpPortal::_device	mtp/MtpPortal.h	/^    MtpDevice* _device;$/;"	m	class:MtpPortal	access:private
MtpPortal::_deviceCount	mtp/MtpPortal.h	/^    count_t _deviceCount;$/;"	m	class:MtpPortal	access:private
MtpPortal::~MtpPortal	mtp/MtpPortal.h	/^    ~MtpPortal()$/;"	f	class:MtpPortal	access:public	signature:()
MtpThread	mtp/MtpThread.h	/^    MtpThread (QObject* parent) : QThread (parent)$/;"	f	class:MtpThread	access:public	signature:(QObject* parent)
MtpThread	mtp/MtpThread.h	/^class MtpThread : public QThread $/;"	c	inherits:QThread
MtpThread::ConnectDone	mtp/MtpThread.h	/^    void ConnectDone(MtpFS* FS);$/;"	p	class:MtpThread	access:public	signature:(MtpFS* FS)
MtpThread::DeleteComplete	mtp/MtpThread.h	/^    void DeleteComplete(MtpUpdateDelete* );$/;"	p	class:MtpThread	access:public	signature:(MtpUpdateDelete* )
MtpThread::IssueCommand	mtp/MtpThread.h	/^    void IssueCommand (MtpCommand* in_command)$/;"	f	class:MtpThread	access:public	signature:(MtpCommand* in_command)
MtpThread::MtpThread	mtp/MtpThread.h	/^    MtpThread (QObject* parent) : QThread (parent)$/;"	f	class:MtpThread	access:public	signature:(QObject* parent)
MtpThread::NewDeviceImage	mtp/MtpThread.h	/^    void NewDeviceImage();$/;"	p	class:MtpThread	access:public	signature:()
MtpThread::TransferToDeviceDone	mtp/MtpThread.h	/^    void TransferToDeviceDone(MtpUpdateTransfer* );$/;"	p	class:MtpThread	access:public	signature:(MtpUpdateTransfer* )
MtpThread::_device	mtp/MtpThread.h	/^    MtpDevice* _device;$/;"	m	class:MtpThread	access:private
MtpThread::_jobs	mtp/MtpThread.h	/^    queue <MtpCommand*> _jobs;$/;"	m	class:MtpThread	access:private
MtpThread::_lock	mtp/MtpThread.h	/^    QMutex _lock;$/;"	m	class:MtpThread	access:private
MtpThread::_mtpFileSystem	mtp/MtpThread.h	/^    MtpFS* _mtpFileSystem;$/;"	m	class:MtpThread	access:private
MtpThread::_portal	mtp/MtpThread.h	/^    MtpPortal _portal;$/;"	m	class:MtpThread	access:private
MtpThread::cond	mtp/MtpThread.h	/^    QWaitCondition cond;$/;"	m	class:MtpThread	access:private
MtpThread::run	mtp/MtpThread.h	/^    void run()$/;"	f	class:MtpThread	access:public	signature:()
MtpUpdate	mtp/CommandCodes.h	/^struct MtpUpdate$/;"	s
MtpUpdate::ComCode	mtp/CommandCodes.h	/^    MtpCommandCode ComCode;$/;"	m	struct:MtpUpdate	access:public
MtpUpdate::GetCommand	mtp/CommandCodes.h	/^    MtpCommandCode GetCommand()$/;"	f	struct:MtpUpdate	access:public	signature:()
MtpUpdate::Success	mtp/CommandCodes.h	/^    bool Success;$/;"	m	struct:MtpUpdate	access:public
MtpUpdate::isSuccess	mtp/CommandCodes.h	/^    bool isSuccess()$/;"	f	struct:MtpUpdate	access:public	signature:()
MtpUpdateConnect	mtp/CommandCodes.h	/^    MtpUpdateConnect(bool in_success, MtpFS* in_fs)$/;"	f	struct:MtpUpdateConnect	access:public	signature:(bool in_success, MtpFS* in_fs)
MtpUpdateConnect	mtp/CommandCodes.h	/^struct MtpUpdateConnect: MtpUpdate$/;"	s	inherits:MtpUpdate
MtpUpdateConnect::MtpFileSystem	mtp/CommandCodes.h	/^    MtpFS* MtpFileSystem;$/;"	m	struct:MtpUpdateConnect	access:public
MtpUpdateConnect::MtpUpdateConnect	mtp/CommandCodes.h	/^    MtpUpdateConnect(bool in_success, MtpFS* in_fs)$/;"	f	struct:MtpUpdateConnect	access:public	signature:(bool in_success, MtpFS* in_fs)
MtpUpdateDelete	mtp/CommandCodes.h	/^    MtpUpdateDelete (bool in_success, FileNode in_file) : File(in_file)$/;"	f	struct:MtpUpdateDelete	access:public	signature:(bool in_success, FileNode in_file)
MtpUpdateDelete	mtp/CommandCodes.h	/^struct MtpUpdateDelete : MtpUpdate$/;"	s	inherits:MtpUpdate
MtpUpdateDelete::File	mtp/CommandCodes.h	/^    FileNode File;$/;"	m	struct:MtpUpdateDelete	access:public
MtpUpdateDelete::MtpUpdateDelete	mtp/CommandCodes.h	/^    MtpUpdateDelete (bool in_success, FileNode in_file) : File(in_file)$/;"	f	struct:MtpUpdateDelete	access:public	signature:(bool in_success, FileNode in_file)
MtpUpdateDeviceInfo	mtp/CommandCodes.h	/^struct MtpUpdateDeviceInfo$/;"	s
MtpUpdateDeviceInfo::Info	mtp/CommandCodes.h	/^    MtpDeviceInfo Info;$/;"	m	struct:MtpUpdateDeviceInfo	access:public
MtpUpdateList	mtp/MtpThread.h	/^typedef vector<MtpUpdate*> MtpUpdateList;$/;"	t
MtpUpdateTransfer	mtp/CommandCodes.h	/^    MtpUpdateTransfer(bool in_success, FileNode in_file) : File(in_file)$/;"	f	struct:MtpUpdateTransfer	access:public	signature:(bool in_success, FileNode in_file)
MtpUpdateTransfer	mtp/CommandCodes.h	/^struct MtpUpdateTransfer : MtpUpdate$/;"	s	inherits:MtpUpdate
MtpUpdateTransfer::File	mtp/CommandCodes.h	/^    FileNode File;$/;"	m	struct:MtpUpdateTransfer	access:public
MtpUpdateTransfer::MtpUpdateTransfer	mtp/CommandCodes.h	/^    MtpUpdateTransfer(bool in_success, FileNode in_file) : File(in_file)$/;"	f	struct:MtpUpdateTransfer	access:public	signature:(bool in_success, FileNode in_file)
Name	mtp/MtpDir.h	/^    string Name;$/;"	m	class:MtpDir	access:public
NewDeviceImage	mtp/MtpThread.h	/^    void NewDeviceImage();$/;"	p	class:MtpThread	access:public	signature:()
NewText	widgets/ConsoleWidget.h	/^    void NewText(const QString& txt);$/;"	p	class:ConsoleWidget	access:public	signature:(const QString& txt)
OBJECTS	Makefile	/^OBJECTS       = main.o \\$/;"	m
OBJECTS_DIR	Makefile	/^OBJECTS_DIR   = .\/$/;"	m
OnReturn	widgets/ConsoleWidget.h	/^    virtual void OnReturn( void )$/;"	f	class:ConsoleWidget	access:public	signature:( void )
PaletteEntry	mtp/BmpStructs.h	/^struct PaletteEntry$/;"	s
PaletteEntry::Blue	mtp/BmpStructs.h	/^    byte Blue;$/;"	m	struct:PaletteEntry	access:public
PaletteEntry::Green	mtp/BmpStructs.h	/^    byte Green;$/;"	m	struct:PaletteEntry	access:public
PaletteEntry::Red	mtp/BmpStructs.h	/^    byte Red;$/;"	m	struct:PaletteEntry	access:public
PaletteEntry::Reserved	mtp/BmpStructs.h	/^    byte Reserved;$/;"	m	struct:PaletteEntry	access:public
ParentId	mtp/MtpDir.h	/^    uint32_t ParentId;$/;"	m	class:MtpDir	access:public
Pixel	mtp/BmpStructs.h	/^struct Pixel$/;"	s
Pixel::Alpha	mtp/BmpStructs.h	/^    byte Alpha;$/;"	m	struct:Pixel	access:public
Pixel::Blue	mtp/BmpStructs.h	/^    byte Blue;$/;"	m	struct:Pixel	access:public
Pixel::Green	mtp/BmpStructs.h	/^    byte Green;$/;"	m	struct:Pixel	access:public
Pixel::Red	mtp/BmpStructs.h	/^    byte Red;$/;"	m	struct:Pixel	access:public
Planes	mtp/BmpStructs.h	/^    short Planes;$/;"	m	struct:DibHeader	access:public
Planes	mtp/BmpStructs.h	/^    short Planes;$/;"	m	struct:IconDirEntry	access:public
PopulateImages	mtp/Icon.h	/^    void PopulateImages ( void )$/;"	f	class:Icon	access:public	signature:( void )
Print	mtp/DirNode.h	/^    void Print ()$/;"	f	class:DirNode	access:public	signature:()
Print	mtp/MtpFS.h	/^    void Print()$/;"	f	class:MtpFS	access:public	signature:()
QMAKE	Makefile	/^QMAKE         = \/usr\/bin\/qmake$/;"	m
QMAKE_TARGET	Makefile	/^QMAKE_TARGET  = Qlix$/;"	m
QlixMainWindow	widgets/QlixMainWindow.h	/^    QlixMainWindow ()$/;"	f	class:QlixMainWindow	access:public	signature:()
QlixMainWindow	widgets/QlixMainWindow.h	/^class QlixMainWindow : public QMainWindow$/;"	c	inherits:QMainWindow
QlixMainWindow::QlixMainWindow	widgets/QlixMainWindow.h	/^    QlixMainWindow ()$/;"	f	class:QlixMainWindow	access:public	signature:()
QlixMainWindow::_aboutAct	widgets/QlixMainWindow.h	/^    QAction* _aboutAct;$/;"	m	class:QlixMainWindow	access:private
QlixMainWindow::_alignmentGroup	widgets/QlixMainWindow.h	/^    QActionGroup* _alignmentGroup;$/;"	m	class:QlixMainWindow	access:private
QlixMainWindow::_connectAct	widgets/QlixMainWindow.h	/^    QAction* _connectAct;$/;"	m	class:QlixMainWindow	access:private
QlixMainWindow::_console	widgets/QlixMainWindow.h	/^    DeviceConsole* _console; $/;"	m	class:QlixMainWindow	access:private
QlixMainWindow::_deviceExp	widgets/QlixMainWindow.h	/^    DeviceExplorer* _deviceExp;$/;"	m	class:QlixMainWindow	access:private
QlixMainWindow::_exitAct	widgets/QlixMainWindow.h	/^    QAction* _exitAct;$/;"	m	class:QlixMainWindow	access:private
QlixMainWindow::_fileExp	widgets/QlixMainWindow.h	/^    FileExplorer* _fileExp;$/;"	m	class:QlixMainWindow	access:private
QlixMainWindow::_layout	widgets/QlixMainWindow.h	/^    QGridLayout* _layout;$/;"	m	class:QlixMainWindow	access:private
QlixMainWindow::_mainToolBar	widgets/QlixMainWindow.h	/^    QToolBar* _mainToolBar;$/;"	m	class:QlixMainWindow	access:private
QlixMainWindow::_mainWidget	widgets/QlixMainWindow.h	/^    QWidget*       _mainWidget;$/;"	m	class:QlixMainWindow	access:private
QlixMainWindow::_menuMenu	widgets/QlixMainWindow.h	/^    QMenu* _menuMenu;$/;"	m	class:QlixMainWindow	access:private
QlixMainWindow::_parent	widgets/QlixMainWindow.h	/^    QWidget* _parent;$/;"	m	class:QlixMainWindow	access:private
QlixMainWindow::_splitter	widgets/QlixMainWindow.h	/^    QSplitter* _splitter;$/;"	m	class:QlixMainWindow	access:private
QlixMainWindow::_widgetSizes	widgets/QlixMainWindow.h	/^    QList<int>      _widgetSizes;$/;"	m	class:QlixMainWindow	access:private
QlixMainWindow::connectDevice	widgets/QlixMainWindow.h	/^    void connectDevice()$/;"	f	class:QlixMainWindow	access:private	signature:()
QlixMainWindow::contextMenuEvent	widgets/QlixMainWindow.h	/^     void contextMenuEvent(QContextMenuEvent *) {}$/;"	f	class:QlixMainWindow	access:protected	signature:(QContextMenuEvent *)
QlixMainWindow::createActions	widgets/QlixMainWindow.h	/^    void createActions()$/;"	f	class:QlixMainWindow	access:private	signature:()
QlixMainWindow::createMenus	widgets/QlixMainWindow.h	/^    void createMenus()$/;"	f	class:QlixMainWindow	access:private	signature:()
QlixMainWindow::createToolBars	widgets/QlixMainWindow.h	/^    void createToolBars()$/;"	f	class:QlixMainWindow	access:private	signature:()
QlixMainWindow::setupConnections	widgets/QlixMainWindow.h	/^    void setupConnections ( void )$/;"	f	class:QlixMainWindow	access:private	signature:( void )
QlixMainWindow::setupConsole	widgets/QlixMainWindow.h	/^    void setupConsole (void)$/;"	f	class:QlixMainWindow	access:private	signature:(void)
QlixMainWindow::setupDeviceList	widgets/QlixMainWindow.h	/^    void setupDeviceList (void)$/;"	f	class:QlixMainWindow	access:private	signature:(void)
QlixMainWindow::setupFileList	widgets/QlixMainWindow.h	/^    void setupFileList (void)$/;"	f	class:QlixMainWindow	access:private	signature:(void)
QlixMainWindow::setupLayoutAndSplits	widgets/QlixMainWindow.h	/^    void setupLayoutAndSplits ( void )$/;"	f	class:QlixMainWindow	access:private	signature:( void )
QlixMainWindow::~QlixMainWindow	widgets/QlixMainWindow.h	/^    ~QlixMainWindow()$/;"	f	class:QlixMainWindow	access:public	signature:()
RANLIB	Makefile	/^RANLIB        = $/;"	m
RawImageSize	mtp/BmpStructs.h	/^    int RawImageSize;$/;"	m	struct:DibHeader	access:public
ReadImages	mtp/Icon.h	/^    void ReadImages()$/;"	f	class:Icon	access:public	signature:()
Red	mtp/BmpStructs.h	/^    byte Red;$/;"	m	struct:PaletteEntry	access:public
Red	mtp/BmpStructs.h	/^    byte Red;$/;"	m	struct:Pixel	access:public
RequestFile	widgets/FileExplorer.h	/^    void RequestFile(const FileNode& temp, const string& path);$/;"	p	class:FileExplorer	access:public	signature:(const FileNode& temp, const string& path)
Reserved	mtp/BmpStructs.h	/^    byte Reserved;$/;"	m	struct:IconDirEntry	access:public
Reserved	mtp/BmpStructs.h	/^    byte Reserved;$/;"	m	struct:PaletteEntry	access:public
Reserved	mtp/BmpStructs.h	/^    short Reserved;$/;"	m	struct:IconHeader	access:public
SOURCES	Makefile	/^SOURCES       = main.cpp \\$/;"	m
SYMLINK	Makefile	/^SYMLINK       = ln -sf$/;"	m
Sanity	mtp/FileNode.h	/^    void Sanity (LIBMTP_filetype_t in_type)$/;"	f	class:FileNode	access:public	signature:(LIBMTP_filetype_t in_type)
SendFile	mtp/CommandCodes.h	/^    SendFile,$/;"	e	enum:MtpCommandCode
SendSampleData	mtp/CommandCodes.h	/^    SendSampleData,$/;"	e	enum:MtpCommandCode
Set	mtp/MtpDir.h	/^    void Set(LIBMTP_folder_t* in_folder, count_t in_depth, count_t in_height)$/;"	f	class:MtpDir	access:public	signature:(LIBMTP_folder_t* in_folder, count_t in_depth, count_t in_height)
Set	widgets/DeviceDirModel.h	/^    void Set (MtpFS* in_fs)$/;"	f	class:DeviceDirModel	access:public	signature:(MtpFS* in_fs)
Set	widgets/DeviceFileModel.h	/^    void Set (MtpFS* in_fs)$/;"	f	class:DeviceFileModel	access:public	signature:(MtpFS* in_fs)
SetDeviceConsole	widgets/DeviceExplorer.h	/^    void SetDeviceConsole (DeviceConsole* in_console)$/;"	f	class:DeviceExplorer	access:public	signature:(DeviceConsole* in_console)
SetDeviceDirView	widgets/FileExplorer.h	/^    void SetDeviceDirView (DeviceDirView* in_view)$/;"	f	class:FileExplorer	access:public	signature:(DeviceDirView* in_view)
SetDeviceFileView	widgets/FileExplorer.h	/^    void SetDeviceFileView (DeviceFileView* in_view)$/;"	f	class:FileExplorer	access:public	signature:(DeviceFileView* in_view)
SetFSFileView	widgets/DeviceExplorer.h	/^    void SetFSFileView(FileView* in_fsfileview)$/;"	f	class:DeviceExplorer	access:public	signature:(FileView* in_fsfileview)
SetFolder	widgets/DeviceFileModel.h	/^    void SetFolder ( uint32_t folder_id)$/;"	f	class:DeviceFileModel	access:public	signature:( uint32_t folder_id)
SetHeight	mtp/DirNode.h	/^    void SetHeight(count_t in) { _currentDir.Height = in; }$/;"	f	class:DirNode	access:public	signature:(count_t in)
SetName	mtp/DirNode.h	/^    void SetName(const string& in_str) { _currentDir.Name = in_str; }$/;"	f	class:DirNode	access:public	signature:(const string& in_str)
SetParent	mtp/DirNode.h	/^    void SetParent (DirNode* in_parent)$/;"	f	class:DirNode	access:public	signature:(DirNode* in_parent)
SetRootName	mtp/MtpFS.h	/^    void SetRootName (const string& in_rootname)$/;"	f	class:MtpFS	access:public	signature:(const string& in_rootname)
SortByArtistDown	mtp/types.h	/^    SortByArtistDown,$/;"	e	enum:TrackSortType
SortByArtistUp	mtp/types.h	/^    SortByArtistUp,$/;"	e	enum:TrackSortType
SortByNameDown	mtp/types.h	/^    SortByNameDown,$/;"	e	enum:FileSortType
SortByNameUp	mtp/types.h	/^    SortByNameUp,$/;"	e	enum:FileSortType
SortBySizeDown	mtp/types.h	/^    SortBySizeDown,$/;"	e	enum:FileSortType
SortBySizeUp	mtp/types.h	/^    SortBySizeUp,$/;"	e	enum:FileSortType
SortBySongDown	mtp/types.h	/^    SortBySongDown,$/;"	e	enum:TrackSortType
SortBySongUp	mtp/types.h	/^    SortBySongUp,$/;"	e	enum:TrackSortType
SortByTrackNumDown	mtp/types.h	/^    SortByTrackNumDown$/;"	e	enum:TrackSortType
SortByTrackNumUp	mtp/types.h	/^    SortByTrackNumUp,$/;"	e	enum:TrackSortType
SortByTypeDown	mtp/types.h	/^    SortByTypeDown$/;"	e	enum:FileSortType
SortByTypeUp	mtp/types.h	/^    SortByTypeUp,$/;"	e	enum:FileSortType
SortDirectories	mtp/DirNode.h	/^    void SortDirectories()$/;"	f	class:DirNode	access:public	signature:()
SortFileNamesDown	mtp/DirNode.h	/^    void SortFileNamesDown()$/;"	f	class:DirNode	access:public	signature:()
SortFileNamesUp	mtp/DirNode.h	/^    void SortFileNamesUp()$/;"	f	class:DirNode	access:public	signature:()
SortSizeDown	mtp/DirNode.h	/^    void SortSizeDown()$/;"	f	class:DirNode	access:public	signature:()
SortSizeUp	mtp/DirNode.h	/^    void SortSizeUp()$/;"	f	class:DirNode	access:public	signature:()
Success	mtp/CommandCodes.h	/^    bool Success;$/;"	m	struct:MtpUpdate	access:public
TAR	Makefile	/^TAR           = tar -cf$/;"	m
TARGET	Makefile	/^TARGET        = Qlix$/;"	m
TrackSortType	mtp/types.h	/^enum TrackSortType$/;"	g
TransferFileToDevice	widgets/FileExplorer.h	/^    void TransferFileToDevice(const QFileInfo& temp);$/;"	p	class:FileExplorer	access:public	signature:(const QFileInfo& temp)
TransferToDevice	widgets/DeviceFileView.cpp	/^void DeviceFileView::TransferToDevice(const QString& in_file, DirNode* directory)$/;"	f	class:DeviceFileView	signature:(const QString& in_file, DirNode* directory)
TransferToDevice	widgets/DeviceFileView.h	/^    void TransferToDevice(const QString& in_file, DirNode* directory);$/;"	p	class:DeviceFileView	access:public	signature:(const QString& in_file, DirNode* directory)
TransferToDevice	widgets/FileView.h	/^   void TransferToDevice (const QString&, DirNode*);$/;"	p	class:FileView	access:public	signature:(const QString&, DirNode*)
TransferToDeviceDone	mtp/MtpThread.h	/^    void TransferToDeviceDone(MtpUpdateTransfer* );$/;"	p	class:MtpThread	access:public	signature:(MtpUpdateTransfer* )
Type	mtp/BmpStructs.h	/^    short Type;$/;"	m	struct:IconHeader	access:public
Unset	widgets/DeviceDirModel.h	/^    void Unset ()$/;"	f	class:DeviceDirModel	access:public	signature:()
Unset	widgets/DeviceFileModel.h	/^    void Unset()$/;"	f	class:DeviceFileModel	access:public	signature:()
VRes	mtp/BmpStructs.h	/^    int VRes;$/;"	m	struct:DibHeader	access:public
Width	mtp/BmpStructs.h	/^    count_t Width;$/;"	m	struct:Dimensions	access:public
Width	mtp/BmpStructs.h	/^    int Width;$/;"	m	struct:DibHeader	access:public
Width	mtp/BmpStructs.h	/^    ubyte Width;$/;"	m	struct:IconDirEntry	access:public
YACC	Makefile	/^YACC          = yacc$/;"	m
YACCFLAGS	Makefile	/^YACCFLAGS     = -d$/;"	m
_FSfileView	widgets/DeviceFileView.h	/^    FileView* _FSfileView;$/;"	m	class:DeviceFileView	access:private
__BMPICON__	mtp/Icon.h	5;"	d
__COMMANDCODES__	mtp/CommandCodes.h	5;"	d
__CONSOLEWIDGET__	widgets/ConsoleWidget.h	6;"	d
__DEVICECONSOLE__	widgets/DeviceConsole.h	5;"	d
__DEVICEDIRMODEL__	widgets/DeviceDirModel.h	5;"	d
__DEVICEDIRVIEW__	widgets/DeviceDirView.h	5;"	d
__DEVICEEXPLORER__	widgets/DeviceExplorer.h	5;"	d
__DEVICEFILEMODEL__	widgets/DeviceFileModel.h	5;"	d
__DEVICEFILEVIEW__	widgets/DeviceFileView.h	5;"	d
__DIRFILTER__	widgets/DirFilter.h	5;"	d
__DIRNODE__	mtp/DirNode.h	4;"	d
__DIRVIEWER__	widgets/DirView.h	5;"	d
__FILEEXPLORER__	widgets/FileExplorer.h	5;"	d
__FILENODE__	mtp/FileNode.h	5;"	d
__FILEVIEWER__	widgets/FileView.h	5;"	d
__MTPDEVICE__	mtp/MtpDevice.h	6;"	d
__MTPDIR__	mtp/MtpDir.h	6;"	d
__MTPFS__	mtp/MtpFS.h	5;"	d
__MTPPARENT__	mtp/MtpParent.h	5;"	d
__MTPPORTAL__	mtp/MtpPortal.h	6;"	d
__MTPTHREAD__	mtp/MtpThread.h	5;"	d
__QLIXMAINWINDOW__	widgets/QlixMainWindow.h	5;"	d
__STRUCTS__	mtp/BmpStructs.h	5;"	d
__TYPES__	mtp/types.h	6;"	d
_aboutAct	widgets/QlixMainWindow.h	/^    QAction* _aboutAct;$/;"	m	class:QlixMainWindow	access:private
_alignmentGroup	widgets/QlixMainWindow.h	/^    QActionGroup* _alignmentGroup;$/;"	m	class:QlixMainWindow	access:private
_bestImage	mtp/Icon.h	/^    index_t _bestImage;$/;"	m	class:Icon	access:private
_bestImageDepth	mtp/Icon.h	/^    count_t _bestImageDepth;$/;"	m	class:Icon	access:private
_bestImageDimensions	mtp/Icon.h	/^    Dimensions _bestImageDimensions;$/;"	m	class:Icon	access:private
_bestImagePtr	mtp/Icon.h	/^    byte* _bestImagePtr;$/;"	m	class:Icon	access:private
_bestImageSize	mtp/Icon.h	/^    count_t _bestImageSize;$/;"	m	class:Icon	access:private
_children	mtp/DirNode.h	/^    vector <DirNode*> _children;$/;"	m	class:DirNode	access:protected
_commandLine	widgets/ConsoleWidget.h	/^    QLineEdit* _commandLine;$/;"	m	class:ConsoleWidget	access:private
_commandLineLabel	widgets/ConsoleWidget.h	/^    QLabel*    _commandLineLabel;$/;"	m	class:ConsoleWidget	access:private
_connectAct	widgets/QlixMainWindow.h	/^    QAction* _connectAct;$/;"	m	class:QlixMainWindow	access:private
_connected	mtp/MtpPortal.h	/^    bool _connected;$/;"	m	class:MtpPortal	access:private
_console	widgets/DeviceExplorer.h	/^    DeviceConsole* _console;$/;"	m	class:DeviceExplorer	access:private
_console	widgets/QlixMainWindow.h	/^    DeviceConsole* _console; $/;"	m	class:QlixMainWindow	access:private
_createFolderAct	widgets/DeviceDirView.h	/^    QAction* _createFolderAct;$/;"	m	class:DeviceDirView	access:private
_curBatteryLevel	mtp/CommandCodes.h	/^    ubyte _curBatteryLevel;$/;"	m	struct:MtpDeviceInfo	access:public
_curBatteryLevel	mtp/MtpDevice.h	/^    ubyte _curBatteryLevel;$/;"	m	class:MtpDevice	access:private
_currentDir	mtp/DirNode.h	/^    MtpDir _currentDir;$/;"	m	class:DirNode	access:protected
_currentDir	widgets/FileExplorer.h	/^    QString _currentDir;$/;"	m	class:FileExplorer	access:private
_cursor	widgets/ConsoleWidget.h	/^    QTextCursor* _cursor;$/;"	m	class:ConsoleWidget	access:private
_deleteFileAct	widgets/DeviceFileView.h	/^    QAction* _deleteFileAct;$/;"	m	class:DeviceFileView	access:private
_deleteFolderAct	widgets/DeviceDirView.h	/^    QAction* _deleteFolderAct;$/;"	m	class:DeviceDirView	access:private
_device	mtp/MtpDevice.h	/^    LIBMTP_mtpdevice_t* _device;$/;"	m	class:MtpDevice	access:private
_device	mtp/MtpFS.h	/^    LIBMTP_mtpdevice_t* _device;$/;"	m	class:MtpFS	access:private
_device	mtp/MtpPortal.h	/^    MtpDevice* _device;$/;"	m	class:MtpPortal	access:private
_device	mtp/MtpThread.h	/^    MtpDevice* _device;$/;"	m	class:MtpThread	access:private
_deviceCount	mtp/MtpPortal.h	/^    count_t _deviceCount;$/;"	m	class:MtpPortal	access:private
_deviceDirView	widgets/FileExplorer.h	/^    DeviceDirView*  _deviceDirView;$/;"	m	class:FileExplorer	access:private
_deviceExp	widgets/QlixMainWindow.h	/^    DeviceExplorer* _deviceExp;$/;"	m	class:QlixMainWindow	access:private
_deviceFileView	widgets/FileExplorer.h	/^    DeviceFileView* _deviceFileView;$/;"	m	class:FileExplorer	access:private
_deviceFileView	widgets/FileView.h	/^    DeviceFileView* _deviceFileView;$/;"	m	class:FileView	access:private
_deviceFreeSpace	widgets/DeviceConsole.h	/^        QLabel* _deviceFreeSpace;$/;"	m	class:DeviceConsole	access:private
_deviceImage	widgets/DeviceConsole.h	/^        QPixmap _deviceImage;$/;"	m	class:DeviceConsole	access:private
_deviceLabel	widgets/DeviceConsole.h	/^        QLabel* _deviceLabel;$/;"	m	class:DeviceConsole	access:private
_deviceTotalSpace	widgets/DeviceConsole.h	/^        QLabel* _deviceTotalSpace;$/;"	m	class:DeviceConsole	access:private
_deviceVersion	mtp/MtpDevice.h	/^    string _deviceVersion;$/;"	m	class:MtpDevice	access:private
_dir	widgets/DeviceFileModel.h	/^    DirNode* _dir;$/;"	m	class:DeviceFileModel	access:private
_dirFilter	widgets/DirFilter.h	/^    bool _dirFilter;$/;"	m	class:DirFilter	access:private
_dirMap	mtp/MtpFS.h	/^    map <uint32_t, DirNode*> _dirMap;$/;"	m	class:MtpFS	access:private
_dirModel	widgets/DeviceExplorer.h	/^    DeviceDirModel* _dirModel;$/;"	m	class:DeviceExplorer	access:private
_dirModel	widgets/FileExplorer.h	/^    QDirModel* _dirModel;$/;"	m	class:FileExplorer	access:private
_dirSelection	widgets/FileExplorer.h	/^    QItemSelectionModel* _dirSelection;$/;"	m	class:FileExplorer	access:private
_dirView	widgets/DeviceExplorer.h	/^    DeviceDirView* _dirView;$/;"	m	class:DeviceExplorer	access:private
_dirView	widgets/FileExplorer.h	/^    DirView* _dirView;$/;"	m	class:FileExplorer	access:private
_doc	widgets/ConsoleWidget.h	/^    QTextDocument* _doc;$/;"	m	class:ConsoleWidget	access:private
_editor	widgets/ConsoleWidget.h	/^    QTextEdit* _editor;$/;"	m	class:ConsoleWidget	access:private
_editorScroller	widgets/ConsoleWidget.h	/^    QScrollBar* _editorScroller;$/;"	m	class:ConsoleWidget	access:private
_exitAct	widgets/QlixMainWindow.h	/^    QAction* _exitAct;$/;"	m	class:QlixMainWindow	access:private
_file	mtp/Icon.h	/^    byte* _file;$/;"	m	class:Icon	access:private
_fileExp	widgets/QlixMainWindow.h	/^    FileExplorer* _fileExp;$/;"	m	class:QlixMainWindow	access:private
_fileModel	widgets/DeviceExplorer.h	/^    DeviceFileModel* _fileModel;$/;"	m	class:DeviceExplorer	access:private
_fileModel	widgets/FileExplorer.h	/^    QDirModel* _fileModel;$/;"	m	class:FileExplorer	access:private
_fileSelection	widgets/FileExplorer.h	/^    QItemSelectionModel* _fileSelection;$/;"	m	class:FileExplorer	access:private
_fileSize	mtp/FileNode.h	/^    uint64_t _fileSize;$/;"	m	class:FileNode	access:private
_fileView	widgets/DeviceExplorer.h	/^    DeviceFileView* _fileView;$/;"	m	class:DeviceExplorer	access:private
_fileView	widgets/FileExplorer.h	/^    FileView* _fileView;$/;"	m	class:FileExplorer	access:private
_files	mtp/DirNode.h	/^    vector <FileNode> _files; $/;"	m	class:DirNode	access:protected
_friendlyName	mtp/CommandCodes.h	/^    string _friendlyName;$/;"	m	struct:MtpDeviceInfo	access:public
_friendlyName	mtp/MtpDevice.h	/^    string _friendlyName;$/;"	m	class:MtpDevice	access:private
_fsFileView	widgets/DeviceExplorer.h	/^    FileView* _fsFileView;$/;"	m	class:DeviceExplorer	access:private
_fsWatch	widgets/FileExplorer.h	/^    QFileSystemWatcher _fsWatch;$/;"	m	class:FileExplorer	access:private
_header	mtp/Icon.h	/^    IconHeader* _header;$/;"	m	class:Icon	access:private
_height	mtp/FileNode.h	/^    count_t _height;$/;"	m	class:FileNode	access:private
_iconList	mtp/Icon.h	/^    vector <IconDirEntry*> _iconList;$/;"	m	class:Icon	access:private
_isValid	mtp/Icon.h	/^    bool _isValid;$/;"	m	class:Icon	access:private
_itemId	mtp/FileNode.h	/^    uint32_t _itemId;$/;"	m	class:FileNode	access:private
_jobs	mtp/MtpThread.h	/^    queue <MtpCommand*> _jobs;$/;"	m	class:MtpThread	access:private
_layout	widgets/ConsoleWidget.h	/^    QVBoxLayout* _layout;$/;"	m	class:ConsoleWidget	access:private
_layout	widgets/DeviceConsole.h	/^        QGridLayout* _layout;$/;"	m	class:DeviceConsole	access:private
_layout	widgets/DeviceExplorer.h	/^    QHBoxLayout* _layout;$/;"	m	class:DeviceExplorer	access:private
_layout	widgets/FileExplorer.h	/^    QHBoxLayout* _layout;$/;"	m	class:FileExplorer	access:private
_layout	widgets/QlixMainWindow.h	/^    QGridLayout* _layout;$/;"	m	class:QlixMainWindow	access:private
_listSize	widgets/DeviceFileModel.h	/^    count_t _listSize;$/;"	m	class:DeviceFileModel	access:private
_lock	mtp/MtpThread.h	/^    QMutex _lock;$/;"	m	class:MtpThread	access:private
_mainToolBar	widgets/QlixMainWindow.h	/^    QToolBar* _mainToolBar;$/;"	m	class:QlixMainWindow	access:private
_mainWidget	widgets/QlixMainWindow.h	/^    QWidget*       _mainWidget;$/;"	m	class:QlixMainWindow	access:private
_maxBatteryLevel	mtp/CommandCodes.h	/^    ubyte _maxBatteryLevel;$/;"	m	struct:MtpDeviceInfo	access:public
_maxBatteryLevel	mtp/MtpDevice.h	/^    ubyte _maxBatteryLevel;$/;"	m	class:MtpDevice	access:private
_menuMenu	widgets/QlixMainWindow.h	/^    QMenu* _menuMenu;$/;"	m	class:QlixMainWindow	access:private
_modelName	mtp/CommandCodes.h	/^    string _modelName;$/;"	m	struct:MtpDeviceInfo	access:public
_modelName	mtp/MtpDevice.h	/^    string _modelName;$/;"	m	class:MtpDevice	access:private
_mtpFS	mtp/MtpDevice.h	/^    MtpFS* _mtpFS;$/;"	m	class:MtpDevice	access:private
_mtpFileSystem	mtp/MtpThread.h	/^    MtpFS* _mtpFileSystem;$/;"	m	class:MtpThread	access:private
_mtpFileSystem	widgets/DeviceDirModel.h	/^    MtpFS*     _mtpFileSystem;$/;"	m	class:DeviceDirModel	access:private
_mtpFileSystem	widgets/DeviceFileModel.h	/^    MtpFS*  _mtpFileSystem;$/;"	m	class:DeviceFileModel	access:private
_mtpThread	widgets/DeviceExplorer.h	/^    MtpThread _mtpThread;$/;"	m	class:DeviceExplorer	access:private
_mtpThread	widgets/FileExplorer.h	/^    MtpThread* _mtpThread;$/;"	m	class:FileExplorer	access:private
_name	mtp/FileNode.h	/^    string   _name;$/;"	m	class:FileNode	access:private
_needCmdLine	widgets/ConsoleWidget.h	/^    bool       _needCmdLine; $/;"	m	class:ConsoleWidget	access:private
_parent	mtp/DirNode.h	/^    DirNode* _parent;$/;"	m	class:DirNode	access:protected
_parent	widgets/QlixMainWindow.h	/^    QWidget* _parent;$/;"	m	class:QlixMainWindow	access:private
_parentId	mtp/FileNode.h	/^    uint32_t _parentId;$/;"	m	class:FileNode	access:private
_path	mtp/FileNode.h	/^    string _path; \/\/only used to transfer..$/;"	m	class:FileNode	access:private
_portal	mtp/MtpThread.h	/^    MtpPortal _portal;$/;"	m	class:MtpThread	access:private
_root	mtp/MtpFS.h	/^    DirNode* _root;$/;"	m	class:MtpFS	access:private
_serial	mtp/CommandCodes.h	/^    string _serial;$/;"	m	struct:MtpDeviceInfo	access:public
_serial	mtp/MtpDevice.h	/^    string _serial;$/;"	m	class:MtpDevice	access:private
_sortedType	widgets/DeviceFileModel.h	/^    FileSortType _sortedType;$/;"	m	class:DeviceFileModel	access:private
_splitter	widgets/DeviceExplorer.h	/^    QSplitter* _splitter;$/;"	m	class:DeviceExplorer	access:private
_splitter	widgets/FileExplorer.h	/^    QSplitter* _splitter;$/;"	m	class:FileExplorer	access:private
_splitter	widgets/QlixMainWindow.h	/^    QSplitter* _splitter;$/;"	m	class:QlixMainWindow	access:private
_superRoot	mtp/MtpFS.h	/^    DirNode _superRoot;$/;"	m	class:MtpFS	access:private
_syncPartner	mtp/CommandCodes.h	/^    string _syncPartner;$/;"	m	struct:MtpDeviceInfo	access:public
_syncPartner	mtp/MtpDevice.h	/^    string _syncPartner;$/;"	m	class:MtpDevice	access:private
_thread	widgets/DeviceFileView.h	/^    MtpThread* _thread;$/;"	m	class:DeviceFileView	access:private
_thread	widgets/DirView.h	/^    MtpThread* _thread;$/;"	m	class:DirView	access:private
_thread	widgets/FileView.h	/^    MtpThread* _thread;$/;"	m	class:FileView	access:private
_transferDirAct	widgets/DirView.h	/^    QAction* _transferDirAct;$/;"	m	class:DirView	access:private
_transferFileAct	widgets/DeviceFileView.h	/^    QAction* _transferFileAct;$/;"	m	class:DeviceFileView	access:private
_transferFileAct	widgets/FileView.h	/^    QAction* _transferFileAct;$/;"	m	class:FileView	access:private
_transferFolderAct	widgets/DeviceDirView.h	/^    QAction* _transferFolderAct;$/;"	m	class:DeviceDirView	access:private
_type	mtp/FileNode.h	/^    string _type;$/;"	m	class:FileNode	access:private
_widgetSizes	widgets/QlixMainWindow.h	/^    QList<int>      _widgetSizes;$/;"	m	class:QlixMainWindow	access:private
addCommandLine	widgets/ConsoleWidget.h	/^    virtual void addCommandLine ( void )$/;"	f	class:ConsoleWidget	access:public	signature:( void )
byte	mtp/BmpStructs.h	/^typedef char byte;$/;"	t
byte	mtp/types.h	/^typedef char byte;$/;"	t
changeWidgetBackground	widgets/DeviceConsole.h	/^        void changeWidgetBackground()$/;"	f	class:DeviceConsole	access:private	signature:()
columnCount	widgets/DeviceDirModel.h	/^    int columnCount(const QModelIndex& ) const$/;"	f	class:DeviceDirModel	access:public	signature:(const QModelIndex& ) const
columnCount	widgets/DeviceFileModel.h	/^    int columnCount (const QModelIndex& ) const$/;"	f	class:DeviceFileModel	access:public	signature:(const QModelIndex& ) const
compareDirNames	mtp/DirNode.h	/^    static bool compareDirNames(DirNode* one, DirNode* two)$/;"	f	class:DirNode	access:protected	signature:(DirNode* one, DirNode* two)
compareFileNames	mtp/DirNode.h	/^    static bool compareFileNames(FileNode one, FileNode two)$/;"	f	class:DirNode	access:protected	signature:(FileNode one, FileNode two)
compareFileSizes	mtp/DirNode.h	/^    static bool compareFileSizes(FileNode one, FileNode two)$/;"	f	class:DirNode	access:protected	signature:(FileNode one, FileNode two)
cond	mtp/MtpThread.h	/^    QWaitCondition cond;$/;"	m	class:MtpThread	access:private
connectDevice	widgets/QlixMainWindow.h	/^    void connectDevice()$/;"	f	class:QlixMainWindow	access:private	signature:()
contextMenuEvent	widgets/QlixMainWindow.h	/^     void contextMenuEvent(QContextMenuEvent *) {}$/;"	f	class:QlixMainWindow	access:protected	signature:(QContextMenuEvent *)
count_t	mtp/BmpStructs.h	/^typedef unsigned int count_t;$/;"	t
count_t	mtp/types.h	/^typedef unsigned int count_t;$/;"	t
createActions	widgets/QlixMainWindow.h	/^    void createActions()$/;"	f	class:QlixMainWindow	access:private	signature:()
createFolder	widgets/DeviceDirView.h	/^    void createFolder ( void )$/;"	f	class:DeviceDirView	access:private	signature:( void )
createMenus	widgets/QlixMainWindow.h	/^    void createMenus()$/;"	f	class:QlixMainWindow	access:private	signature:()
createToolBars	widgets/QlixMainWindow.h	/^    void createToolBars()$/;"	f	class:QlixMainWindow	access:private	signature:()
data	widgets/DeviceDirModel.h	/^    QVariant data(const QModelIndex &index, int role) const$/;"	f	class:DeviceDirModel	access:public	signature:(const QModelIndex &index, int role) const
data	widgets/DeviceFileModel.h	/^    QVariant data(const QModelIndex &index, int role) const$/;"	f	class:DeviceFileModel	access:public	signature:(const QModelIndex &index, int role) const
deleteFile	widgets/DeviceFileView.cpp	/^void DeviceFileView::deleteFile ( void ) $/;"	f	class:DeviceFileView	signature:( void )
deleteFile	widgets/DeviceFileView.h	/^    void deleteFile ( void ) ;$/;"	p	class:DeviceFileView	access:private	signature:( void )
deleteFolder	widgets/DeviceDirView.h	/^    void deleteFolder ( void ) $/;"	f	class:DeviceDirView	access:private	signature:( void )
dirFromIndex	widgets/DeviceDirModel.h	/^    DirNode* dirFromIndex(const QModelIndex& index) const$/;"	f	class:DeviceDirModel	access:private	signature:(const QModelIndex& index) const
discoverChildren	mtp/DirNode.h	/^    void discoverChildren(LIBMTP_folder_t* in_folder)$/;"	f	class:DirNode	access:protected	signature:(LIBMTP_folder_t* in_folder)
fileFilter	widgets/DirFilter.h	/^    bool fileFilter ( int sourceRow, const QModelIndex& sourceParent) const$/;"	f	class:DirFilter	access:private	signature:( int sourceRow, const QModelIndex& sourceParent) const
filterAcceptsRow	widgets/DirFilter.h	/^    bool filterAcceptsRow (int sourceRow, const QModelIndex& sourceParent) const$/;"	f	class:DirFilter	access:protected	signature:(int sourceRow, const QModelIndex& sourceParent) const
getBatteryLevel	mtp/MtpDevice.h	/^    void getBatteryLevel()$/;"	f	class:MtpDevice	access:private	signature:()
getDeviceVersion	mtp/MtpDevice.h	/^    void getDeviceVersion() $/;"	f	class:MtpDevice	access:private	signature:()
getFriendlyName	mtp/MtpDevice.h	/^    void getFriendlyName()$/;"	f	class:MtpDevice	access:private	signature:()
getModelName	mtp/MtpDevice.h	/^    void getModelName()$/;"	f	class:MtpDevice	access:private	signature:()
getRawImage	widgets/DeviceConsole.h	/^        bool getRawImage(const QString& in_path, QPixmap& in_pixmap)$/;"	f	class:DeviceConsole	access:private	signature:(const QString& in_path, QPixmap& in_pixmap)
getSerialNum	mtp/MtpDevice.h	/^    void getSerialNum()$/;"	f	class:MtpDevice	access:private	signature:()
getSyncPartner	mtp/MtpDevice.h	/^    void getSyncPartner()$/;"	f	class:MtpDevice	access:private	signature:()
headerData	widgets/DeviceDirModel.h	/^    QVariant headerData(int section, Qt::Orientation orientation, int role) const$/;"	f	class:DeviceDirModel	access:public	signature:(int section, Qt::Orientation orientation, int role) const
headerData	widgets/DeviceFileModel.h	/^    QVariant headerData(int section, Qt::Orientation orientation, int role) const$/;"	f	class:DeviceFileModel	access:public	signature:(int section, Qt::Orientation orientation, int role) const
image	mtp/BmpStructs.h	/^    Pixel image[128*128];$/;"	m	struct:Image	access:public
image	mtp/BmpStructs.h	/^    byte image[128][128];$/;"	m	struct:MonochromeImage	access:public
index	widgets/DeviceDirModel.h	/^    QModelIndex index (int row, int column, const QModelIndex& parent) const$/;"	f	class:DeviceDirModel	access:public	signature:(int row, int column, const QModelIndex& parent) const
index_t	mtp/types.h	/^typedef unsigned int index_t;$/;"	t
init	widgets/DeviceExplorer.h	/^    void init()$/;"	f	class:DeviceExplorer	access:private	signature:()
isSuccess	mtp/CommandCodes.h	/^    bool isSuccess()$/;"	f	struct:MtpUpdate	access:public	signature:()
isTerminal	mtp/MtpParent.h	/^    bool isTerminal (LIBMTP_error_number_t in_err)$/;"	f	class:MtpParent	access:protected	signature:(LIBMTP_error_number_t in_err)
main	main.cpp	/^int main(int argc, char* argv[])$/;"	f	signature:(int argc, char* argv[])
offset	mtp/BmpStructs.h	/^    unsigned int offset;      \/\/4$/;"	m	struct:BmpFileHeader	access:public
parent	widgets/DeviceDirModel.h	/^    QModelIndex parent (const QModelIndex &child) const$/;"	f	class:DeviceDirModel	access:public	signature:(const QModelIndex &child) const
processCommand	widgets/ConsoleWidget.h	/^    virtual void processCommand(const QString& in_cmd)$/;"	f	class:ConsoleWidget	access:public	signature:(const QString& in_cmd)
rawDevice	mtp/MtpDevice.h	/^    LIBMTP_mtpdevice_t* rawDevice()$/;"	f	class:MtpDevice	access:public	signature:()
refreshDirView	widgets/FileExplorer.h	/^    void refreshDirView ( void )$/;"	f	class:FileExplorer	access:public	signature:( void )
refreshFileView	widgets/FileExplorer.h	/^    void refreshFileView ( void )$/;"	f	class:FileExplorer	access:public	signature:( void )
reserved1	mtp/BmpStructs.h	/^    ushort reserved1; \/\/2$/;"	m	struct:BmpFileHeader	access:public
reserved2	mtp/BmpStructs.h	/^    ushort reserved2; \/\/2$/;"	m	struct:BmpFileHeader	access:public
resetRootImage	widgets/DeviceConsole.h	/^    void resetRootImage()$/;"	f	class:DeviceConsole	access:public	signature:()
resolveMtpType	mtp/FileNode.h	/^    LIBMTP_filetype_t resolveMtpType()$/;"	f	class:FileNode	access:private	signature:()
rowCount	widgets/DeviceDirModel.h	/^    int rowCount(const QModelIndex &parent) const$/;"	f	class:DeviceDirModel	access:public	signature:(const QModelIndex &parent) const
rowCount	widgets/DeviceFileModel.h	/^    int rowCount (const QModelIndex& ) const$/;"	f	class:DeviceFileModel	access:public	signature:(const QModelIndex& ) const
run	mtp/MtpThread.h	/^    void run()$/;"	f	class:MtpThread	access:public	signature:()
setDeviceFileView	widgets/FileView.cpp	/^void FileView::setDeviceFileView(DeviceFileView* in_devfileview)$/;"	f	class:FileView	signature:(DeviceFileView* in_devfileview)
setDeviceFileView	widgets/FileView.h	/^    void setDeviceFileView(DeviceFileView* in_devfileview);$/;"	p	class:FileView	access:public	signature:(DeviceFileView* in_devfileview)
setDirectoryFilter	widgets/DirFilter.h	/^    void setDirectoryFilter ( void )$/;"	f	class:DirFilter	access:public	signature:( void )
setFileFilter	widgets/DirFilter.h	/^    void setFileFilter ( void )$/;"	f	class:DirFilter	access:public	signature:( void )
setFileView	widgets/DeviceFileView.cpp	/^void DeviceFileView::setFileView (FileView* in_fileView)$/;"	f	class:DeviceFileView	signature:(FileView* in_fileView)
setFileView	widgets/DeviceFileView.h	/^    void setFileView (FileView* in_fileView);$/;"	p	class:DeviceFileView	access:public	signature:(FileView* in_fileView)
setupCommandLine	widgets/ConsoleWidget.h	/^    void setupCommandLine()$/;"	f	class:ConsoleWidget	access:private	signature:()
setupConnections	widgets/ConsoleWidget.h	/^    void setupConnections()$/;"	f	class:ConsoleWidget	access:private	signature:()
setupConnections	widgets/DeviceExplorer.h	/^    void setupConnections()$/;"	f	class:DeviceExplorer	access:private	signature:()
setupConnections	widgets/FileExplorer.h	/^    void setupConnections ( void )$/;"	f	class:FileExplorer	access:private	signature:( void )
setupConnections	widgets/QlixMainWindow.h	/^    void setupConnections ( void )$/;"	f	class:QlixMainWindow	access:private	signature:( void )
setupConsole	widgets/QlixMainWindow.h	/^    void setupConsole (void)$/;"	f	class:QlixMainWindow	access:private	signature:(void)
setupDeviceList	widgets/QlixMainWindow.h	/^    void setupDeviceList (void)$/;"	f	class:QlixMainWindow	access:private	signature:(void)
setupDirModel	widgets/FileExplorer.h	/^    void setupDirModel ( void )$/;"	f	class:FileExplorer	access:private	signature:( void )
setupDirView	widgets/DeviceExplorer.h	/^    void setupDirView ( void )$/;"	f	class:DeviceExplorer	access:private	signature:( void )
setupDirView	widgets/FileExplorer.h	/^    void setupDirView ( void )$/;"	f	class:FileExplorer	access:private	signature:( void )
setupEditor	widgets/ConsoleWidget.h	/^    void setupEditor()$/;"	f	class:ConsoleWidget	access:private	signature:()
setupFileList	widgets/QlixMainWindow.h	/^    void setupFileList (void)$/;"	f	class:QlixMainWindow	access:private	signature:(void)
setupFileModel	widgets/FileExplorer.h	/^    void setupFileModel()$/;"	f	class:FileExplorer	access:private	signature:()
setupFileView	widgets/DeviceExplorer.h	/^    void setupFileView ( void )$/;"	f	class:DeviceExplorer	access:private	signature:( void )
setupFileView	widgets/FileExplorer.h	/^    void setupFileView ( void )$/;"	f	class:FileExplorer	access:private	signature:( void )
setupFsWatch	widgets/FileExplorer.h	/^    void setupFsWatch()$/;"	f	class:FileExplorer	access:private	signature:()
setupLabels	widgets/DeviceConsole.h	/^        void setupLabels()$/;"	f	class:DeviceConsole	access:private	signature:()
setupLayoutAndSplits	widgets/QlixMainWindow.h	/^    void setupLayoutAndSplits ( void )$/;"	f	class:QlixMainWindow	access:private	signature:( void )
setupMenus	widgets/DeviceDirView.h	/^    void setupMenus (void)$/;"	f	class:DeviceDirView	access:public	signature:(void)
setupMenus	widgets/DeviceFileView.cpp	/^void DeviceFileView::setupMenus (void)$/;"	f	class:DeviceFileView	signature:(void)
setupMenus	widgets/DeviceFileView.h	/^    void setupMenus (void);$/;"	p	class:DeviceFileView	access:public	signature:(void)
setupMenus	widgets/DirView.h	/^    void setupMenus (void)$/;"	f	class:DirView	access:public	signature:(void)
setupMenus	widgets/FileView.cpp	/^void FileView::setupMenus (void)$/;"	f	class:FileView	signature:(void)
setupMenus	widgets/FileView.h	/^    void setupMenus (void);$/;"	p	class:FileView	access:public	signature:(void)
setupWidget	widgets/DeviceConsole.h	/^        void setupWidget()$/;"	f	class:DeviceConsole	access:private	signature:()
size	mtp/BmpStructs.h	/^    unsigned int size;   \/\/4$/;"	m	struct:BmpFileHeader	access:public
size_t	mtp/types.h	/^typedef unsigned int size_t;$/;"	t
sort	widgets/DeviceExplorer.h	/^    void sort (int idx)$/;"	f	class:DeviceExplorer	access:public	signature:(int idx)
sort	widgets/DeviceFileModel.h	/^    void sort ( int column = -1)$/;"	f	class:DeviceFileModel	access:public	signature:( int column = -1)
transferDir	widgets/DirView.h	/^    void transferDir ( void )$/;"	f	class:DirView	access:private	signature:( void )
transferFile	widgets/DeviceFileView.cpp	/^void DeviceFileView::transferFile ( void )$/;"	f	class:DeviceFileView	signature:( void )
transferFile	widgets/DeviceFileView.h	/^    void transferFile ( void );$/;"	p	class:DeviceFileView	access:private	signature:( void )
transferFile	widgets/FileView.cpp	/^void FileView::transferFile ( void )$/;"	f	class:FileView	signature:( void )
transferFile	widgets/FileView.h	/^    void transferFile (void);$/;"	p	class:FileView	access:private	signature:(void)
transferFolder	widgets/DeviceDirView.h	/^    void transferFolder ( void )$/;"	f	class:DeviceDirView	access:private	signature:( void )
type	mtp/BmpStructs.h	/^    unsigned short type; \/\/2$/;"	m	struct:BmpFileHeader	access:public
ubyte	mtp/BmpStructs.h	/^typedef unsigned char ubyte;$/;"	t
ubyte	mtp/types.h	/^typedef unsigned char ubyte;$/;"	t
ushort	mtp/BmpStructs.h	/^typedef unsigned short ushort;$/;"	t
~DeviceDirModel	widgets/DeviceDirModel.h	/^    ~DeviceDirModel ( void )$/;"	f	class:DeviceDirModel	access:public	signature:( void )
~DeviceExplorer	widgets/DeviceExplorer.h	/^    ~DeviceExplorer() { }$/;"	f	class:DeviceExplorer	access:public	signature:()
~DirNode	mtp/DirNode.h	/^    virtual ~DirNode ( void )$/;"	f	class:DirNode	access:public	signature:( void )
~FileExplorer	widgets/FileExplorer.h	/^    ~FileExplorer()$/;"	f	class:FileExplorer	access:public	signature:()
~Icon	mtp/Icon.h	/^    ~Icon ()$/;"	f	class:Icon	access:public	signature:()
~MtpDevice	mtp/MtpDevice.h	/^    ~MtpDevice()$/;"	f	class:MtpDevice	access:public	signature:()
~MtpPortal	mtp/MtpPortal.h	/^    ~MtpPortal()$/;"	f	class:MtpPortal	access:public	signature:()
~QlixMainWindow	widgets/QlixMainWindow.h	/^    ~QlixMainWindow()$/;"	f	class:QlixMainWindow	access:public	signature:()
