!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.5.4	//
AddFile	DirNode.cpp	/^void DirNode::AddFile(const FileNode& temp)$/;"	f	class:DirNode	signature:(const FileNode& temp)
AddFile	DirNode.h	/^    void AddFile(const FileNode& temp);$/;"	p	class:DirNode	access:public	signature:(const FileNode& temp)
AddFile	MtpFS.cpp	/^void MtpFS::AddFile (const FileNode& in_file)$/;"	f	class:MtpFS	signature:(const FileNode& in_file)
AddFile	MtpFS.h	/^    void AddFile (const FileNode& in_file);$/;"	p	class:MtpFS	access:public	signature:(const FileNode& in_file)
AddFolder	MtpFS.cpp	/^int MtpFS::AddFolder(uint32_t folderID, uint32_t parentID)$/;"	f	class:MtpFS	signature:(uint32_t folderID, uint32_t parentID)
AddFolder	MtpFS.h	/^    int AddFolder(uint32_t folderID, uint32_t parentID);$/;"	p	class:MtpFS	access:public	signature:(uint32_t folderID, uint32_t parentID)
AddSortedSubDirectory	DirNode.cpp	/^void DirNode::AddSortedSubDirectory (DirNode* in)$/;"	f	class:DirNode	signature:(DirNode* in)
AddSortedSubDirectory	DirNode.h	/^    void AddSortedSubDirectory (DirNode* in);$/;"	p	class:DirNode	access:public	signature:(DirNode* in)
AddSubDirectory	DirNode.cpp	/^void DirNode::AddSubDirectory( DirNode* in ) $/;"	f	class:DirNode	signature:( DirNode* in )
AddSubDirectory	DirNode.h	/^    void AddSubDirectory (DirNode* in);$/;"	p	class:DirNode	access:public	signature:(DirNode* in)
Alpha	BmpStructs.h	/^    byte Alpha;$/;"	m	struct:Pixel	access:public
BitCount	BmpStructs.h	/^    ushort BitCount;$/;"	m	struct:DibHeader	access:public
BitCount	BmpStructs.h	/^    ushort BitCount;$/;"	m	struct:IconDirEntry	access:public
Blue	BmpStructs.h	/^    byte Blue;$/;"	m	struct:PaletteEntry	access:public
Blue	BmpStructs.h	/^    byte Blue;$/;"	m	struct:Pixel	access:public
BmpFileHeader	BmpStructs.h	/^struct BmpFileHeader$/;"	s
BmpFileHeader::offset	BmpStructs.h	/^    unsigned int offset;      \/\/4$/;"	m	struct:BmpFileHeader	access:public
BmpFileHeader::reserved1	BmpStructs.h	/^    ushort reserved1; \/\/2$/;"	m	struct:BmpFileHeader	access:public
BmpFileHeader::reserved2	BmpStructs.h	/^    ushort reserved2; \/\/2$/;"	m	struct:BmpFileHeader	access:public
BmpFileHeader::size	BmpStructs.h	/^    unsigned int size;   \/\/4$/;"	m	struct:BmpFileHeader	access:public
BmpFileHeader::type	BmpStructs.h	/^    unsigned short type; \/\/2$/;"	m	struct:BmpFileHeader	access:public
ColorCount	BmpStructs.h	/^    ubyte ColorCount;$/;"	m	struct:IconDirEntry	access:public
Colors	BmpStructs.h	/^    int Colors;$/;"	m	struct:DibHeader	access:public
ComCode	CommandCodes.h	/^    MtpCommandCode ComCode;$/;"	m	struct:MtpCommand	access:public
ComCode	CommandCodes.h	/^    MtpCommandCode ComCode;$/;"	m	struct:MtpUpdate	access:public
Compression	BmpStructs.h	/^    int Compression;$/;"	m	struct:DibHeader	access:public
Connect	CommandCodes.h	/^    Connect,$/;"	e	enum:MtpCommandCode
Connect	MtpPortal.h	/^    void Connect()$/;"	f	class:MtpPortal	access:public	signature:()
ConnectDone	MtpThread.h	/^    void ConnectDone(MtpFS* FS);$/;"	p	class:MtpThread	access:public	signature:(MtpFS* FS)
Count	BmpStructs.h	/^    ushort Count;$/;"	m	struct:IconHeader	access:public
CreateFolder	CommandCodes.h	/^    CreateFolder,$/;"	e	enum:MtpCommandCode
CreateFolder	MtpDevice.cpp	/^uint32_t MtpDevice::CreateFolder (string in_FolderName, uint32_t in_parentID, int* newModelIndex)$/;"	f	class:MtpDevice	signature:(string in_FolderName, uint32_t in_parentID, int* newModelIndex)
CreateFolder	MtpDevice.h	/^    uint32_t CreateFolder (string in_FolderName, uint32_t in_parentID, int* newmodelindex);$/;"	p	class:MtpDevice	access:public	signature:(string in_FolderName, uint32_t in_parentID, int* newmodelindex)
CreateMapping	DirNode.cpp	/^void DirNode::CreateMapping (map <uint32_t, DirNode*>& in_map )$/;"	f	class:DirNode	signature:(map <uint32_t, DirNode*>& in_map )
CreateMapping	DirNode.h	/^    void CreateMapping (map <uint32_t, DirNode*>& in_map );$/;"	p	class:DirNode	access:public	signature:(map <uint32_t, DirNode*>& in_map )
DataOffset	BmpStructs.h	/^    int DataOffset;$/;"	m	struct:IconDirEntry	access:public
DataSize	BmpStructs.h	/^    count_t DataSize;$/;"	m	struct:IconDirEntry	access:public
Delete	CommandCodes.h	/^    Delete,$/;"	e	enum:MtpCommandCode
DeleteDirectoryEntry	MtpFS.cpp	/^void MtpFS::DeleteDirectoryEntry(uint32_t ID)$/;"	f	class:MtpFS	signature:(uint32_t ID)
DeleteDirectoryEntry	MtpFS.h	/^    void DeleteDirectoryEntry(uint32_t folder_id);$/;"	p	class:MtpFS	access:public	signature:(uint32_t folder_id)
DeleteFile	DirNode.cpp	/^void DirNode::DeleteFile (index_t id)$/;"	f	class:DirNode	signature:(index_t id)
DeleteFile	DirNode.h	/^    void DeleteFile(index_t id);$/;"	p	class:DirNode	access:public	signature:(index_t id)
DeleteFile	MtpFS.cpp	/^void MtpFS::DeleteFile (const FileNode& in_file)$/;"	f	class:MtpFS	signature:(const FileNode& in_file)
DeleteFile	MtpFS.h	/^    void DeleteFile (const FileNode& in_file);$/;"	p	class:MtpFS	access:public	signature:(const FileNode& in_file)
DeleteFolder	MtpFS.cpp	/^void MtpFS::DeleteFolder(uint32_t folder_id)$/;"	f	class:MtpFS	signature:(uint32_t folder_id)
DeleteFolder	MtpFS.h	/^    void DeleteFolder(uint32_t folder_id);$/;"	p	class:MtpFS	access:public	signature:(uint32_t folder_id)
DeleteObject	MtpDevice.cpp	/^bool MtpDevice::DeleteObject (uint32_t in_parentID, int in_FileID)$/;"	f	class:MtpDevice	signature:(uint32_t in_parentID, int in_FileID)
DeleteObject	MtpDevice.h	/^    bool DeleteObject(uint32_t in_parentID, int in_depth);$/;"	p	class:MtpDevice	access:public	signature:(uint32_t in_parentID, int in_depth)
DeleteSubDirectory	DirNode.cpp	/^void DirNode::DeleteSubDirectory(index_t id)$/;"	f	class:DirNode	signature:(index_t id)
DeleteSubDirectory	DirNode.h	/^    void DeleteSubDirectory(index_t idx);$/;"	p	class:DirNode	access:public	signature:(index_t idx)
Depth	CommandCodes.h	/^    int Depth;$/;"	m	struct:MtpUpdateDelete	access:public
DibHeader	BmpStructs.h	/^struct DibHeader$/;"	s
DibHeader::BitCount	BmpStructs.h	/^    ushort BitCount;$/;"	m	struct:DibHeader	access:public
DibHeader::Colors	BmpStructs.h	/^    int Colors;$/;"	m	struct:DibHeader	access:public
DibHeader::Compression	BmpStructs.h	/^    int Compression;$/;"	m	struct:DibHeader	access:public
DibHeader::HRes	BmpStructs.h	/^    int HRes;$/;"	m	struct:DibHeader	access:public
DibHeader::HeaderSize	BmpStructs.h	/^    int HeaderSize; \/\/size of header$/;"	m	struct:DibHeader	access:public
DibHeader::Height	BmpStructs.h	/^    int Height;$/;"	m	struct:DibHeader	access:public
DibHeader::ImportantColors	BmpStructs.h	/^    int ImportantColors;$/;"	m	struct:DibHeader	access:public
DibHeader::Planes	BmpStructs.h	/^    short Planes;$/;"	m	struct:DibHeader	access:public
DibHeader::RawImageSize	BmpStructs.h	/^    int RawImageSize;$/;"	m	struct:DibHeader	access:public
DibHeader::VRes	BmpStructs.h	/^    int VRes;$/;"	m	struct:DibHeader	access:public
DibHeader::Width	BmpStructs.h	/^    int Width;$/;"	m	struct:DibHeader	access:public
Dimensions	BmpStructs.h	/^struct Dimensions$/;"	s
Dimensions::Height	BmpStructs.h	/^    count_t Height;$/;"	m	struct:Dimensions	access:public
Dimensions::Width	BmpStructs.h	/^    count_t Width;$/;"	m	struct:Dimensions	access:public
DirName	CommandCodes.h	/^    QString DirName;$/;"	m	struct:MtpCommandTransferSystemFolder	access:public
DirNode	DirNode.cpp	/^DirNode::DirNode (LIBMTP_folder_t* in_folder,MtpFS* in_fs, count_t in_height)$/;"	f	class:DirNode	signature:(LIBMTP_folder_t* in_folder,MtpFS* in_fs, count_t in_height)
DirNode	DirNode.cpp	/^DirNode::DirNode(LIBMTP_folder_t* begin, MtpFS* in_fs ) :_currentDir(begin)$/;"	f	class:DirNode	signature:(LIBMTP_folder_t* begin, MtpFS* in_fs )
DirNode	DirNode.h	/^    DirNode (LIBMTP_folder_t* in_folder, MtpFS* in_fs, count_t in_height);$/;"	p	class:DirNode	access:public	signature:(LIBMTP_folder_t* in_folder, MtpFS* in_fs, count_t in_height)
DirNode	DirNode.h	/^    DirNode(LIBMTP_folder_t* begin, MtpFS* in_fs);$/;"	p	class:DirNode	access:public	signature:(LIBMTP_folder_t* begin, MtpFS* in_fs)
DirNode	DirNode.h	/^class DirNode$/;"	c
DirNode::AddFile	DirNode.cpp	/^void DirNode::AddFile(const FileNode& temp)$/;"	f	class:DirNode	signature:(const FileNode& temp)
DirNode::AddFile	DirNode.h	/^    void AddFile(const FileNode& temp);$/;"	p	class:DirNode	access:public	signature:(const FileNode& temp)
DirNode::AddSortedSubDirectory	DirNode.cpp	/^void DirNode::AddSortedSubDirectory (DirNode* in)$/;"	f	class:DirNode	signature:(DirNode* in)
DirNode::AddSortedSubDirectory	DirNode.h	/^    void AddSortedSubDirectory (DirNode* in);$/;"	p	class:DirNode	access:public	signature:(DirNode* in)
DirNode::AddSubDirectory	DirNode.cpp	/^void DirNode::AddSubDirectory( DirNode* in ) $/;"	f	class:DirNode	signature:( DirNode* in )
DirNode::AddSubDirectory	DirNode.h	/^    void AddSubDirectory (DirNode* in);$/;"	p	class:DirNode	access:public	signature:(DirNode* in)
DirNode::CreateMapping	DirNode.cpp	/^void DirNode::CreateMapping (map <uint32_t, DirNode*>& in_map )$/;"	f	class:DirNode	signature:(map <uint32_t, DirNode*>& in_map )
DirNode::CreateMapping	DirNode.h	/^    void CreateMapping (map <uint32_t, DirNode*>& in_map );$/;"	p	class:DirNode	access:public	signature:(map <uint32_t, DirNode*>& in_map )
DirNode::DeleteFile	DirNode.cpp	/^void DirNode::DeleteFile (index_t id)$/;"	f	class:DirNode	signature:(index_t id)
DirNode::DeleteFile	DirNode.h	/^    void DeleteFile(index_t id);$/;"	p	class:DirNode	access:public	signature:(index_t id)
DirNode::DeleteSubDirectory	DirNode.cpp	/^void DirNode::DeleteSubDirectory(index_t id)$/;"	f	class:DirNode	signature:(index_t id)
DirNode::DeleteSubDirectory	DirNode.h	/^    void DeleteSubDirectory(index_t idx);$/;"	p	class:DirNode	access:public	signature:(index_t idx)
DirNode::DirNode	DirNode.cpp	/^DirNode::DirNode (LIBMTP_folder_t* in_folder,MtpFS* in_fs, count_t in_height)$/;"	f	class:DirNode	signature:(LIBMTP_folder_t* in_folder,MtpFS* in_fs, count_t in_height)
DirNode::DirNode	DirNode.cpp	/^DirNode::DirNode(LIBMTP_folder_t* begin, MtpFS* in_fs ) :_currentDir(begin)$/;"	f	class:DirNode	signature:(LIBMTP_folder_t* begin, MtpFS* in_fs )
DirNode::DirNode	DirNode.h	/^    DirNode (LIBMTP_folder_t* in_folder, MtpFS* in_fs, count_t in_height);$/;"	p	class:DirNode	access:public	signature:(LIBMTP_folder_t* in_folder, MtpFS* in_fs, count_t in_height)
DirNode::DirNode	DirNode.h	/^    DirNode(LIBMTP_folder_t* begin, MtpFS* in_fs);$/;"	p	class:DirNode	access:public	signature:(LIBMTP_folder_t* begin, MtpFS* in_fs)
DirNode::DirectoryExists	DirNode.cpp	/^bool DirNode::DirectoryExists(const string& name)$/;"	f	class:DirNode	signature:(const string& name)
DirNode::DirectoryExists	DirNode.h	/^    bool DirectoryExists(const string& in_name);$/;"	p	class:DirNode	access:public	signature:(const string& in_name)
DirNode::FileExists	DirNode.cpp	/^bool DirNode::FileExists(const string& in_name)$/;"	f	class:DirNode	signature:(const string& in_name)
DirNode::FileExists	DirNode.h	/^    bool FileExists(const string& in_name);$/;"	p	class:DirNode	access:public	signature:(const string& in_name)
DirNode::FindFile	DirNode.cpp	/^bool DirNode::FindFile(const string& in_name, uint32_t* id)$/;"	f	class:DirNode	signature:(const string& in_name, uint32_t* id)
DirNode::FindFile	DirNode.h	/^    bool FindFile(const string& in_name, uint32_t* id);$/;"	p	class:DirNode	access:public	signature:(const string& in_name, uint32_t* id)
DirNode::GetFile	DirNode.cpp	/^FileNode DirNode::GetFile(count_t idx)$/;"	f	class:DirNode	signature:(count_t idx)
DirNode::GetFile	DirNode.h	/^    FileNode GetFile(count_t idx);$/;"	p	class:DirNode	access:public	signature:(count_t idx)
DirNode::GetFileCount	DirNode.cpp	/^count_t DirNode::GetFileCount()$/;"	f	class:DirNode	signature:()
DirNode::GetFileCount	DirNode.h	/^    count_t GetFileCount();$/;"	p	class:DirNode	access:public	signature:()
DirNode::GetID	DirNode.cpp	/^count_t DirNode::GetID () const$/;"	f	class:DirNode	signature:() const
DirNode::GetID	DirNode.h	/^    count_t GetID () const; $/;"	p	class:DirNode	access:public	signature:() const
DirNode::GetName	DirNode.cpp	/^string DirNode::GetName() const $/;"	f	class:DirNode	signature:() const
DirNode::GetName	DirNode.h	/^    string GetName() const;$/;"	p	class:DirNode	access:public	signature:() const
DirNode::GetParentDir	DirNode.cpp	/^DirNode* DirNode::GetParentDir() $/;"	f	class:DirNode	signature:()
DirNode::GetParentDir	DirNode.h	/^    DirNode* GetParentDir(); $/;"	p	class:DirNode	access:public	signature:()
DirNode::GetSortedOrder	DirNode.cpp	/^count_t DirNode::GetSortedOrder() $/;"	f	class:DirNode	signature:()
DirNode::GetSortedOrder	DirNode.h	/^    count_t GetSortedOrder(); $/;"	p	class:DirNode	access:public	signature:()
DirNode::GetSubDirectory	DirNode.cpp	/^DirNode* DirNode::GetSubDirectory (count_t in_index)$/;"	f	class:DirNode	signature:(count_t in_index)
DirNode::GetSubDirectory	DirNode.h	/^    DirNode* GetSubDirectory(count_t in_index);$/;"	p	class:DirNode	access:public	signature:(count_t in_index)
DirNode::GetSubTree	DirNode.cpp	/^void DirNode::GetSubTree(DirectoryIDList* in)$/;"	f	class:DirNode	signature:(DirectoryIDList* in)
DirNode::GetSubTree	DirNode.h	/^    void GetSubTree (DirectoryIDList*);$/;"	p	class:DirNode	access:public	signature:(DirectoryIDList*)
DirNode::SetName	DirNode.cpp	/^void DirNode::SetName(const string& in_str) $/;"	f	class:DirNode	signature:(const string& in_str)
DirNode::SetName	DirNode.h	/^    void SetName(const string& in_str); $/;"	p	class:DirNode	access:public	signature:(const string& in_str)
DirNode::SetParent	DirNode.cpp	/^void DirNode::SetParent (DirNode* in_parent)$/;"	f	class:DirNode	signature:(DirNode* in_parent)
DirNode::SetParent	DirNode.h	/^    void SetParent (DirNode* in_parent);$/;"	p	class:DirNode	access:public	signature:(DirNode* in_parent)
DirNode::SetSortedOrder	DirNode.cpp	/^void DirNode::SetSortedOrder(count_t in)$/;"	f	class:DirNode	signature:(count_t in)
DirNode::SetSortedOrder	DirNode.h	/^    void SetSortedOrder(count_t in); $/;"	p	class:DirNode	access:public	signature:(count_t in)
DirNode::SortDirectories	DirNode.cpp	/^void DirNode::SortDirectories()$/;"	f	class:DirNode	signature:()
DirNode::SortDirectories	DirNode.h	/^    void SortDirectories();$/;"	p	class:DirNode	access:public	signature:()
DirNode::SortFiles	DirNode.cpp	/^void DirNode::SortFiles (FileSortType sortType)$/;"	f	class:DirNode	signature:(FileSortType sortType)
DirNode::SortFiles	DirNode.h	/^    void SortFiles(FileSortType );$/;"	p	class:DirNode	access:public	signature:(FileSortType )
DirNode::SubDirectoryCount	DirNode.cpp	/^count_t DirNode::SubDirectoryCount() $/;"	f	class:DirNode	signature:()
DirNode::SubDirectoryCount	DirNode.h	/^    count_t SubDirectoryCount();$/;"	p	class:DirNode	access:public	signature:()
DirNode::_currentDir	DirNode.h	/^    MtpDir _currentDir;$/;"	m	class:DirNode	access:private
DirNode::_fileSystem	DirNode.h	/^    MtpFS* _fileSystem;$/;"	m	class:DirNode	access:private
DirNode::_files	DirNode.h	/^    vector <FileNode> _files; $/;"	m	class:DirNode	access:private
DirNode::_lastDirSort	DirNode.h	/^    FileSortType _lastDirSort;$/;"	m	class:DirNode	access:private
DirNode::_lastFileSort	DirNode.h	/^    FileSortType _lastFileSort;$/;"	m	class:DirNode	access:private
DirNode::_parent	DirNode.h	/^    DirNode* _parent;$/;"	m	class:DirNode	access:private
DirNode::_subDirectories	DirNode.h	/^    vector <DirNode*> _subDirectories;$/;"	m	class:DirNode	access:private
DirNode::compareDirNames	DirNode.cpp	/^bool DirNode::compareDirNames(DirNode* one, DirNode* two)$/;"	f	class:DirNode	signature:(DirNode* one, DirNode* two)
DirNode::compareDirNames	DirNode.h	/^    static bool compareDirNames(DirNode* one, DirNode* two);$/;"	p	class:DirNode	access:private	signature:(DirNode* one, DirNode* two)
DirNode::compareFileNames	DirNode.cpp	/^bool DirNode::compareFileNames(FileNode one, FileNode two)$/;"	f	class:DirNode	signature:(FileNode one, FileNode two)
DirNode::compareFileNames	DirNode.h	/^    static bool compareFileNames(FileNode one, FileNode two);$/;"	p	class:DirNode	access:private	signature:(FileNode one, FileNode two)
DirNode::compareFileSizes	DirNode.cpp	/^bool DirNode::compareFileSizes(FileNode one, FileNode two)$/;"	f	class:DirNode	signature:(FileNode one, FileNode two)
DirNode::compareFileSizes	DirNode.h	/^    static bool compareFileSizes(FileNode one, FileNode two);$/;"	p	class:DirNode	access:private	signature:(FileNode one, FileNode two)
DirNode::deleteAllSubDirectories	DirNode.cpp	/^void DirNode::deleteAllSubDirectories()$/;"	f	class:DirNode	signature:()
DirNode::deleteAllSubDirectories	DirNode.h	/^    void deleteAllSubDirectories();$/;"	p	class:DirNode	access:private	signature:()
DirNode::discoverChildren	DirNode.cpp	/^void DirNode::discoverChildren(LIBMTP_folder_t* in_folder)$/;"	f	class:DirNode	signature:(LIBMTP_folder_t* in_folder)
DirNode::discoverChildren	DirNode.h	/^    void discoverChildren(LIBMTP_folder_t* in_folder);$/;"	p	class:DirNode	access:private	signature:(LIBMTP_folder_t* in_folder)
DirNode::shallowDirectorySort	DirNode.cpp	/^void DirNode::shallowDirectorySort()$/;"	f	class:DirNode	signature:()
DirNode::shallowDirectorySort	DirNode.h	/^    void shallowDirectorySort();$/;"	p	class:DirNode	access:private	signature:()
DirNode::sortFileNamesDown	DirNode.cpp	/^void DirNode::sortFileNamesDown()$/;"	f	class:DirNode	signature:()
DirNode::sortFileNamesDown	DirNode.h	/^    void sortFileNamesDown();$/;"	p	class:DirNode	access:private	signature:()
DirNode::sortFileNamesUp	DirNode.cpp	/^void DirNode::sortFileNamesUp()$/;"	f	class:DirNode	signature:()
DirNode::sortFileNamesUp	DirNode.h	/^    void sortFileNamesUp();$/;"	p	class:DirNode	access:private	signature:()
DirNode::sortSizeDown	DirNode.cpp	/^void DirNode::sortSizeDown()$/;"	f	class:DirNode	signature:()
DirNode::sortSizeDown	DirNode.h	/^    void sortSizeDown();$/;"	p	class:DirNode	access:private	signature:()
DirNode::sortSizeUp	DirNode.cpp	/^void DirNode::sortSizeUp()$/;"	f	class:DirNode	signature:()
DirNode::sortSizeUp	DirNode.h	/^    void sortSizeUp();$/;"	p	class:DirNode	access:private	signature:()
DirNode::~DirNode	DirNode.cpp	/^DirNode::~DirNode ( void )$/;"	f	class:DirNode	signature:( void )
DirNode::~DirNode	DirNode.h	/^    ~DirNode ( void );$/;"	p	class:DirNode	access:public	signature:( void )
DirectoryAdded	MtpThread.h	/^    void DirectoryAdded(DirNode* parent, index_t newfolderlocation);$/;"	p	class:MtpThread	access:public	signature:(DirNode* parent, index_t newfolderlocation)
DirectoryExists	DirNode.cpp	/^bool DirNode::DirectoryExists(const string& name)$/;"	f	class:DirNode	signature:(const string& name)
DirectoryExists	DirNode.h	/^    bool DirectoryExists(const string& in_name);$/;"	p	class:DirNode	access:public	signature:(const string& in_name)
DirectoryExists	MtpFS.cpp	/^bool MtpFS::DirectoryExists(uint32_t parent, const string& name)$/;"	f	class:MtpFS	signature:(uint32_t parent, const string& name)
DirectoryExists	MtpFS.h	/^    bool DirectoryExists(uint32_t parent, const string& name);$/;"	p	class:MtpFS	access:public	signature:(uint32_t parent, const string& name)
DirectoryIDList	types.h	/^typedef vector<count_t> DirectoryIDList;$/;"	t
DirectoryRemoved	MtpThread.h	/^    void DirectoryRemoved(bool, index_t);$/;"	p	class:MtpThread	access:public	signature:(bool, index_t)
Disconnect	CommandCodes.h	/^    Disconnect,$/;"	e	enum:MtpCommandCode
Disconnect	MtpPortal.h	/^    void Disconnect()$/;"	f	class:MtpPortal	access:public	signature:()
DumpInformation	MtpDevice.cpp	/^void MtpDevice::DumpInformation ( void )$/;"	f	class:MtpDevice	signature:( void )
DumpInformation	MtpDevice.h	/^    void DumpInformation ( void );$/;"	p	class:MtpDevice	access:public	signature:( void )
Extract	Icon.h	/^    void Extract(void* temp)$/;"	f	class:Icon	access:public	signature:(void* temp)
FileExists	DirNode.cpp	/^bool DirNode::FileExists(const string& in_name)$/;"	f	class:DirNode	signature:(const string& in_name)
FileExists	DirNode.h	/^    bool FileExists(const string& in_name);$/;"	p	class:DirNode	access:public	signature:(const string& in_name)
FileID	CommandCodes.h	/^    int FileID;$/;"	m	struct:MtpCommandDelete	access:public
FileName	CommandCodes.h	/^    string FileName;$/;"	m	struct:MtpCommandGetFile	access:public
FileNode	FileNode.h	/^    FileNode (const QFileInfo& in_file, uint32_t in_parentID)$/;"	f	class:FileNode	access:public	signature:(const QFileInfo& in_file, uint32_t in_parentID)
FileNode	FileNode.h	/^    FileNode(LIBMTP_file_t* in_head, count_t in_height)$/;"	f	class:FileNode	access:public	signature:(LIBMTP_file_t* in_head, count_t in_height)
FileNode	FileNode.h	/^class FileNode$/;"	c
FileNode::FileNode	FileNode.h	/^    FileNode (const QFileInfo& in_file, uint32_t in_parentID)$/;"	f	class:FileNode	access:public	signature:(const QFileInfo& in_file, uint32_t in_parentID)
FileNode::FileNode	FileNode.h	/^    FileNode(LIBMTP_file_t* in_head, count_t in_height)$/;"	f	class:FileNode	access:public	signature:(LIBMTP_file_t* in_head, count_t in_height)
FileNode::GetFileType	FileNode.h	/^    QString GetFileType (const QString& in_str) \/\/ standardize the string$/;"	f	class:FileNode	access:private	signature:(const QString& in_str)
FileNode::GetHeight	FileNode.h	/^    count_t GetHeight()$/;"	f	class:FileNode	access:public	signature:()
FileNode::GetID	FileNode.h	/^    uint32_t GetID() const$/;"	f	class:FileNode	access:public	signature:() const
FileNode::GetMtpType	FileNode.h	/^    LIBMTP_filetype_t GetMtpType()$/;"	f	class:FileNode	access:public	signature:()
FileNode::GetMtpType	FileNode.h	/^    static LIBMTP_filetype_t GetMtpType(const QString& in_suffix)$/;"	f	class:FileNode	access:public	signature:(const QString& in_suffix)
FileNode::GetMtpType	FileNode.h	/^    static string GetMtpType(LIBMTP_filetype_t in)$/;"	f	class:FileNode	access:public	signature:(LIBMTP_filetype_t in)
FileNode::GetName	FileNode.h	/^    string GetName() const$/;"	f	class:FileNode	access:public	signature:() const
FileNode::GetParentID	FileNode.h	/^    uint32_t GetParentID() const \/\/need to rename this$/;"	f	class:FileNode	access:public	signature:() const
FileNode::GetPath	FileNode.h	/^    string GetPath() const$/;"	f	class:FileNode	access:public	signature:() const
FileNode::GetSize	FileNode.h	/^    const uint64_t GetSize()$/;"	f	class:FileNode	access:public	signature:()
FileNode::GetType	FileNode.h	/^    string GetType() const$/;"	f	class:FileNode	access:public	signature:() const
FileNode::Sanity	FileNode.h	/^    void Sanity (LIBMTP_filetype_t in_type)$/;"	f	class:FileNode	access:public	signature:(LIBMTP_filetype_t in_type)
FileNode::SetHeight	FileNode.h	/^    void SetHeight(count_t in_height)$/;"	f	class:FileNode	access:public	signature:(count_t in_height)
FileNode::_fileSize	FileNode.h	/^    uint64_t _fileSize;$/;"	m	class:FileNode	access:private
FileNode::_height	FileNode.h	/^    count_t _height;$/;"	m	class:FileNode	access:private
FileNode::_itemId	FileNode.h	/^    uint32_t _itemId;$/;"	m	class:FileNode	access:private
FileNode::_name	FileNode.h	/^    string   _name;$/;"	m	class:FileNode	access:private
FileNode::_parentId	FileNode.h	/^    uint32_t _parentId;$/;"	m	class:FileNode	access:private
FileNode::_path	FileNode.h	/^    string _path; \/\/only used to transfer..$/;"	m	class:FileNode	access:private
FileNode::_type	FileNode.h	/^    QString _type;$/;"	m	class:FileNode	access:private
FileNode::standardizeType	FileNode.h	/^    QString standardizeType (const QString in)$/;"	f	class:FileNode	access:private	signature:(const QString in)
FileNode::stringToType	FileNode.h	/^    LIBMTP_filetype_t stringToType()$/;"	f	class:FileNode	access:private	signature:()
FileNode::stringToType	FileNode.h	/^    static LIBMTP_filetype_t stringToType(const string& in_type)$/;"	f	class:FileNode	access:private	signature:(const string& in_type)
FileNode::typeToString	FileNode.h	/^    static string typeToString (LIBMTP_filetype_t in_type)$/;"	f	class:FileNode	access:private	signature:(LIBMTP_filetype_t in_type)
FileRemoved	MtpThread.h	/^    void FileRemoved(bool, index_t, index_t);$/;"	p	class:MtpThread	access:public	signature:(bool, index_t, index_t)
FileSortType	types.h	/^enum FileSortType$/;"	g
FileTransferDone	MtpThread.h	/^    void FileTransferDone(bool);$/;"	p	class:MtpThread	access:public	signature:(bool)
Files	CommandCodes.h	/^    QFileInfoList Files;$/;"	m	struct:MtpCommandTransferSystemFolder	access:public
FindBestImage	Icon.h	/^    void FindBestImage() $/;"	f	class:Icon	access:private	signature:()
FindFile	DirNode.cpp	/^bool DirNode::FindFile(const string& in_name, uint32_t* id)$/;"	f	class:DirNode	signature:(const string& in_name, uint32_t* id)
FindFile	DirNode.h	/^    bool FindFile(const string& in_name, uint32_t* id);$/;"	p	class:DirNode	access:public	signature:(const string& in_name, uint32_t* id)
FindRootImage	MtpFS.cpp	/^bool MtpFS::FindRootImage( uint32_t* idOut)$/;"	f	class:MtpFS	signature:( uint32_t* idOut)
FindRootImage	MtpFS.h	/^    bool FindRootImage( uint32_t* idOut);$/;"	p	class:MtpFS	access:public	signature:( uint32_t* idOut)
FolderID	CommandCodes.h	/^    uint32_t FolderID;$/;"	m	struct:MtpCommandDelete	access:public
FolderID	CommandCodes.h	/^    uint32_t FolderID;$/;"	m	struct:MtpUpdateDelete	access:public
FolderID	CommandCodes.h	/^    uint32_t FolderID;$/;"	m	struct:MtpUpdateTransfer	access:public
FolderId	MtpDir.h	/^    uint32_t FolderId;$/;"	m	class:MtpDir	access:public
GetBestImageSize	Icon.h	/^    count_t GetBestImageSize()$/;"	f	class:Icon	access:public	signature:()
GetCommand	CommandCodes.h	/^    MtpCommandCode GetCommand()$/;"	f	struct:MtpCommand	access:public	signature:()
GetCommand	CommandCodes.h	/^    MtpCommandCode GetCommand()$/;"	f	struct:MtpUpdate	access:public	signature:()
GetDevice	MtpPortal.h	/^    MtpDevice* GetDevice ( void )$/;"	f	class:MtpPortal	access:public	signature:( void )
GetDeviceInfo	CommandCodes.h	/^    GetDeviceInfo,$/;"	e	enum:MtpCommandCode
GetDimensions	Icon.h	/^    Dimensions GetDimensions()$/;"	f	class:Icon	access:public	signature:()
GetDirMetaData	CommandCodes.h	/^    GetDirMetaData,$/;"	e	enum:MtpCommandCode
GetDirectory	MtpFS.cpp	/^DirNode* MtpFS::GetDirectory (DirNode* in_parent, uint32_t in_index)$/;"	f	class:MtpFS	signature:(DirNode* in_parent, uint32_t in_index)
GetDirectory	MtpFS.cpp	/^DirNode* MtpFS::GetDirectory (uint32_t in_id)$/;"	f	class:MtpFS	signature:(uint32_t in_id)
GetDirectory	MtpFS.h	/^    DirNode* GetDirectory (DirNode* in_parent, uint32_t in_index);$/;"	p	class:MtpFS	access:public	signature:(DirNode* in_parent, uint32_t in_index)
GetDirectory	MtpFS.h	/^    DirNode* GetDirectory (uint32_t in_id);$/;"	p	class:MtpFS	access:public	signature:(uint32_t in_id)
GetDirectoryByName	MtpFS.cpp	/^string MtpFS::GetDirectoryByName(uint32_t in_id)$/;"	f	class:MtpFS	signature:(uint32_t in_id)
GetDirectoryByName	MtpFS.h	/^    string GetDirectoryByName(uint32_t in_id);$/;"	p	class:MtpFS	access:public	signature:(uint32_t in_id)
GetErrors	MtpParent.h	/^    void GetErrors (LIBMTP_mtpdevice_t* in_device)$/;"	f	class:MtpParent	access:public	signature:(LIBMTP_mtpdevice_t* in_device)
GetFile	CommandCodes.h	/^    GetFile,$/;"	e	enum:MtpCommandCode
GetFile	DirNode.cpp	/^FileNode DirNode::GetFile(count_t idx)$/;"	f	class:DirNode	signature:(count_t idx)
GetFile	DirNode.h	/^    FileNode GetFile(count_t idx);$/;"	p	class:DirNode	access:public	signature:(count_t idx)
GetFileCount	DirNode.cpp	/^count_t DirNode::GetFileCount()$/;"	f	class:DirNode	signature:()
GetFileCount	DirNode.h	/^    count_t GetFileCount();$/;"	p	class:DirNode	access:public	signature:()
GetFileFromDevice	MtpDevice.cpp	/^bool MtpDevice::GetFileFromDevice (uint32_t in_ParentID, const string& target)$/;"	f	class:MtpDevice	signature:(uint32_t in_ParentID, const string& target)
GetFileFromDevice	MtpDevice.h	/^    bool GetFileFromDevice(uint32_t fileID, const string& target); $/;"	p	class:MtpDevice	access:public	signature:(uint32_t fileID, const string& target)
GetFileMetaData	CommandCodes.h	/^    GetFileMetaData,$/;"	e	enum:MtpCommandCode
GetFileSystem	MtpDevice.cpp	/^MtpFS* MtpDevice::GetFileSystem ( void )$/;"	f	class:MtpDevice	signature:( void )
GetFileSystem	MtpDevice.h	/^    MtpFS* GetFileSystem ( void );$/;"	p	class:MtpDevice	access:public	signature:( void )
GetFileType	FileNode.h	/^    QString GetFileType (const QString& in_str) \/\/ standardize the string$/;"	f	class:FileNode	access:private	signature:(const QString& in_str)
GetFolders	MtpDevice.cpp	/^void MtpDevice::GetFolders ( void )$/;"	f	class:MtpDevice	signature:( void )
GetFolders	MtpDevice.h	/^    void GetFolders ( void );$/;"	p	class:MtpDevice	access:public	signature:( void )
GetHeader	Icon.h	/^    IconHeader* GetHeader ( void )$/;"	f	class:Icon	access:public	signature:( void )
GetHeight	FileNode.h	/^    count_t GetHeight()$/;"	f	class:FileNode	access:public	signature:()
GetID	DirNode.cpp	/^count_t DirNode::GetID () const$/;"	f	class:DirNode	signature:() const
GetID	DirNode.h	/^    count_t GetID () const; $/;"	p	class:DirNode	access:public	signature:() const
GetID	FileNode.h	/^    uint32_t GetID() const$/;"	f	class:FileNode	access:public	signature:() const
GetMtpType	FileNode.h	/^    LIBMTP_filetype_t GetMtpType()$/;"	f	class:FileNode	access:public	signature:()
GetMtpType	FileNode.h	/^    static LIBMTP_filetype_t GetMtpType(const QString& in_suffix)$/;"	f	class:FileNode	access:public	signature:(const QString& in_suffix)
GetMtpType	FileNode.h	/^    static string GetMtpType(LIBMTP_filetype_t in)$/;"	f	class:FileNode	access:public	signature:(LIBMTP_filetype_t in)
GetName	DirNode.cpp	/^string DirNode::GetName() const $/;"	f	class:DirNode	signature:() const
GetName	DirNode.h	/^    string GetName() const;$/;"	p	class:DirNode	access:public	signature:() const
GetName	FileNode.h	/^    string GetName() const$/;"	f	class:FileNode	access:public	signature:() const
GetParentDir	DirNode.cpp	/^DirNode* DirNode::GetParentDir() $/;"	f	class:DirNode	signature:()
GetParentDir	DirNode.h	/^    DirNode* GetParentDir(); $/;"	p	class:DirNode	access:public	signature:()
GetParentID	FileNode.h	/^    uint32_t GetParentID() const \/\/need to rename this$/;"	f	class:FileNode	access:public	signature:() const
GetPath	FileNode.h	/^    string GetPath() const$/;"	f	class:FileNode	access:public	signature:() const
GetRoot	MtpFS.cpp	/^DirNode* MtpFS::GetRoot()$/;"	f	class:MtpFS	signature:()
GetRoot	MtpFS.h	/^    DirNode* GetRoot();$/;"	p	class:MtpFS	access:public	signature:()
GetRootFileCount	MtpFS.cpp	/^count_t MtpFS::GetRootFileCount()$/;"	f	class:MtpFS	signature:()
GetRootFileCount	MtpFS.h	/^    count_t GetRootFileCount();$/;"	p	class:MtpFS	access:public	signature:()
GetSampleData	CommandCodes.h	/^    GetSampleData,$/;"	e	enum:MtpCommandCode
GetSize	FileNode.h	/^    const uint64_t GetSize()$/;"	f	class:FileNode	access:public	signature:()
GetSortedOrder	DirNode.cpp	/^count_t DirNode::GetSortedOrder() $/;"	f	class:DirNode	signature:()
GetSortedOrder	DirNode.h	/^    count_t GetSortedOrder(); $/;"	p	class:DirNode	access:public	signature:()
GetSortedOrder	MtpFS.cpp	/^count_t MtpFS::GetSortedOrder(uint32_t in_id)$/;"	f	class:MtpFS	signature:(uint32_t in_id)
GetSortedOrder	MtpFS.h	/^    count_t GetSortedOrder(uint32_t in_id);$/;"	p	class:MtpFS	access:public	signature:(uint32_t in_id)
GetSubDirectory	DirNode.cpp	/^DirNode* DirNode::GetSubDirectory (count_t in_index)$/;"	f	class:DirNode	signature:(count_t in_index)
GetSubDirectory	DirNode.h	/^    DirNode* GetSubDirectory(count_t in_index);$/;"	p	class:DirNode	access:public	signature:(count_t in_index)
GetSubTree	DirNode.cpp	/^void DirNode::GetSubTree(DirectoryIDList* in)$/;"	f	class:DirNode	signature:(DirectoryIDList* in)
GetSubTree	DirNode.h	/^    void GetSubTree (DirectoryIDList*);$/;"	p	class:DirNode	access:public	signature:(DirectoryIDList*)
GetType	FileNode.h	/^    string GetType() const$/;"	f	class:FileNode	access:public	signature:() const
Green	BmpStructs.h	/^    byte Green;$/;"	m	struct:PaletteEntry	access:public
Green	BmpStructs.h	/^    byte Green;$/;"	m	struct:Pixel	access:public
HRes	BmpStructs.h	/^    int HRes;$/;"	m	struct:DibHeader	access:public
HeaderSize	BmpStructs.h	/^    int HeaderSize; \/\/size of header$/;"	m	struct:DibHeader	access:public
Height	BmpStructs.h	/^    count_t Height;$/;"	m	struct:Dimensions	access:public
Height	BmpStructs.h	/^    int Height;$/;"	m	struct:DibHeader	access:public
Height	BmpStructs.h	/^    ubyte Height;$/;"	m	struct:IconDirEntry	access:public
ID	CommandCodes.h	/^    uint32_t ID;$/;"	m	struct:MtpCommandGetFile	access:public
Icon	Icon.h	/^    Icon (const void* in_b)$/;"	f	class:Icon	access:public	signature:(const void* in_b)
Icon	Icon.h	/^class Icon$/;"	c
Icon::Extract	Icon.h	/^    void Extract(void* temp)$/;"	f	class:Icon	access:public	signature:(void* temp)
Icon::FindBestImage	Icon.h	/^    void FindBestImage() $/;"	f	class:Icon	access:private	signature:()
Icon::GetBestImageSize	Icon.h	/^    count_t GetBestImageSize()$/;"	f	class:Icon	access:public	signature:()
Icon::GetDimensions	Icon.h	/^    Dimensions GetDimensions()$/;"	f	class:Icon	access:public	signature:()
Icon::GetHeader	Icon.h	/^    IconHeader* GetHeader ( void )$/;"	f	class:Icon	access:public	signature:( void )
Icon::Icon	Icon.h	/^    Icon (const void* in_b)$/;"	f	class:Icon	access:public	signature:(const void* in_b)
Icon::IsValid	Icon.h	/^    bool IsValid()$/;"	f	class:Icon	access:public	signature:()
Icon::LowLevelExtract	Icon.h	/^    void LowLevelExtract()$/;"	f	class:Icon	access:private	signature:()
Icon::PopulateImages	Icon.h	/^    void PopulateImages ( void )$/;"	f	class:Icon	access:public	signature:( void )
Icon::ReadImages	Icon.h	/^    void ReadImages()$/;"	f	class:Icon	access:public	signature:()
Icon::_bestImage	Icon.h	/^    index_t _bestImage;$/;"	m	class:Icon	access:private
Icon::_bestImageDepth	Icon.h	/^    count_t _bestImageDepth;$/;"	m	class:Icon	access:private
Icon::_bestImageDimensions	Icon.h	/^    Dimensions _bestImageDimensions;$/;"	m	class:Icon	access:private
Icon::_bestImagePtr	Icon.h	/^    byte* _bestImagePtr;$/;"	m	class:Icon	access:private
Icon::_bestImageSize	Icon.h	/^    count_t _bestImageSize;$/;"	m	class:Icon	access:private
Icon::_file	Icon.h	/^    byte* _file;$/;"	m	class:Icon	access:private
Icon::_header	Icon.h	/^    IconHeader* _header;$/;"	m	class:Icon	access:private
Icon::_iconList	Icon.h	/^    vector <IconDirEntry*> _iconList;$/;"	m	class:Icon	access:private
Icon::_isValid	Icon.h	/^    bool _isValid;$/;"	m	class:Icon	access:private
Icon::~Icon	Icon.h	/^    ~Icon ()$/;"	f	class:Icon	access:public	signature:()
IconDirEntry	BmpStructs.h	/^struct IconDirEntry$/;"	s
IconDirEntry::BitCount	BmpStructs.h	/^    ushort BitCount;$/;"	m	struct:IconDirEntry	access:public
IconDirEntry::ColorCount	BmpStructs.h	/^    ubyte ColorCount;$/;"	m	struct:IconDirEntry	access:public
IconDirEntry::DataOffset	BmpStructs.h	/^    int DataOffset;$/;"	m	struct:IconDirEntry	access:public
IconDirEntry::DataSize	BmpStructs.h	/^    count_t DataSize;$/;"	m	struct:IconDirEntry	access:public
IconDirEntry::Height	BmpStructs.h	/^    ubyte Height;$/;"	m	struct:IconDirEntry	access:public
IconDirEntry::Planes	BmpStructs.h	/^    short Planes;$/;"	m	struct:IconDirEntry	access:public
IconDirEntry::Reserved	BmpStructs.h	/^    byte Reserved;$/;"	m	struct:IconDirEntry	access:public
IconDirEntry::Width	BmpStructs.h	/^    ubyte Width;$/;"	m	struct:IconDirEntry	access:public
IconHeader	BmpStructs.h	/^struct IconHeader$/;"	s
IconHeader::Count	BmpStructs.h	/^    ushort Count;$/;"	m	struct:IconHeader	access:public
IconHeader::Reserved	BmpStructs.h	/^    short Reserved;$/;"	m	struct:IconHeader	access:public
IconHeader::Type	BmpStructs.h	/^    short Type;$/;"	m	struct:IconHeader	access:public
Image	BmpStructs.h	/^struct Image$/;"	s
Image::image	BmpStructs.h	/^    Pixel image[128*128];$/;"	m	struct:Image	access:public
ImportantColors	BmpStructs.h	/^    int ImportantColors;$/;"	m	struct:DibHeader	access:public
Info	CommandCodes.h	/^    MtpDeviceInfo Info;$/;"	m	struct:MtpUpdateDeviceInfo	access:public
InsertFileList	MtpFS.cpp	/^void MtpFS::InsertFileList (LIBMTP_file_t* in_rootFile)$/;"	f	class:MtpFS	signature:(LIBMTP_file_t* in_rootFile)
InsertFileList	MtpFS.h	/^    void InsertFileList (LIBMTP_file_t* in_rootFile);$/;"	p	class:MtpFS	access:public	signature:(LIBMTP_file_t* in_rootFile)
IsConnected	MtpPortal.h	/^    bool IsConnected()$/;"	f	class:MtpPortal	access:public	signature:()
IsRootImage	CommandCodes.h	/^    bool IsRootImage;$/;"	m	struct:MtpCommandGetFile	access:public
IsValid	Icon.h	/^    bool IsValid()$/;"	f	class:Icon	access:public	signature:()
IssueCommand	MtpThread.cpp	/^void MtpThread::IssueCommand (MtpCommand* in_command)$/;"	f	class:MtpThread	signature:(MtpCommand* in_command)
IssueCommand	MtpThread.h	/^    void IssueCommand (MtpCommand* in_command);$/;"	p	class:MtpThread	access:public	signature:(MtpCommand* in_command)
LowLevelExtract	Icon.h	/^    void LowLevelExtract()$/;"	f	class:Icon	access:private	signature:()
MonochromeImage	BmpStructs.h	/^struct MonochromeImage$/;"	s
MonochromeImage::image	BmpStructs.h	/^    byte image[128][128];$/;"	m	struct:MonochromeImage	access:public
MtpCommand	CommandCodes.h	/^struct MtpCommand$/;"	s
MtpCommand::ComCode	CommandCodes.h	/^    MtpCommandCode ComCode;$/;"	m	struct:MtpCommand	access:public
MtpCommand::GetCommand	CommandCodes.h	/^    MtpCommandCode GetCommand()$/;"	f	struct:MtpCommand	access:public	signature:()
MtpCommandCode	CommandCodes.h	/^enum MtpCommandCode$/;"	g
MtpCommandConnect	CommandCodes.h	/^    MtpCommandConnect (void )$/;"	f	struct:MtpCommandConnect	access:public	signature:(void )
MtpCommandConnect	CommandCodes.h	/^struct MtpCommandConnect : MtpCommand$/;"	s	inherits:MtpCommand
MtpCommandConnect::MtpCommandConnect	CommandCodes.h	/^    MtpCommandConnect (void )$/;"	f	struct:MtpCommandConnect	access:public	signature:(void )
MtpCommandDelete	CommandCodes.h	/^    MtpCommandDelete (uint32_t in_Folderid, int in_FileID)$/;"	f	struct:MtpCommandDelete	access:public	signature:(uint32_t in_Folderid, int in_FileID)
MtpCommandDelete	CommandCodes.h	/^struct MtpCommandDelete : MtpCommand$/;"	s	inherits:MtpCommand
MtpCommandDelete::FileID	CommandCodes.h	/^    int FileID;$/;"	m	struct:MtpCommandDelete	access:public
MtpCommandDelete::FolderID	CommandCodes.h	/^    uint32_t FolderID;$/;"	m	struct:MtpCommandDelete	access:public
MtpCommandDelete::MtpCommandDelete	CommandCodes.h	/^    MtpCommandDelete (uint32_t in_Folderid, int in_FileID)$/;"	f	struct:MtpCommandDelete	access:public	signature:(uint32_t in_Folderid, int in_FileID)
MtpCommandDisconnect	CommandCodes.h	/^    MtpCommandDisconnect ( void )$/;"	f	struct:MtpCommandDisconnect	access:public	signature:( void )
MtpCommandDisconnect	CommandCodes.h	/^struct MtpCommandDisconnect : MtpCommand$/;"	s	inherits:MtpCommand
MtpCommandDisconnect::MtpCommandDisconnect	CommandCodes.h	/^    MtpCommandDisconnect ( void )$/;"	f	struct:MtpCommandDisconnect	access:public	signature:( void )
MtpCommandGetDeviceInfo	CommandCodes.h	/^    MtpCommandGetDeviceInfo ( void )$/;"	f	struct:MtpCommandGetDeviceInfo	access:public	signature:( void )
MtpCommandGetDeviceInfo	CommandCodes.h	/^struct MtpCommandGetDeviceInfo : MtpCommand$/;"	s	inherits:MtpCommand
MtpCommandGetDeviceInfo::MtpCommandGetDeviceInfo	CommandCodes.h	/^    MtpCommandGetDeviceInfo ( void )$/;"	f	struct:MtpCommandGetDeviceInfo	access:public	signature:( void )
MtpCommandGetFile	CommandCodes.h	/^    MtpCommandGetFile (uint32_t file_id, const string& in_FileName)$/;"	f	struct:MtpCommandGetFile	access:public	signature:(uint32_t file_id, const string& in_FileName)
MtpCommandGetFile	CommandCodes.h	/^struct MtpCommandGetFile : MtpCommand$/;"	s	inherits:MtpCommand
MtpCommandGetFile::FileName	CommandCodes.h	/^    string FileName;$/;"	m	struct:MtpCommandGetFile	access:public
MtpCommandGetFile::ID	CommandCodes.h	/^    uint32_t ID;$/;"	m	struct:MtpCommandGetFile	access:public
MtpCommandGetFile::IsRootImage	CommandCodes.h	/^    bool IsRootImage;$/;"	m	struct:MtpCommandGetFile	access:public
MtpCommandGetFile::MtpCommandGetFile	CommandCodes.h	/^    MtpCommandGetFile (uint32_t file_id, const string& in_FileName)$/;"	f	struct:MtpCommandGetFile	access:public	signature:(uint32_t file_id, const string& in_FileName)
MtpCommandList	MtpThread.h	/^typedef vector<MtpCommand*> MtpCommandList;$/;"	t
MtpCommandSendFile	CommandCodes.h	/^    MtpCommandSendFile (string in_path, uint32_t in_ParentID) $/;"	f	struct:MtpCommandSendFile	access:public	signature:(string in_path, uint32_t in_ParentID)
MtpCommandSendFile	CommandCodes.h	/^struct MtpCommandSendFile : MtpCommand$/;"	s	inherits:MtpCommand
MtpCommandSendFile::MtpCommandSendFile	CommandCodes.h	/^    MtpCommandSendFile (string in_path, uint32_t in_ParentID) $/;"	f	struct:MtpCommandSendFile	access:public	signature:(string in_path, uint32_t in_ParentID)
MtpCommandSendFile::ParentID	CommandCodes.h	/^    uint32_t ParentID;$/;"	m	struct:MtpCommandSendFile	access:public
MtpCommandSendFile::Path	CommandCodes.h	/^    string Path;$/;"	m	struct:MtpCommandSendFile	access:public
MtpCommandTransferSystemFolder	CommandCodes.h	/^    MtpCommandTransferSystemFolder(QDir folder, DirNode* parent)$/;"	f	struct:MtpCommandTransferSystemFolder	access:public	signature:(QDir folder, DirNode* parent)
MtpCommandTransferSystemFolder	CommandCodes.h	/^struct MtpCommandTransferSystemFolder : MtpCommand$/;"	s	inherits:MtpCommand
MtpCommandTransferSystemFolder::DirName	CommandCodes.h	/^    QString DirName;$/;"	m	struct:MtpCommandTransferSystemFolder	access:public
MtpCommandTransferSystemFolder::Files	CommandCodes.h	/^    QFileInfoList Files;$/;"	m	struct:MtpCommandTransferSystemFolder	access:public
MtpCommandTransferSystemFolder::MtpCommandTransferSystemFolder	CommandCodes.h	/^    MtpCommandTransferSystemFolder(QDir folder, DirNode* parent)$/;"	f	struct:MtpCommandTransferSystemFolder	access:public	signature:(QDir folder, DirNode* parent)
MtpCommandTransferSystemFolder::Parent	CommandCodes.h	/^    DirNode* Parent;$/;"	m	struct:MtpCommandTransferSystemFolder	access:public
MtpDevice	MtpDevice.cpp	/^MtpDevice::MtpDevice( LIBMTP_mtpdevice_t* in_device )$/;"	f	class:MtpDevice	signature:( LIBMTP_mtpdevice_t* in_device )
MtpDevice	MtpDevice.h	/^    MtpDevice( LIBMTP_mtpdevice_t* in_device );$/;"	p	class:MtpDevice	access:public	signature:( LIBMTP_mtpdevice_t* in_device )
MtpDevice	MtpDevice.h	/^class MtpDevice : protected MtpParent$/;"	c	inherits:MtpParent
MtpDevice::CreateFolder	MtpDevice.cpp	/^uint32_t MtpDevice::CreateFolder (string in_FolderName, uint32_t in_parentID, int* newModelIndex)$/;"	f	class:MtpDevice	signature:(string in_FolderName, uint32_t in_parentID, int* newModelIndex)
MtpDevice::CreateFolder	MtpDevice.h	/^    uint32_t CreateFolder (string in_FolderName, uint32_t in_parentID, int* newmodelindex);$/;"	p	class:MtpDevice	access:public	signature:(string in_FolderName, uint32_t in_parentID, int* newmodelindex)
MtpDevice::DeleteObject	MtpDevice.cpp	/^bool MtpDevice::DeleteObject (uint32_t in_parentID, int in_FileID)$/;"	f	class:MtpDevice	signature:(uint32_t in_parentID, int in_FileID)
MtpDevice::DeleteObject	MtpDevice.h	/^    bool DeleteObject(uint32_t in_parentID, int in_depth);$/;"	p	class:MtpDevice	access:public	signature:(uint32_t in_parentID, int in_depth)
MtpDevice::DumpInformation	MtpDevice.cpp	/^void MtpDevice::DumpInformation ( void )$/;"	f	class:MtpDevice	signature:( void )
MtpDevice::DumpInformation	MtpDevice.h	/^    void DumpInformation ( void );$/;"	p	class:MtpDevice	access:public	signature:( void )
MtpDevice::GetFileFromDevice	MtpDevice.cpp	/^bool MtpDevice::GetFileFromDevice (uint32_t in_ParentID, const string& target)$/;"	f	class:MtpDevice	signature:(uint32_t in_ParentID, const string& target)
MtpDevice::GetFileFromDevice	MtpDevice.h	/^    bool GetFileFromDevice(uint32_t fileID, const string& target); $/;"	p	class:MtpDevice	access:public	signature:(uint32_t fileID, const string& target)
MtpDevice::GetFileSystem	MtpDevice.cpp	/^MtpFS* MtpDevice::GetFileSystem ( void )$/;"	f	class:MtpDevice	signature:( void )
MtpDevice::GetFileSystem	MtpDevice.h	/^    MtpFS* GetFileSystem ( void );$/;"	p	class:MtpDevice	access:public	signature:( void )
MtpDevice::GetFolders	MtpDevice.cpp	/^void MtpDevice::GetFolders ( void )$/;"	f	class:MtpDevice	signature:( void )
MtpDevice::GetFolders	MtpDevice.h	/^    void GetFolders ( void );$/;"	p	class:MtpDevice	access:public	signature:( void )
MtpDevice::MtpDevice	MtpDevice.cpp	/^MtpDevice::MtpDevice( LIBMTP_mtpdevice_t* in_device )$/;"	f	class:MtpDevice	signature:( LIBMTP_mtpdevice_t* in_device )
MtpDevice::MtpDevice	MtpDevice.h	/^    MtpDevice( LIBMTP_mtpdevice_t* in_device );$/;"	p	class:MtpDevice	access:public	signature:( LIBMTP_mtpdevice_t* in_device )
MtpDevice::SendFileToDevice	MtpDevice.cpp	/^bool MtpDevice::SendFileToDevice(const QFileInfo& fileinfo,$/;"	f	class:MtpDevice	signature:(const QFileInfo& fileinfo, uint32_t in_parentID)
MtpDevice::SendFileToDevice	MtpDevice.h	/^    bool SendFileToDevice(const QFileInfo& file,uint32_t in_parentID);$/;"	p	class:MtpDevice	access:public	signature:(const QFileInfo& file,uint32_t in_parentID)
MtpDevice::_curBatteryLevel	MtpDevice.h	/^    ubyte _curBatteryLevel;$/;"	m	class:MtpDevice	access:private
MtpDevice::_device	MtpDevice.h	/^    LIBMTP_mtpdevice_t* _device;$/;"	m	class:MtpDevice	access:private
MtpDevice::_deviceVersion	MtpDevice.h	/^    string _deviceVersion;$/;"	m	class:MtpDevice	access:private
MtpDevice::_friendlyName	MtpDevice.h	/^    string _friendlyName;$/;"	m	class:MtpDevice	access:private
MtpDevice::_maxBatteryLevel	MtpDevice.h	/^    ubyte _maxBatteryLevel;$/;"	m	class:MtpDevice	access:private
MtpDevice::_modelName	MtpDevice.h	/^    string _modelName;$/;"	m	class:MtpDevice	access:private
MtpDevice::_mtpFS	MtpDevice.h	/^    MtpFS* _mtpFS;$/;"	m	class:MtpDevice	access:private
MtpDevice::_serial	MtpDevice.h	/^    string _serial;$/;"	m	class:MtpDevice	access:private
MtpDevice::_syncPartner	MtpDevice.h	/^    string _syncPartner;$/;"	m	class:MtpDevice	access:private
MtpDevice::getBatteryLevel	MtpDevice.cpp	/^void MtpDevice::getBatteryLevel()$/;"	f	class:MtpDevice	signature:()
MtpDevice::getBatteryLevel	MtpDevice.h	/^    void getBatteryLevel();$/;"	p	class:MtpDevice	access:private	signature:()
MtpDevice::getDeviceVersion	MtpDevice.cpp	/^void MtpDevice::getDeviceVersion() $/;"	f	class:MtpDevice	signature:()
MtpDevice::getDeviceVersion	MtpDevice.h	/^    void getDeviceVersion();$/;"	p	class:MtpDevice	access:private	signature:()
MtpDevice::getFriendlyName	MtpDevice.cpp	/^void MtpDevice::getFriendlyName()$/;"	f	class:MtpDevice	signature:()
MtpDevice::getFriendlyName	MtpDevice.h	/^    void getFriendlyName();$/;"	p	class:MtpDevice	access:private	signature:()
MtpDevice::getModelName	MtpDevice.cpp	/^void MtpDevice::getModelName()$/;"	f	class:MtpDevice	signature:()
MtpDevice::getModelName	MtpDevice.h	/^    void getModelName();$/;"	p	class:MtpDevice	access:private	signature:()
MtpDevice::getSerialNum	MtpDevice.cpp	/^void MtpDevice::getSerialNum()$/;"	f	class:MtpDevice	signature:()
MtpDevice::getSerialNum	MtpDevice.h	/^    void getSerialNum();$/;"	p	class:MtpDevice	access:private	signature:()
MtpDevice::getSyncPartner	MtpDevice.cpp	/^void MtpDevice::getSyncPartner()$/;"	f	class:MtpDevice	signature:()
MtpDevice::getSyncPartner	MtpDevice.h	/^    void getSyncPartner();$/;"	p	class:MtpDevice	access:private	signature:()
MtpDevice::rawDevice	MtpDevice.cpp	/^LIBMTP_mtpdevice_t* MtpDevice::rawDevice()$/;"	f	class:MtpDevice	signature:()
MtpDevice::rawDevice	MtpDevice.h	/^    LIBMTP_mtpdevice_t* rawDevice();$/;"	p	class:MtpDevice	access:public	signature:()
MtpDevice::~MtpDevice	MtpDevice.cpp	/^MtpDevice::~MtpDevice()$/;"	f	class:MtpDevice	signature:()
MtpDevice::~MtpDevice	MtpDevice.h	/^    ~MtpDevice();$/;"	p	class:MtpDevice	access:public	signature:()
MtpDeviceInfo	CommandCodes.h	/^struct MtpDeviceInfo$/;"	s
MtpDeviceInfo::_curBatteryLevel	CommandCodes.h	/^    ubyte _curBatteryLevel;$/;"	m	struct:MtpDeviceInfo	access:public
MtpDeviceInfo::_friendlyName	CommandCodes.h	/^    string _friendlyName;$/;"	m	struct:MtpDeviceInfo	access:public
MtpDeviceInfo::_maxBatteryLevel	CommandCodes.h	/^    ubyte _maxBatteryLevel;$/;"	m	struct:MtpDeviceInfo	access:public
MtpDeviceInfo::_modelName	CommandCodes.h	/^    string _modelName;$/;"	m	struct:MtpDeviceInfo	access:public
MtpDeviceInfo::_serial	CommandCodes.h	/^    string _serial;$/;"	m	struct:MtpDeviceInfo	access:public
MtpDeviceInfo::_syncPartner	CommandCodes.h	/^    string _syncPartner;$/;"	m	struct:MtpDeviceInfo	access:public
MtpDir	MtpDir.h	/^    MtpDir(LIBMTP_folder_t* in_folder) :$/;"	f	class:MtpDir	access:public	signature:(LIBMTP_folder_t* in_folder)
MtpDir	MtpDir.h	/^    MtpDir(LIBMTP_folder_t* in_folder, count_t in_height)$/;"	f	class:MtpDir	access:public	signature:(LIBMTP_folder_t* in_folder, count_t in_height)
MtpDir	MtpDir.h	/^class MtpDir$/;"	c
MtpDir::FolderId	MtpDir.h	/^    uint32_t FolderId;$/;"	m	class:MtpDir	access:public
MtpDir::MtpDir	MtpDir.h	/^    MtpDir(LIBMTP_folder_t* in_folder) :$/;"	f	class:MtpDir	access:public	signature:(LIBMTP_folder_t* in_folder)
MtpDir::MtpDir	MtpDir.h	/^    MtpDir(LIBMTP_folder_t* in_folder, count_t in_height)$/;"	f	class:MtpDir	access:public	signature:(LIBMTP_folder_t* in_folder, count_t in_height)
MtpDir::Name	MtpDir.h	/^    string Name;$/;"	m	class:MtpDir	access:public
MtpDir::ParentId	MtpDir.h	/^    uint32_t ParentId;$/;"	m	class:MtpDir	access:public
MtpDir::SortedOrder	MtpDir.h	/^    count_t SortedOrder;$/;"	m	class:MtpDir	access:public
MtpDir::_rawFolder	MtpDir.h	/^    const LIBMTP_folder_t* _rawFolder;$/;"	m	class:MtpDir	access:public
MtpFS	MtpFS.cpp	/^MtpFS::MtpFS( LIBMTP_folder_t* in_root, LIBMTP_mtpdevice_t* in_dev)$/;"	f	class:MtpFS	signature:( LIBMTP_folder_t* in_root, LIBMTP_mtpdevice_t* in_dev)
MtpFS	MtpFS.h	/^    MtpFS( LIBMTP_folder_t* in_root, LIBMTP_mtpdevice_t* in_dev);$/;"	p	class:MtpFS	access:public	signature:( LIBMTP_folder_t* in_root, LIBMTP_mtpdevice_t* in_dev)
MtpFS	MtpFS.h	/^class MtpFS$/;"	c
MtpFS::AddFile	MtpFS.cpp	/^void MtpFS::AddFile (const FileNode& in_file)$/;"	f	class:MtpFS	signature:(const FileNode& in_file)
MtpFS::AddFile	MtpFS.h	/^    void AddFile (const FileNode& in_file);$/;"	p	class:MtpFS	access:public	signature:(const FileNode& in_file)
MtpFS::AddFolder	MtpFS.cpp	/^int MtpFS::AddFolder(uint32_t folderID, uint32_t parentID)$/;"	f	class:MtpFS	signature:(uint32_t folderID, uint32_t parentID)
MtpFS::AddFolder	MtpFS.h	/^    int AddFolder(uint32_t folderID, uint32_t parentID);$/;"	p	class:MtpFS	access:public	signature:(uint32_t folderID, uint32_t parentID)
MtpFS::DeleteDirectoryEntry	MtpFS.cpp	/^void MtpFS::DeleteDirectoryEntry(uint32_t ID)$/;"	f	class:MtpFS	signature:(uint32_t ID)
MtpFS::DeleteDirectoryEntry	MtpFS.h	/^    void DeleteDirectoryEntry(uint32_t folder_id);$/;"	p	class:MtpFS	access:public	signature:(uint32_t folder_id)
MtpFS::DeleteFile	MtpFS.cpp	/^void MtpFS::DeleteFile (const FileNode& in_file)$/;"	f	class:MtpFS	signature:(const FileNode& in_file)
MtpFS::DeleteFile	MtpFS.h	/^    void DeleteFile (const FileNode& in_file);$/;"	p	class:MtpFS	access:public	signature:(const FileNode& in_file)
MtpFS::DeleteFolder	MtpFS.cpp	/^void MtpFS::DeleteFolder(uint32_t folder_id)$/;"	f	class:MtpFS	signature:(uint32_t folder_id)
MtpFS::DeleteFolder	MtpFS.h	/^    void DeleteFolder(uint32_t folder_id);$/;"	p	class:MtpFS	access:public	signature:(uint32_t folder_id)
MtpFS::DirectoryExists	MtpFS.cpp	/^bool MtpFS::DirectoryExists(uint32_t parent, const string& name)$/;"	f	class:MtpFS	signature:(uint32_t parent, const string& name)
MtpFS::DirectoryExists	MtpFS.h	/^    bool DirectoryExists(uint32_t parent, const string& name);$/;"	p	class:MtpFS	access:public	signature:(uint32_t parent, const string& name)
MtpFS::FindRootImage	MtpFS.cpp	/^bool MtpFS::FindRootImage( uint32_t* idOut)$/;"	f	class:MtpFS	signature:( uint32_t* idOut)
MtpFS::FindRootImage	MtpFS.h	/^    bool FindRootImage( uint32_t* idOut);$/;"	p	class:MtpFS	access:public	signature:( uint32_t* idOut)
MtpFS::GetDirectory	MtpFS.cpp	/^DirNode* MtpFS::GetDirectory (DirNode* in_parent, uint32_t in_index)$/;"	f	class:MtpFS	signature:(DirNode* in_parent, uint32_t in_index)
MtpFS::GetDirectory	MtpFS.cpp	/^DirNode* MtpFS::GetDirectory (uint32_t in_id)$/;"	f	class:MtpFS	signature:(uint32_t in_id)
MtpFS::GetDirectory	MtpFS.h	/^    DirNode* GetDirectory (DirNode* in_parent, uint32_t in_index);$/;"	p	class:MtpFS	access:public	signature:(DirNode* in_parent, uint32_t in_index)
MtpFS::GetDirectory	MtpFS.h	/^    DirNode* GetDirectory (uint32_t in_id);$/;"	p	class:MtpFS	access:public	signature:(uint32_t in_id)
MtpFS::GetDirectoryByName	MtpFS.cpp	/^string MtpFS::GetDirectoryByName(uint32_t in_id)$/;"	f	class:MtpFS	signature:(uint32_t in_id)
MtpFS::GetDirectoryByName	MtpFS.h	/^    string GetDirectoryByName(uint32_t in_id);$/;"	p	class:MtpFS	access:public	signature:(uint32_t in_id)
MtpFS::GetRoot	MtpFS.cpp	/^DirNode* MtpFS::GetRoot()$/;"	f	class:MtpFS	signature:()
MtpFS::GetRoot	MtpFS.h	/^    DirNode* GetRoot();$/;"	p	class:MtpFS	access:public	signature:()
MtpFS::GetRootFileCount	MtpFS.cpp	/^count_t MtpFS::GetRootFileCount()$/;"	f	class:MtpFS	signature:()
MtpFS::GetRootFileCount	MtpFS.h	/^    count_t GetRootFileCount();$/;"	p	class:MtpFS	access:public	signature:()
MtpFS::GetSortedOrder	MtpFS.cpp	/^count_t MtpFS::GetSortedOrder(uint32_t in_id)$/;"	f	class:MtpFS	signature:(uint32_t in_id)
MtpFS::GetSortedOrder	MtpFS.h	/^    count_t GetSortedOrder(uint32_t in_id);$/;"	p	class:MtpFS	access:public	signature:(uint32_t in_id)
MtpFS::InsertFileList	MtpFS.cpp	/^void MtpFS::InsertFileList (LIBMTP_file_t* in_rootFile)$/;"	f	class:MtpFS	signature:(LIBMTP_file_t* in_rootFile)
MtpFS::InsertFileList	MtpFS.h	/^    void InsertFileList (LIBMTP_file_t* in_rootFile);$/;"	p	class:MtpFS	access:public	signature:(LIBMTP_file_t* in_rootFile)
MtpFS::MtpFS	MtpFS.cpp	/^MtpFS::MtpFS( LIBMTP_folder_t* in_root, LIBMTP_mtpdevice_t* in_dev)$/;"	f	class:MtpFS	signature:( LIBMTP_folder_t* in_root, LIBMTP_mtpdevice_t* in_dev)
MtpFS::MtpFS	MtpFS.h	/^    MtpFS( LIBMTP_folder_t* in_root, LIBMTP_mtpdevice_t* in_dev);$/;"	p	class:MtpFS	access:public	signature:( LIBMTP_folder_t* in_root, LIBMTP_mtpdevice_t* in_dev)
MtpFS::ProgressFunc	MtpFS.cpp	/^void MtpFS::ProgressFunc(uint64_t const sent, uint64_t const total)$/;"	f	class:MtpFS	signature:(uint64_t const sent, uint64_t const total)
MtpFS::ProgressFunc	MtpFS.h	/^    void ProgressFunc(uint64_t const sent, uint64_t const total);$/;"	p	class:MtpFS	access:public	signature:(uint64_t const sent, uint64_t const total)
MtpFS::ProgressWrapper	MtpFS.cpp	/^int MtpFS::ProgressWrapper(uint64_t const sent, uint64_t const total, void const * const data) $/;"	f	class:MtpFS	signature:(uint64_t const sent, uint64_t const total, void const * const data)
MtpFS::ProgressWrapper	MtpFS.h	/^    static int ProgressWrapper(uint64_t const sent, uint64_t const total, void const * const data) ;$/;"	p	class:MtpFS	access:public	signature:(uint64_t const sent, uint64_t const total, void const * const data)
MtpFS::SetRootName	MtpFS.cpp	/^void MtpFS::SetRootName (const string& in_rootname)$/;"	f	class:MtpFS	signature:(const string& in_rootname)
MtpFS::SetRootName	MtpFS.h	/^    void SetRootName (const string& in_rootname);$/;"	p	class:MtpFS	access:public	signature:(const string& in_rootname)
MtpFS::_device	MtpFS.h	/^    LIBMTP_mtpdevice_t* _device;$/;"	m	class:MtpFS	access:private
MtpFS::_dirMap	MtpFS.h	/^    map <uint32_t, DirNode*> _dirMap;$/;"	m	class:MtpFS	access:private
MtpFS::_mtpRoot	MtpFS.h	/^    LIBMTP_folder_t* _mtpRoot;$/;"	m	class:MtpFS	access:private
MtpFS::_root	MtpFS.h	/^    DirNode* _root;$/;"	m	class:MtpFS	access:private
MtpFileSystem	CommandCodes.h	/^    MtpFS* MtpFileSystem;$/;"	m	struct:MtpUpdateConnect	access:public
MtpParent	MtpParent.h	/^class MtpParent$/;"	c
MtpParent::GetErrors	MtpParent.h	/^    void GetErrors (LIBMTP_mtpdevice_t* in_device)$/;"	f	class:MtpParent	access:public	signature:(LIBMTP_mtpdevice_t* in_device)
MtpParent::isTerminal	MtpParent.h	/^    bool isTerminal (LIBMTP_error_number_t in_err)$/;"	f	class:MtpParent	access:protected	signature:(LIBMTP_error_number_t in_err)
MtpPortal	MtpPortal.h	/^    MtpPortal ()$/;"	f	class:MtpPortal	access:public	signature:()
MtpPortal	MtpPortal.h	/^class MtpPortal : protected MtpParent $/;"	c	inherits:MtpParent
MtpPortal::Connect	MtpPortal.h	/^    void Connect()$/;"	f	class:MtpPortal	access:public	signature:()
MtpPortal::Disconnect	MtpPortal.h	/^    void Disconnect()$/;"	f	class:MtpPortal	access:public	signature:()
MtpPortal::GetDevice	MtpPortal.h	/^    MtpDevice* GetDevice ( void )$/;"	f	class:MtpPortal	access:public	signature:( void )
MtpPortal::IsConnected	MtpPortal.h	/^    bool IsConnected()$/;"	f	class:MtpPortal	access:public	signature:()
MtpPortal::MtpPortal	MtpPortal.h	/^    MtpPortal ()$/;"	f	class:MtpPortal	access:public	signature:()
MtpPortal::_connected	MtpPortal.h	/^    bool _connected;$/;"	m	class:MtpPortal	access:private
MtpPortal::_device	MtpPortal.h	/^    MtpDevice* _device;$/;"	m	class:MtpPortal	access:private
MtpPortal::_deviceCount	MtpPortal.h	/^    count_t _deviceCount;$/;"	m	class:MtpPortal	access:private
MtpPortal::~MtpPortal	MtpPortal.h	/^    ~MtpPortal()$/;"	f	class:MtpPortal	access:public	signature:()
MtpThread	MtpThread.cpp	/^MtpThread::MtpThread (QObject* parent) : QThread (parent)$/;"	f	class:MtpThread	signature:(QObject* parent)
MtpThread	MtpThread.h	/^    MtpThread (QObject*);$/;"	p	class:MtpThread	access:public	signature:(QObject*)
MtpThread	MtpThread.h	/^class MtpThread : public QThread $/;"	c	inherits:QThread
MtpThread::ConnectDone	MtpThread.h	/^    void ConnectDone(MtpFS* FS);$/;"	p	class:MtpThread	access:public	signature:(MtpFS* FS)
MtpThread::DirectoryAdded	MtpThread.h	/^    void DirectoryAdded(DirNode* parent, index_t newfolderlocation);$/;"	p	class:MtpThread	access:public	signature:(DirNode* parent, index_t newfolderlocation)
MtpThread::DirectoryRemoved	MtpThread.h	/^    void DirectoryRemoved(bool, index_t);$/;"	p	class:MtpThread	access:public	signature:(bool, index_t)
MtpThread::FileRemoved	MtpThread.h	/^    void FileRemoved(bool, index_t, index_t);$/;"	p	class:MtpThread	access:public	signature:(bool, index_t, index_t)
MtpThread::FileTransferDone	MtpThread.h	/^    void FileTransferDone(bool);$/;"	p	class:MtpThread	access:public	signature:(bool)
MtpThread::IssueCommand	MtpThread.cpp	/^void MtpThread::IssueCommand (MtpCommand* in_command)$/;"	f	class:MtpThread	signature:(MtpCommand* in_command)
MtpThread::IssueCommand	MtpThread.h	/^    void IssueCommand (MtpCommand* in_command);$/;"	p	class:MtpThread	access:public	signature:(MtpCommand* in_command)
MtpThread::MtpThread	MtpThread.cpp	/^MtpThread::MtpThread (QObject* parent) : QThread (parent)$/;"	f	class:MtpThread	signature:(QObject* parent)
MtpThread::MtpThread	MtpThread.h	/^    MtpThread (QObject*);$/;"	p	class:MtpThread	access:public	signature:(QObject*)
MtpThread::NewDeviceImage	MtpThread.h	/^    void NewDeviceImage();$/;"	p	class:MtpThread	access:public	signature:()
MtpThread::TransferToDeviceDone	MtpThread.h	/^    void TransferToDeviceDone(bool);$/;"	p	class:MtpThread	access:public	signature:(bool)
MtpThread::_device	MtpThread.h	/^    MtpDevice* _device;$/;"	m	class:MtpThread	access:private
MtpThread::_jobs	MtpThread.h	/^    queue <MtpCommand*> _jobs;$/;"	m	class:MtpThread	access:private
MtpThread::_lock	MtpThread.h	/^    QMutex _lock;$/;"	m	class:MtpThread	access:private
MtpThread::_mtpFileSystem	MtpThread.h	/^    MtpFS* _mtpFileSystem;$/;"	m	class:MtpThread	access:private
MtpThread::_portal	MtpThread.h	/^    MtpPortal _portal;$/;"	m	class:MtpThread	access:private
MtpThread::cond	MtpThread.h	/^    QWaitCondition cond;$/;"	m	class:MtpThread	access:private
MtpThread::run	MtpThread.cpp	/^void MtpThread::run (void)$/;"	f	class:MtpThread	signature:(void)
MtpThread::run	MtpThread.h	/^    void run();$/;"	p	class:MtpThread	access:public	signature:()
MtpUpdate	CommandCodes.h	/^struct MtpUpdate$/;"	s
MtpUpdate::ComCode	CommandCodes.h	/^    MtpCommandCode ComCode;$/;"	m	struct:MtpUpdate	access:public
MtpUpdate::GetCommand	CommandCodes.h	/^    MtpCommandCode GetCommand()$/;"	f	struct:MtpUpdate	access:public	signature:()
MtpUpdate::Success	CommandCodes.h	/^    bool Success;$/;"	m	struct:MtpUpdate	access:public
MtpUpdate::isSuccess	CommandCodes.h	/^    bool isSuccess()$/;"	f	struct:MtpUpdate	access:public	signature:()
MtpUpdateConnect	CommandCodes.h	/^    MtpUpdateConnect(bool in_success, MtpFS* in_fs)$/;"	f	struct:MtpUpdateConnect	access:public	signature:(bool in_success, MtpFS* in_fs)
MtpUpdateConnect	CommandCodes.h	/^struct MtpUpdateConnect: MtpUpdate$/;"	s	inherits:MtpUpdate
MtpUpdateConnect::MtpFileSystem	CommandCodes.h	/^    MtpFS* MtpFileSystem;$/;"	m	struct:MtpUpdateConnect	access:public
MtpUpdateConnect::MtpUpdateConnect	CommandCodes.h	/^    MtpUpdateConnect(bool in_success, MtpFS* in_fs)$/;"	f	struct:MtpUpdateConnect	access:public	signature:(bool in_success, MtpFS* in_fs)
MtpUpdateDelete	CommandCodes.h	/^    MtpUpdateDelete (bool in_success, uint32_t in_Folderid, int in_depth) $/;"	f	struct:MtpUpdateDelete	access:public	signature:(bool in_success, uint32_t in_Folderid, int in_depth)
MtpUpdateDelete	CommandCodes.h	/^struct MtpUpdateDelete : MtpUpdate$/;"	s	inherits:MtpUpdate
MtpUpdateDelete::Depth	CommandCodes.h	/^    int Depth;$/;"	m	struct:MtpUpdateDelete	access:public
MtpUpdateDelete::FolderID	CommandCodes.h	/^    uint32_t FolderID;$/;"	m	struct:MtpUpdateDelete	access:public
MtpUpdateDelete::MtpUpdateDelete	CommandCodes.h	/^    MtpUpdateDelete (bool in_success, uint32_t in_Folderid, int in_depth) $/;"	f	struct:MtpUpdateDelete	access:public	signature:(bool in_success, uint32_t in_Folderid, int in_depth)
MtpUpdateDeviceInfo	CommandCodes.h	/^struct MtpUpdateDeviceInfo$/;"	s
MtpUpdateDeviceInfo::Info	CommandCodes.h	/^    MtpDeviceInfo Info;$/;"	m	struct:MtpUpdateDeviceInfo	access:public
MtpUpdateList	MtpThread.h	/^typedef vector<MtpUpdate*> MtpUpdateList;$/;"	t
MtpUpdateTransfer	CommandCodes.h	/^    MtpUpdateTransfer(bool in_success, uint32_t in_Folderid)$/;"	f	struct:MtpUpdateTransfer	access:public	signature:(bool in_success, uint32_t in_Folderid)
MtpUpdateTransfer	CommandCodes.h	/^struct MtpUpdateTransfer : MtpUpdate$/;"	s	inherits:MtpUpdate
MtpUpdateTransfer::FolderID	CommandCodes.h	/^    uint32_t FolderID;$/;"	m	struct:MtpUpdateTransfer	access:public
MtpUpdateTransfer::MtpUpdateTransfer	CommandCodes.h	/^    MtpUpdateTransfer(bool in_success, uint32_t in_Folderid)$/;"	f	struct:MtpUpdateTransfer	access:public	signature:(bool in_success, uint32_t in_Folderid)
Name	MtpDir.h	/^    string Name;$/;"	m	class:MtpDir	access:public
NewDeviceImage	MtpThread.h	/^    void NewDeviceImage();$/;"	p	class:MtpThread	access:public	signature:()
PaletteEntry	BmpStructs.h	/^struct PaletteEntry$/;"	s
PaletteEntry::Blue	BmpStructs.h	/^    byte Blue;$/;"	m	struct:PaletteEntry	access:public
PaletteEntry::Green	BmpStructs.h	/^    byte Green;$/;"	m	struct:PaletteEntry	access:public
PaletteEntry::Red	BmpStructs.h	/^    byte Red;$/;"	m	struct:PaletteEntry	access:public
PaletteEntry::Reserved	BmpStructs.h	/^    byte Reserved;$/;"	m	struct:PaletteEntry	access:public
Parent	CommandCodes.h	/^    DirNode* Parent;$/;"	m	struct:MtpCommandTransferSystemFolder	access:public
ParentID	CommandCodes.h	/^    uint32_t ParentID;$/;"	m	struct:MtpCommandSendFile	access:public
ParentId	MtpDir.h	/^    uint32_t ParentId;$/;"	m	class:MtpDir	access:public
Path	CommandCodes.h	/^    string Path;$/;"	m	struct:MtpCommandSendFile	access:public
Pixel	BmpStructs.h	/^struct Pixel$/;"	s
Pixel::Alpha	BmpStructs.h	/^    byte Alpha;$/;"	m	struct:Pixel	access:public
Pixel::Blue	BmpStructs.h	/^    byte Blue;$/;"	m	struct:Pixel	access:public
Pixel::Green	BmpStructs.h	/^    byte Green;$/;"	m	struct:Pixel	access:public
Pixel::Red	BmpStructs.h	/^    byte Red;$/;"	m	struct:Pixel	access:public
Planes	BmpStructs.h	/^    short Planes;$/;"	m	struct:DibHeader	access:public
Planes	BmpStructs.h	/^    short Planes;$/;"	m	struct:IconDirEntry	access:public
PopulateImages	Icon.h	/^    void PopulateImages ( void )$/;"	f	class:Icon	access:public	signature:( void )
ProgressFunc	MtpFS.cpp	/^void MtpFS::ProgressFunc(uint64_t const sent, uint64_t const total)$/;"	f	class:MtpFS	signature:(uint64_t const sent, uint64_t const total)
ProgressFunc	MtpFS.h	/^    void ProgressFunc(uint64_t const sent, uint64_t const total);$/;"	p	class:MtpFS	access:public	signature:(uint64_t const sent, uint64_t const total)
ProgressWrapper	MtpFS.cpp	/^int MtpFS::ProgressWrapper(uint64_t const sent, uint64_t const total, void const * const data) $/;"	f	class:MtpFS	signature:(uint64_t const sent, uint64_t const total, void const * const data)
ProgressWrapper	MtpFS.h	/^    static int ProgressWrapper(uint64_t const sent, uint64_t const total, void const * const data) ;$/;"	p	class:MtpFS	access:public	signature:(uint64_t const sent, uint64_t const total, void const * const data)
RawImageSize	BmpStructs.h	/^    int RawImageSize;$/;"	m	struct:DibHeader	access:public
ReadImages	Icon.h	/^    void ReadImages()$/;"	f	class:Icon	access:public	signature:()
Red	BmpStructs.h	/^    byte Red;$/;"	m	struct:PaletteEntry	access:public
Red	BmpStructs.h	/^    byte Red;$/;"	m	struct:Pixel	access:public
Reserved	BmpStructs.h	/^    byte Reserved;$/;"	m	struct:IconDirEntry	access:public
Reserved	BmpStructs.h	/^    byte Reserved;$/;"	m	struct:PaletteEntry	access:public
Reserved	BmpStructs.h	/^    short Reserved;$/;"	m	struct:IconHeader	access:public
Sanity	FileNode.h	/^    void Sanity (LIBMTP_filetype_t in_type)$/;"	f	class:FileNode	access:public	signature:(LIBMTP_filetype_t in_type)
SendFile	CommandCodes.h	/^    SendFile,$/;"	e	enum:MtpCommandCode
SendFileToDevice	MtpDevice.cpp	/^bool MtpDevice::SendFileToDevice(const QFileInfo& fileinfo,$/;"	f	class:MtpDevice	signature:(const QFileInfo& fileinfo, uint32_t in_parentID)
SendFileToDevice	MtpDevice.h	/^    bool SendFileToDevice(const QFileInfo& file,uint32_t in_parentID);$/;"	p	class:MtpDevice	access:public	signature:(const QFileInfo& file,uint32_t in_parentID)
SendSampleData	CommandCodes.h	/^    SendSampleData,$/;"	e	enum:MtpCommandCode
SetHeight	FileNode.h	/^    void SetHeight(count_t in_height)$/;"	f	class:FileNode	access:public	signature:(count_t in_height)
SetName	DirNode.cpp	/^void DirNode::SetName(const string& in_str) $/;"	f	class:DirNode	signature:(const string& in_str)
SetName	DirNode.h	/^    void SetName(const string& in_str); $/;"	p	class:DirNode	access:public	signature:(const string& in_str)
SetParent	DirNode.cpp	/^void DirNode::SetParent (DirNode* in_parent)$/;"	f	class:DirNode	signature:(DirNode* in_parent)
SetParent	DirNode.h	/^    void SetParent (DirNode* in_parent);$/;"	p	class:DirNode	access:public	signature:(DirNode* in_parent)
SetRootName	MtpFS.cpp	/^void MtpFS::SetRootName (const string& in_rootname)$/;"	f	class:MtpFS	signature:(const string& in_rootname)
SetRootName	MtpFS.h	/^    void SetRootName (const string& in_rootname);$/;"	p	class:MtpFS	access:public	signature:(const string& in_rootname)
SetSortedOrder	DirNode.cpp	/^void DirNode::SetSortedOrder(count_t in)$/;"	f	class:DirNode	signature:(count_t in)
SetSortedOrder	DirNode.h	/^    void SetSortedOrder(count_t in); $/;"	p	class:DirNode	access:public	signature:(count_t in)
SortByArtistDown	types.h	/^    SortByArtistDown,$/;"	e	enum:TrackSortType
SortByArtistUp	types.h	/^    SortByArtistUp,$/;"	e	enum:TrackSortType
SortByNameDown	types.h	/^    SortByNameDown,$/;"	e	enum:FileSortType
SortByNameUp	types.h	/^    SortByNameUp,$/;"	e	enum:FileSortType
SortBySizeDown	types.h	/^    SortBySizeDown,$/;"	e	enum:FileSortType
SortBySizeUp	types.h	/^    SortBySizeUp,$/;"	e	enum:FileSortType
SortBySongDown	types.h	/^    SortBySongDown,$/;"	e	enum:TrackSortType
SortBySongUp	types.h	/^    SortBySongUp,$/;"	e	enum:TrackSortType
SortByTrackNumDown	types.h	/^    SortByTrackNumDown$/;"	e	enum:TrackSortType
SortByTrackNumUp	types.h	/^    SortByTrackNumUp,$/;"	e	enum:TrackSortType
SortByTypeDown	types.h	/^    SortByTypeDown$/;"	e	enum:FileSortType
SortByTypeUp	types.h	/^    SortByTypeUp,$/;"	e	enum:FileSortType
SortDirectories	DirNode.cpp	/^void DirNode::SortDirectories()$/;"	f	class:DirNode	signature:()
SortDirectories	DirNode.h	/^    void SortDirectories();$/;"	p	class:DirNode	access:public	signature:()
SortFiles	DirNode.cpp	/^void DirNode::SortFiles (FileSortType sortType)$/;"	f	class:DirNode	signature:(FileSortType sortType)
SortFiles	DirNode.h	/^    void SortFiles(FileSortType );$/;"	p	class:DirNode	access:public	signature:(FileSortType )
SortedOrder	MtpDir.h	/^    count_t SortedOrder;$/;"	m	class:MtpDir	access:public
SubDirectoryCount	DirNode.cpp	/^count_t DirNode::SubDirectoryCount() $/;"	f	class:DirNode	signature:()
SubDirectoryCount	DirNode.h	/^    count_t SubDirectoryCount();$/;"	p	class:DirNode	access:public	signature:()
Success	CommandCodes.h	/^    bool Success;$/;"	m	struct:MtpUpdate	access:public
TrackSortType	types.h	/^enum TrackSortType$/;"	g
TransferDeviceFolder	CommandCodes.h	/^    TransferDeviceFolder,$/;"	e	enum:MtpCommandCode
TransferSystemFolder	CommandCodes.h	/^    TransferSystemFolder$/;"	e	enum:MtpCommandCode
TransferToDeviceDone	MtpThread.h	/^    void TransferToDeviceDone(bool);$/;"	p	class:MtpThread	access:public	signature:(bool)
Type	BmpStructs.h	/^    short Type;$/;"	m	struct:IconHeader	access:public
VRes	BmpStructs.h	/^    int VRes;$/;"	m	struct:DibHeader	access:public
Width	BmpStructs.h	/^    count_t Width;$/;"	m	struct:Dimensions	access:public
Width	BmpStructs.h	/^    int Width;$/;"	m	struct:DibHeader	access:public
Width	BmpStructs.h	/^    ubyte Width;$/;"	m	struct:IconDirEntry	access:public
__BMPICON__	Icon.h	5;"	d
__COMMANDCODES__	CommandCodes.h	5;"	d
__DIRNODE__	DirNode.h	4;"	d
__FILENODE__	FileNode.h	5;"	d
__MTPDEVICE__	MtpDevice.h	6;"	d
__MTPDIR__	MtpDir.h	6;"	d
__MTPFS__	MtpFS.h	5;"	d
__MTPPARENT__	MtpParent.h	5;"	d
__MTPPORTAL__	MtpPortal.h	6;"	d
__MTPTHREAD__	MtpThread.h	5;"	d
__STRUCTS__	BmpStructs.h	5;"	d
__TYPES__	types.h	6;"	d
_bestImage	Icon.h	/^    index_t _bestImage;$/;"	m	class:Icon	access:private
_bestImageDepth	Icon.h	/^    count_t _bestImageDepth;$/;"	m	class:Icon	access:private
_bestImageDimensions	Icon.h	/^    Dimensions _bestImageDimensions;$/;"	m	class:Icon	access:private
_bestImagePtr	Icon.h	/^    byte* _bestImagePtr;$/;"	m	class:Icon	access:private
_bestImageSize	Icon.h	/^    count_t _bestImageSize;$/;"	m	class:Icon	access:private
_connected	MtpPortal.h	/^    bool _connected;$/;"	m	class:MtpPortal	access:private
_curBatteryLevel	CommandCodes.h	/^    ubyte _curBatteryLevel;$/;"	m	struct:MtpDeviceInfo	access:public
_curBatteryLevel	MtpDevice.h	/^    ubyte _curBatteryLevel;$/;"	m	class:MtpDevice	access:private
_currentDir	DirNode.h	/^    MtpDir _currentDir;$/;"	m	class:DirNode	access:private
_device	MtpDevice.h	/^    LIBMTP_mtpdevice_t* _device;$/;"	m	class:MtpDevice	access:private
_device	MtpFS.h	/^    LIBMTP_mtpdevice_t* _device;$/;"	m	class:MtpFS	access:private
_device	MtpPortal.h	/^    MtpDevice* _device;$/;"	m	class:MtpPortal	access:private
_device	MtpThread.h	/^    MtpDevice* _device;$/;"	m	class:MtpThread	access:private
_deviceCount	MtpPortal.h	/^    count_t _deviceCount;$/;"	m	class:MtpPortal	access:private
_deviceVersion	MtpDevice.h	/^    string _deviceVersion;$/;"	m	class:MtpDevice	access:private
_dirMap	MtpFS.h	/^    map <uint32_t, DirNode*> _dirMap;$/;"	m	class:MtpFS	access:private
_file	Icon.h	/^    byte* _file;$/;"	m	class:Icon	access:private
_fileSize	FileNode.h	/^    uint64_t _fileSize;$/;"	m	class:FileNode	access:private
_fileSystem	DirNode.h	/^    MtpFS* _fileSystem;$/;"	m	class:DirNode	access:private
_files	DirNode.h	/^    vector <FileNode> _files; $/;"	m	class:DirNode	access:private
_friendlyName	CommandCodes.h	/^    string _friendlyName;$/;"	m	struct:MtpDeviceInfo	access:public
_friendlyName	MtpDevice.h	/^    string _friendlyName;$/;"	m	class:MtpDevice	access:private
_header	Icon.h	/^    IconHeader* _header;$/;"	m	class:Icon	access:private
_height	FileNode.h	/^    count_t _height;$/;"	m	class:FileNode	access:private
_iconList	Icon.h	/^    vector <IconDirEntry*> _iconList;$/;"	m	class:Icon	access:private
_isValid	Icon.h	/^    bool _isValid;$/;"	m	class:Icon	access:private
_itemId	FileNode.h	/^    uint32_t _itemId;$/;"	m	class:FileNode	access:private
_jobs	MtpThread.h	/^    queue <MtpCommand*> _jobs;$/;"	m	class:MtpThread	access:private
_lastDirSort	DirNode.h	/^    FileSortType _lastDirSort;$/;"	m	class:DirNode	access:private
_lastFileSort	DirNode.h	/^    FileSortType _lastFileSort;$/;"	m	class:DirNode	access:private
_lock	MtpThread.h	/^    QMutex _lock;$/;"	m	class:MtpThread	access:private
_maxBatteryLevel	CommandCodes.h	/^    ubyte _maxBatteryLevel;$/;"	m	struct:MtpDeviceInfo	access:public
_maxBatteryLevel	MtpDevice.h	/^    ubyte _maxBatteryLevel;$/;"	m	class:MtpDevice	access:private
_modelName	CommandCodes.h	/^    string _modelName;$/;"	m	struct:MtpDeviceInfo	access:public
_modelName	MtpDevice.h	/^    string _modelName;$/;"	m	class:MtpDevice	access:private
_mtpFS	MtpDevice.h	/^    MtpFS* _mtpFS;$/;"	m	class:MtpDevice	access:private
_mtpFileSystem	MtpThread.h	/^    MtpFS* _mtpFileSystem;$/;"	m	class:MtpThread	access:private
_mtpRoot	MtpFS.h	/^    LIBMTP_folder_t* _mtpRoot;$/;"	m	class:MtpFS	access:private
_name	FileNode.h	/^    string   _name;$/;"	m	class:FileNode	access:private
_parent	DirNode.h	/^    DirNode* _parent;$/;"	m	class:DirNode	access:private
_parentId	FileNode.h	/^    uint32_t _parentId;$/;"	m	class:FileNode	access:private
_path	FileNode.h	/^    string _path; \/\/only used to transfer..$/;"	m	class:FileNode	access:private
_portal	MtpThread.h	/^    MtpPortal _portal;$/;"	m	class:MtpThread	access:private
_rawFolder	MtpDir.h	/^    const LIBMTP_folder_t* _rawFolder;$/;"	m	class:MtpDir	access:public
_root	MtpFS.h	/^    DirNode* _root;$/;"	m	class:MtpFS	access:private
_serial	CommandCodes.h	/^    string _serial;$/;"	m	struct:MtpDeviceInfo	access:public
_serial	MtpDevice.h	/^    string _serial;$/;"	m	class:MtpDevice	access:private
_subDirectories	DirNode.h	/^    vector <DirNode*> _subDirectories;$/;"	m	class:DirNode	access:private
_syncPartner	CommandCodes.h	/^    string _syncPartner;$/;"	m	struct:MtpDeviceInfo	access:public
_syncPartner	MtpDevice.h	/^    string _syncPartner;$/;"	m	class:MtpDevice	access:private
_type	FileNode.h	/^    QString _type;$/;"	m	class:FileNode	access:private
byte	BmpStructs.h	/^typedef char byte;$/;"	t
byte	types.h	/^typedef char byte;$/;"	t
compareDirNames	DirNode.cpp	/^bool DirNode::compareDirNames(DirNode* one, DirNode* two)$/;"	f	class:DirNode	signature:(DirNode* one, DirNode* two)
compareDirNames	DirNode.h	/^    static bool compareDirNames(DirNode* one, DirNode* two);$/;"	p	class:DirNode	access:private	signature:(DirNode* one, DirNode* two)
compareFileNames	DirNode.cpp	/^bool DirNode::compareFileNames(FileNode one, FileNode two)$/;"	f	class:DirNode	signature:(FileNode one, FileNode two)
compareFileNames	DirNode.h	/^    static bool compareFileNames(FileNode one, FileNode two);$/;"	p	class:DirNode	access:private	signature:(FileNode one, FileNode two)
compareFileSizes	DirNode.cpp	/^bool DirNode::compareFileSizes(FileNode one, FileNode two)$/;"	f	class:DirNode	signature:(FileNode one, FileNode two)
compareFileSizes	DirNode.h	/^    static bool compareFileSizes(FileNode one, FileNode two);$/;"	p	class:DirNode	access:private	signature:(FileNode one, FileNode two)
cond	MtpThread.h	/^    QWaitCondition cond;$/;"	m	class:MtpThread	access:private
count_t	BmpStructs.h	/^typedef unsigned int count_t;$/;"	t
count_t	types.h	/^typedef unsigned int count_t;$/;"	t
deleteAllSubDirectories	DirNode.cpp	/^void DirNode::deleteAllSubDirectories()$/;"	f	class:DirNode	signature:()
deleteAllSubDirectories	DirNode.h	/^    void deleteAllSubDirectories();$/;"	p	class:DirNode	access:private	signature:()
discoverChildren	DirNode.cpp	/^void DirNode::discoverChildren(LIBMTP_folder_t* in_folder)$/;"	f	class:DirNode	signature:(LIBMTP_folder_t* in_folder)
discoverChildren	DirNode.h	/^    void discoverChildren(LIBMTP_folder_t* in_folder);$/;"	p	class:DirNode	access:private	signature:(LIBMTP_folder_t* in_folder)
funcPtr	types.h	/^typedef int (MtpFS::*funcPtr) (uint64_t, uint64_t, void const* data);$/;"	t
getBatteryLevel	MtpDevice.cpp	/^void MtpDevice::getBatteryLevel()$/;"	f	class:MtpDevice	signature:()
getBatteryLevel	MtpDevice.h	/^    void getBatteryLevel();$/;"	p	class:MtpDevice	access:private	signature:()
getDeviceVersion	MtpDevice.cpp	/^void MtpDevice::getDeviceVersion() $/;"	f	class:MtpDevice	signature:()
getDeviceVersion	MtpDevice.h	/^    void getDeviceVersion();$/;"	p	class:MtpDevice	access:private	signature:()
getFriendlyName	MtpDevice.cpp	/^void MtpDevice::getFriendlyName()$/;"	f	class:MtpDevice	signature:()
getFriendlyName	MtpDevice.h	/^    void getFriendlyName();$/;"	p	class:MtpDevice	access:private	signature:()
getModelName	MtpDevice.cpp	/^void MtpDevice::getModelName()$/;"	f	class:MtpDevice	signature:()
getModelName	MtpDevice.h	/^    void getModelName();$/;"	p	class:MtpDevice	access:private	signature:()
getSerialNum	MtpDevice.cpp	/^void MtpDevice::getSerialNum()$/;"	f	class:MtpDevice	signature:()
getSerialNum	MtpDevice.h	/^    void getSerialNum();$/;"	p	class:MtpDevice	access:private	signature:()
getSyncPartner	MtpDevice.cpp	/^void MtpDevice::getSyncPartner()$/;"	f	class:MtpDevice	signature:()
getSyncPartner	MtpDevice.h	/^    void getSyncPartner();$/;"	p	class:MtpDevice	access:private	signature:()
image	BmpStructs.h	/^    Pixel image[128*128];$/;"	m	struct:Image	access:public
image	BmpStructs.h	/^    byte image[128][128];$/;"	m	struct:MonochromeImage	access:public
index_t	types.h	/^typedef unsigned int index_t;$/;"	t
isSuccess	CommandCodes.h	/^    bool isSuccess()$/;"	f	struct:MtpUpdate	access:public	signature:()
isTerminal	MtpParent.h	/^    bool isTerminal (LIBMTP_error_number_t in_err)$/;"	f	class:MtpParent	access:protected	signature:(LIBMTP_error_number_t in_err)
offset	BmpStructs.h	/^    unsigned int offset;      \/\/4$/;"	m	struct:BmpFileHeader	access:public
rawDevice	MtpDevice.cpp	/^LIBMTP_mtpdevice_t* MtpDevice::rawDevice()$/;"	f	class:MtpDevice	signature:()
rawDevice	MtpDevice.h	/^    LIBMTP_mtpdevice_t* rawDevice();$/;"	p	class:MtpDevice	access:public	signature:()
reserved1	BmpStructs.h	/^    ushort reserved1; \/\/2$/;"	m	struct:BmpFileHeader	access:public
reserved2	BmpStructs.h	/^    ushort reserved2; \/\/2$/;"	m	struct:BmpFileHeader	access:public
run	MtpThread.cpp	/^void MtpThread::run (void)$/;"	f	class:MtpThread	signature:(void)
run	MtpThread.h	/^    void run();$/;"	p	class:MtpThread	access:public	signature:()
shallowDirectorySort	DirNode.cpp	/^void DirNode::shallowDirectorySort()$/;"	f	class:DirNode	signature:()
shallowDirectorySort	DirNode.h	/^    void shallowDirectorySort();$/;"	p	class:DirNode	access:private	signature:()
size	BmpStructs.h	/^    unsigned int size;   \/\/4$/;"	m	struct:BmpFileHeader	access:public
size_t	types.h	/^typedef unsigned int size_t;$/;"	t
sortFileNamesDown	DirNode.cpp	/^void DirNode::sortFileNamesDown()$/;"	f	class:DirNode	signature:()
sortFileNamesDown	DirNode.h	/^    void sortFileNamesDown();$/;"	p	class:DirNode	access:private	signature:()
sortFileNamesUp	DirNode.cpp	/^void DirNode::sortFileNamesUp()$/;"	f	class:DirNode	signature:()
sortFileNamesUp	DirNode.h	/^    void sortFileNamesUp();$/;"	p	class:DirNode	access:private	signature:()
sortSizeDown	DirNode.cpp	/^void DirNode::sortSizeDown()$/;"	f	class:DirNode	signature:()
sortSizeDown	DirNode.h	/^    void sortSizeDown();$/;"	p	class:DirNode	access:private	signature:()
sortSizeUp	DirNode.cpp	/^void DirNode::sortSizeUp()$/;"	f	class:DirNode	signature:()
sortSizeUp	DirNode.h	/^    void sortSizeUp();$/;"	p	class:DirNode	access:private	signature:()
standardizeType	FileNode.h	/^    QString standardizeType (const QString in)$/;"	f	class:FileNode	access:private	signature:(const QString in)
stringToType	FileNode.h	/^    LIBMTP_filetype_t stringToType()$/;"	f	class:FileNode	access:private	signature:()
stringToType	FileNode.h	/^    static LIBMTP_filetype_t stringToType(const string& in_type)$/;"	f	class:FileNode	access:private	signature:(const string& in_type)
type	BmpStructs.h	/^    unsigned short type; \/\/2$/;"	m	struct:BmpFileHeader	access:public
typeToString	FileNode.h	/^    static string typeToString (LIBMTP_filetype_t in_type)$/;"	f	class:FileNode	access:private	signature:(LIBMTP_filetype_t in_type)
ubyte	BmpStructs.h	/^typedef unsigned char ubyte;$/;"	t
ubyte	types.h	/^typedef unsigned char ubyte;$/;"	t
ushort	BmpStructs.h	/^typedef unsigned short ushort;$/;"	t
~DirNode	DirNode.cpp	/^DirNode::~DirNode ( void )$/;"	f	class:DirNode	signature:( void )
~DirNode	DirNode.h	/^    ~DirNode ( void );$/;"	p	class:DirNode	access:public	signature:( void )
~Icon	Icon.h	/^    ~Icon ()$/;"	f	class:Icon	access:public	signature:()
~MtpDevice	MtpDevice.cpp	/^MtpDevice::~MtpDevice()$/;"	f	class:MtpDevice	signature:()
~MtpDevice	MtpDevice.h	/^    ~MtpDevice();$/;"	p	class:MtpDevice	access:public	signature:()
~MtpPortal	MtpPortal.h	/^    ~MtpPortal()$/;"	f	class:MtpPortal	access:public	signature:()
